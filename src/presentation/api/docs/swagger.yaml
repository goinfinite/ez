basePath: /api
definitions:
  apiController.FailedArchiveFileUpload:
    properties:
      failReason:
        type: string
      fileName:
        type: string
    type: object
  dto.ContainerWithMetrics:
    properties:
      accountId:
        type: integer
      createdAt:
        type: integer
      entrypoint:
        type: string
      envs:
        items:
          type: string
        type: array
      hostname:
        type: string
      id:
        type: string
      imageAddress:
        type: string
      imageHash:
        type: string
      imageId:
        type: string
      metrics:
        $ref: '#/definitions/valueObject.ContainerMetrics'
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      profileId:
        type: integer
      restartCount:
        type: integer
      restartPolicy:
        type: string
      startedAt:
        type: integer
      status:
        type: boolean
      stoppedAt:
        type: integer
      updatedAt:
        type: integer
    type: object
  dto.CreateAccount:
    properties:
      password:
        type: string
      quota:
        $ref: '#/definitions/valueObject.AccountQuota'
      username:
        type: string
    type: object
  dto.CreateContainer:
    properties:
      accountId:
        type: integer
      autoCreateMappings:
        type: boolean
      entrypoint:
        type: string
      envs:
        items:
          type: string
        type: array
      hostname:
        type: string
      imageAddress:
        type: string
      launchScript:
        type: string
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      profileId:
        type: integer
      restartPolicy:
        type: string
    type: object
  dto.CreateContainerImageArchiveFile:
    properties:
      accountId:
        type: integer
      compressionFormat:
        type: string
      imageId:
        type: string
    type: object
  dto.CreateContainerProfile:
    properties:
      accountId:
        type: integer
      baseSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      hostMinCapacityPercent:
        type: integer
      maxSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      name:
        type: string
      scalingIntervalSecs:
        type: integer
      scalingMaxDurationSecs:
        type: integer
      scalingPolicy:
        type: string
      scalingThreshold:
        type: integer
    type: object
  dto.CreateContainerSnapshotImage:
    properties:
      archiveCompressionFormat:
        type: string
      containerId:
        type: string
      shouldCreateArchive:
        type: boolean
      shouldDiscardImage:
        type: boolean
    type: object
  dto.CreateMapping:
    properties:
      accountId:
        type: integer
      containerIds:
        items:
          type: string
        type: array
      hostname:
        type: string
      protocol:
        type: string
      publicPort:
        type: integer
    type: object
  dto.CreateMappingTarget:
    properties:
      accountId:
        type: integer
      containerId:
        type: string
      mappingId:
        type: integer
    type: object
  dto.CreateSessionToken:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.UpdateAccount:
    properties:
      accountId:
        type: integer
      password:
        type: string
      quota:
        $ref: '#/definitions/valueObject.AccountQuota'
      shouldUpdateApiKey:
        type: boolean
    type: object
  dto.UpdateContainer:
    properties:
      accountId:
        type: integer
      id:
        type: string
      profileId:
        type: integer
      status:
        type: boolean
    type: object
  dto.UpdateContainerProfile:
    properties:
      accountId:
        type: integer
      baseSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      hostMinCapacityPercent:
        type: integer
      maxSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      name:
        type: string
      profileId:
        type: integer
      scalingIntervalSecs:
        type: integer
      scalingMaxDurationSecs:
        type: integer
      scalingPolicy:
        type: string
      scalingThreshold:
        type: integer
    type: object
  dto.UpdateScheduledTask:
    properties:
      runAt:
        type: integer
      status:
        type: string
      taskId:
        type: integer
    type: object
  entity.AccessToken:
    properties:
      expiresIn:
        type: integer
      tokenStr:
        type: string
      type:
        $ref: '#/definitions/valueObject.AccessTokenType'
    type: object
  entity.Account:
    properties:
      createdAt:
        type: integer
      groupId:
        type: integer
      homeDirectory:
        type: string
      id:
        type: integer
      quota:
        $ref: '#/definitions/valueObject.AccountQuota'
      quotaUsage:
        $ref: '#/definitions/valueObject.AccountQuota'
      updatedAt:
        type: integer
      username:
        type: string
    type: object
  entity.Container:
    properties:
      accountId:
        type: integer
      createdAt:
        type: integer
      entrypoint:
        type: string
      envs:
        items:
          type: string
        type: array
      hostname:
        type: string
      id:
        type: string
      imageAddress:
        type: string
      imageHash:
        type: string
      imageId:
        type: string
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      profileId:
        type: integer
      restartCount:
        type: integer
      restartPolicy:
        type: string
      startedAt:
        type: integer
      status:
        type: boolean
      stoppedAt:
        type: integer
      updatedAt:
        type: integer
    type: object
  entity.ContainerImage:
    properties:
      accountId:
        type: integer
      createdAt:
        type: integer
      entrypoint:
        type: string
      envs:
        items:
          type: string
        type: array
      id:
        type: string
      imageAddress:
        type: string
      imageHash:
        type: string
      isa:
        type: string
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      sizeBytes:
        type: integer
    type: object
  entity.ContainerImageArchiveFile:
    properties:
      accountId:
        type: integer
      createdAt:
        type: integer
      downloadUrl:
        type: string
      imageId:
        type: string
      sizeBytes:
        type: integer
      unixFilePath:
        type: string
    type: object
  entity.ContainerProfile:
    properties:
      accountId:
        type: integer
      baseSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      hostMinCapacityPercent:
        type: integer
      id:
        type: integer
      maxSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      name:
        type: string
      scalingIntervalHours:
        type: integer
      scalingIntervalMinutes:
        type: integer
      scalingIntervalSecs:
        type: integer
      scalingMaxDurationHours:
        type: integer
      scalingMaxDurationMinutes:
        type: integer
      scalingMaxDurationSecs:
        type: integer
      scalingPolicy:
        type: string
      scalingThreshold:
        type: integer
    type: object
  entity.LicenseInfo:
    properties:
      errorCount:
        type: integer
      expiresAt:
        type: integer
      fingerprint:
        type: string
      lastCheckAt:
        type: integer
      method:
        type: string
      status:
        type: string
      updatedAt:
        type: integer
    type: object
  entity.Mapping:
    properties:
      accountId:
        type: integer
      createdAt:
        type: integer
      hostname:
        type: string
      id:
        type: integer
      protocol:
        type: string
      publicPort:
        type: integer
      targets:
        items:
          $ref: '#/definitions/entity.MappingTarget'
        type: array
      updatedAt:
        type: integer
    type: object
  entity.MappingTarget:
    properties:
      containerHostname:
        type: string
      containerId:
        type: string
      containerPrivatePort:
        type: integer
      id:
        type: integer
      mappingId:
        type: integer
    type: object
  entity.O11yOverview:
    properties:
      hostname:
        type: string
      publicIp:
        type: string
      resourceUsage:
        $ref: '#/definitions/valueObject.HostResourceUsage'
      specs:
        $ref: '#/definitions/valueObject.HardwareSpecs'
      uptimeSecs:
        type: integer
    type: object
  entity.RegistryImage:
    properties:
      createdAt:
        type: integer
      description:
        type: string
      imageAddress:
        type: string
      isas:
        items:
          type: string
        type: array
      logoUrl:
        type: string
      name:
        type: string
      publisherName:
        type: string
      pullCount:
        type: integer
      registryName:
        type: string
      starCount:
        type: integer
      updatedAt:
        type: integer
    type: object
  entity.RegistryTaggedImage:
    properties:
      imageAddress:
        type: string
      imageHash:
        type: string
      imageName:
        type: string
      isa:
        type: string
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      publisherName:
        type: string
      registryName:
        type: string
      sizeBytes:
        type: integer
      tagName:
        type: string
      updatedAt:
        type: integer
    type: object
  entity.ScheduledTask:
    properties:
      command:
        type: string
      createdAt:
        type: integer
      elapsedSecs:
        type: integer
      err:
        type: string
      finishedAt:
        type: integer
      id:
        type: integer
      name:
        type: string
      output:
        type: string
      runAt:
        type: integer
      startedAt:
        type: integer
      status:
        type: string
      tags:
        items:
          type: string
        type: array
      timeoutSecs:
        type: integer
      updatedAt:
        type: integer
    type: object
  valueObject.AccessTokenType:
    enum:
    - sessionToken
    - accountApiKey
    type: string
    x-enum-varnames:
    - sessionToken
    - accountApiKey
  valueObject.AccountQuota:
    properties:
      cpuCores:
        type: number
      memoryBytes:
        type: integer
      memoryGibibytes:
        type: integer
      memoryMebibytes:
        type: integer
      millicores:
        type: integer
      storageBytes:
        type: integer
      storageGibibytes:
        type: integer
      storageInodes:
        type: integer
      storageMebibytes:
        type: integer
      storagePerformanceUnits:
        type: integer
    type: object
  valueObject.ContainerMetrics:
    properties:
      avgCpuPercent:
        type: number
      currentCpuPercent:
        type: number
      memoryBytes:
        type: integer
      memoryPercent:
        type: number
      netInputBytes:
        type: integer
      netOutputBytes:
        type: integer
      storageInodesCount:
        type: integer
      storageInputBytes:
        type: integer
      storageOutputBytes:
        type: integer
      storageSpaceBytes:
        type: integer
    type: object
  valueObject.ContainerSpecs:
    properties:
      cpuCores:
        type: number
      memoryBytes:
        type: integer
      memoryGibibytes:
        type: integer
      memoryMebibytes:
        type: integer
      millicores:
        type: integer
      storagePerformanceUnits:
        type: integer
    type: object
  valueObject.HardwareSpecs:
    properties:
      cpuCoresCount:
        type: number
      cpuFrequency:
        type: number
      cpuModelName:
        type: string
      memoryTotalBytes:
        type: integer
    type: object
  valueObject.HostResourceUsage:
    properties:
      cpuPercent:
        type: number
      memoryPercent:
        type: number
      netInfo:
        items:
          $ref: '#/definitions/valueObject.NetInterfaceInfo'
        type: array
      storageInfo:
        items:
          $ref: '#/definitions/valueObject.StorageUnitInfo'
        type: array
    type: object
  valueObject.NetInterfaceInfo:
    properties:
      deviceName:
        type: string
      recvBytes:
        type: integer
      recvDropPackets:
        type: integer
      recvErrs:
        type: integer
      recvPackets:
        type: integer
      sentBytes:
        type: integer
      sentDropPackets:
        type: integer
      sentErrs:
        type: integer
      sentPackets:
        type: integer
    type: object
  valueObject.PortBinding:
    properties:
      containerPort:
        type: integer
      privatePort:
        type: integer
      protocol:
        type: string
      publicPort:
        type: integer
      serviceName:
        type: string
    type: object
  valueObject.StorageUnitInfo:
    properties:
      deviceName:
        type: string
      fileSystem:
        type: string
      freeBytes:
        type: integer
      freeInodes:
        type: integer
      mountPoint:
        type: string
      readBytes:
        type: integer
      readOpsCount:
        type: integer
      totalBytes:
        type: integer
      totalInodes:
        type: integer
      usedBytes:
        type: integer
      usedInodes:
        type: integer
      usedInodesPercent:
        type: number
      usedPercent:
        type: number
      writeBytes:
        type: integer
      writeOpsCount:
        type: integer
    type: object
info:
  contact:
    email: eng+swagger@speedia.net
    name: Speedia Engineering
    url: https://speedia.net/
  description: Speedia Control API
  license:
    name: SPEEDIA WEB SERVICES, LLC © 2024. All Rights Reserved.
    url: https://speedia.net/tos/
  termsOfService: https://speedia.net/tos/
  title: ControlApi
  version: 0.0.7
paths:
  /v1/account/:
    get:
      consumes:
      - application/json
      description: List accounts.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Account'
            type: array
      security:
      - Bearer: []
      summary: ReadAccounts
      tags:
      - account
    post:
      consumes:
      - application/json
      description: Create a new account.
      parameters:
      - description: Human-readable fields ('cpuCores', 'memoryMebibytes' etc) will
          be converted to their technical counterpart ('millicores' etc) automatically.
        in: body
        name: createDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAccount'
      produces:
      - application/json
      responses:
        "201":
          description: AccountCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateAccount
      tags:
      - account
    put:
      consumes:
      - application/json
      description: Update an account.
      parameters:
      - description: Only 'accountId' is required. Human-readable fields ('cpuCores',
          'memoryMebibytes' etc) will be converted to their technical counterpart
          ('millicores' etc) automatically.
        in: body
        name: updateDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAccount'
      produces:
      - application/json
      responses:
        "200":
          description: AccountUpdated message or NewKeyString
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateAccount
      tags:
      - account
  /v1/account/{accountId}/:
    delete:
      consumes:
      - application/json
      description: Delete an account.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: AccountDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteAccount
      tags:
      - account
  /v1/auth/login/:
    post:
      consumes:
      - application/json
      description: Create a new session token with the provided credentials.
      parameters:
      - description: CreateSessionToken
        in: body
        name: createSessionToken
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSessionToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.AccessToken'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: CreateSessionTokenWithCredentials
      tags:
      - auth
  /v1/container/:
    get:
      consumes:
      - application/json
      description: List containers.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Container'
            type: array
      security:
      - Bearer: []
      summary: ReadContainers
      tags:
      - container
    post:
      consumes:
      - application/json
      description: Create a new container.
      parameters:
      - description: Only accountId, hostname and imageAddress are required.<br />When
          specifying portBindings, only 'publicPort' OR 'serviceName' is required.<br
          />'launchScript' must be base64 encoded (if any).
        in: body
        name: createContainerDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateContainer'
      produces:
      - application/json
      responses:
        "201":
          description: ContainerCreationScheduled
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateContainer
      tags:
      - container
    put:
      consumes:
      - application/json
      description: Update a container.
      parameters:
      - description: UpdateContainer (Only accountId and containerId are required.)
        in: body
        name: updateContainerDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateContainer'
      produces:
      - application/json
      responses:
        "200":
          description: ContainerUpdated
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateContainer
      tags:
      - container
  /v1/container/{accountId}/{containerId}/:
    delete:
      consumes:
      - application/json
      description: Delete a container.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      - description: ContainerId
        in: path
        name: containerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ContainerDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteContainer
      tags:
      - container
  /v1/container/image/:
    get:
      consumes:
      - application/json
      description: List container images.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.ContainerImage'
            type: array
      security:
      - Bearer: []
      summary: ReadContainerImages
      tags:
      - containerImage
  /v1/container/image/{accountId}/{imageId}/:
    delete:
      consumes:
      - application/json
      description: Delete a container image.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      - description: ImageId
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ContainerImageDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteContainerImage
      tags:
      - containerImage
  /v1/container/image/archive/:
    get:
      consumes:
      - application/json
      description: List container image archive files.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.ContainerImageArchiveFile'
            type: array
      security:
      - Bearer: []
      summary: ReadContainerImageArchiveFiles
      tags:
      - containerImageArchive
    post:
      consumes:
      - application/json
      description: Export a container image to a file. This is an asynchronous operation.
      parameters:
      - description: CreateContainerImageArchiveFileDto
        in: body
        name: createContainerImageArchiveFileDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateContainerImageArchiveFile'
      produces:
      - application/json
      responses:
        "201":
          description: ContainerImageArchiveFileCreationScheduled
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateContainerImageArchiveFile
      tags:
      - containerImageArchive
  /v1/container/image/archive/{accountId}/{imageId}/:
    delete:
      consumes:
      - application/json
      description: Delete a container image archive file.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      - description: ImageId
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ContainerImageArchiveFileDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteContainerImageArchiveFile
      tags:
      - containerImageArchive
    get:
      consumes:
      - application/json
      description: Download a container image archive file.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      - description: ImageId
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: ContainerImageArchiveFile
          schema:
            type: file
      security:
      - Bearer: []
      summary: DownloadContainerImageArchiveFile
      tags:
      - containerImageArchive
  /v1/container/image/archive/import/:
    post:
      consumes:
      - multipart/form-data
      description: Import container images from archive files.
      parameters:
      - description: AccountId
        in: formData
        name: accountId
        type: string
      - description: ArchiveFiles
        in: formData
        name: archiveFiles
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: ContainerImageArchiveFilesImported
          schema:
            type: string
        "207":
          description: ContainerImageArchiveFilesPartiallyImported
          schema:
            items:
              $ref: '#/definitions/apiController.FailedArchiveFileUpload'
            type: array
      security:
      - Bearer: []
      summary: ImportContainerImageArchiveFiles
      tags:
      - containerImageArchive
  /v1/container/image/snapshot/:
    post:
      consumes:
      - application/json
      description: Create a new container snapshot image. This is an asynchronous
        operation.
      parameters:
      - description: Container's owner account must have enough quota to store the
          snapshot image (and/or archive).<br />'shouldCreateArchive' and 'shouldDiscardImage'
          are optional and default to false if not provided.<br/>'shouldDiscardImage'
          is only effective when 'shouldCreateArchive' is true and it will delete
          the snapshot image after creating the archive file.<br /> 'archiveCompressionFormat'
          is optional and defaults to 'br' if not provided. Although it's possible
          to provide other values, it's recommended to use 'br' for best speed/compression
          ratio.
        in: body
        name: createContainerSnapshotImageDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateContainerSnapshotImage'
      produces:
      - application/json
      responses:
        "201":
          description: ContainerSnapshotImageCreationScheduled
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateContainerSnapshotImage
      tags:
      - containerImage
  /v1/container/metrics/:
    get:
      consumes:
      - application/json
      description: List containers with metrics.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ContainerWithMetrics'
            type: array
      security:
      - Bearer: []
      summary: ReadContainersWithMetrics
      tags:
      - container
  /v1/container/profile/:
    get:
      consumes:
      - application/json
      description: List container profiles.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.ContainerProfile'
            type: array
      security:
      - Bearer: []
      summary: ReadContainerProfiles
      tags:
      - containerProfile
    post:
      consumes:
      - application/json
      description: Create a new container profile.
      parameters:
      - description: Only 'name' and 'baseSpecs' are required. Human-readable fields
          ('cpuCores', 'memoryMebibytes' etc) will be converted to their technical
          counterpart ('millicores' etc) automatically.
        in: body
        name: createContainerProfileDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateContainerProfile'
      produces:
      - application/json
      responses:
        "201":
          description: ContainerProfileCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateNewContainerProfile
      tags:
      - containerProfile
    put:
      consumes:
      - application/json
      description: Update a container profile.
      parameters:
      - description: Only 'id' is required. Human-readable fields ('cpuCores', 'memoryMebibytes'
          etc) will be converted to their technical counterpart ('millicores' etc)
          automatically.
        in: body
        name: updateContainerProfileDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateContainerProfile'
      produces:
      - application/json
      responses:
        "200":
          description: ContainerProfileUpdated
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateContainerProfile
      tags:
      - containerProfile
  /v1/container/profile/{accountId}/{profileId}/:
    delete:
      consumes:
      - application/json
      description: Delete a container profile.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      - description: ProfileId
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ContainerProfileDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteContainerProfile
      tags:
      - containerProfile
  /v1/container/registry/image/:
    get:
      consumes:
      - application/json
      description: Get container registry images.
      parameters:
      - description: ImageName
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.RegistryImage'
            type: array
      security:
      - Bearer: []
      summary: GetContainerRegistryImages
      tags:
      - containerRegistry
  /v1/container/registry/image/tagged/:
    get:
      consumes:
      - application/json
      description: Get container registry tagged image.
      parameters:
      - description: ImageAddress
        in: query
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.RegistryTaggedImage'
      security:
      - Bearer: []
      summary: GetContainerRegistryTaggedImage
      tags:
      - containerRegistry
  /v1/container/session/{accountId}/{containerId}/:
    get:
      consumes:
      - application/json
      description: Creates a session token for the specified container and redirects
        to Speedia OS dashboard (if shouldRedirect is not false).
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      - description: ContainerId
        in: path
        name: containerId
        required: true
        type: string
      - description: ShouldRedirect (default/empty is true)
        in: query
        name: shouldRedirect
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: If shouldRedirect is set to false, the updated session token
            is returned.
          schema:
            type: string
        "302":
          description: A redirect to Speedia OS dashboard (:1618/{containerId}/).
          schema:
            type: string
        "500":
          description: Container is not found, not running or isn't Speedia OS.
          schema:
            type: string
      security:
      - Bearer: []
      summary: CreateContainerSessionToken
      tags:
      - container
  /v1/license/:
    get:
      consumes:
      - application/json
      description: Get license info.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.LicenseInfo'
      security:
      - Bearer: []
      summary: ReadLicenseInfo
      tags:
      - license
  /v1/mapping/:
    get:
      consumes:
      - application/json
      description: List mappings.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Mapping'
            type: array
      security:
      - Bearer: []
      summary: ReadMappings
      tags:
      - mapping
    post:
      consumes:
      - application/json
      description: Create a new mapping.
      parameters:
      - description: NewMapping
        in: body
        name: createMappingDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMapping'
      produces:
      - application/json
      responses:
        "201":
          description: MappingCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateNewMapping
      tags:
      - mapping
  /v1/mapping/{accountId}/{mappingId}/:
    delete:
      consumes:
      - application/json
      description: Delete a mapping.
      parameters:
      - description: MappingId
        in: path
        name: mappingId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: MappingDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteMapping
      tags:
      - mapping
  /v1/mapping/{accountId}/{mappingId}/target/{targetId}/:
    delete:
      consumes:
      - application/json
      description: Delete a mapping target.
      parameters:
      - description: MappingId
        in: path
        name: mappingId
        required: true
        type: string
      - description: TargetId
        in: path
        name: targetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: MappingTargetDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteMappingTarget
      tags:
      - mapping
  /v1/mapping/{mappingId}/:
    delete:
      consumes:
      - application/json
      description: Delete a mapping.
      parameters:
      - description: MappingId
        in: path
        name: mappingId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: MappingDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteMapping
      tags:
      - mapping
  /v1/mapping/{mappingId}/target/{targetId}/:
    delete:
      consumes:
      - application/json
      description: Delete a mapping target.
      parameters:
      - description: MappingId
        in: path
        name: mappingId
        required: true
        type: string
      - description: TargetId
        in: path
        name: targetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: MappingTargetDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteMappingTarget
      tags:
      - mapping
  /v1/mapping/target/:
    post:
      consumes:
      - application/json
      description: Create a new mapping target.
      parameters:
      - description: NewMappingTarget
        in: body
        name: createMappingTargetDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMappingTarget'
      produces:
      - application/json
      responses:
        "201":
          description: MappingTargetCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateMappingTarget
      tags:
      - mapping
  /v1/o11y/overview/:
    get:
      consumes:
      - application/json
      description: Show system information and resource usage.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.O11yOverview'
      security:
      - Bearer: []
      summary: O11yOverview
      tags:
      - o11y
  /v1/task/:
    get:
      consumes:
      - application/json
      description: List scheduled tasks.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.ScheduledTask'
            type: array
      security:
      - Bearer: []
      summary: ReadScheduledTasks
      tags:
      - task
    put:
      consumes:
      - application/json
      description: Reschedule a task or change its status.
      parameters:
      - description: UpdateScheduledTask (Only id is required.)
        in: body
        name: updateScheduledTaskDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateScheduledTask'
      produces:
      - application/json
      responses:
        "200":
          description: ScheduledTaskUpdated
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateScheduledTask
      tags:
      - task
securityDefinitions:
  Bearer:
    description: Type "Bearer" + JWT token or API key.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
