basePath: /v1
definitions:
  dto.AddAccount:
    properties:
      password:
        type: string
      quota:
        $ref: '#/definitions/valueObject.AccountQuota'
      username:
        type: string
    type: object
  dto.AddContainer:
    properties:
      accountId:
        type: integer
      entrypoint:
        type: string
      envs:
        items:
          type: string
        type: array
      hostname:
        type: string
      image:
        type: string
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      profileId:
        type: integer
      restartPolicy:
        $ref: '#/definitions/valueObject.ContainerRestartPolicy'
    type: object
  dto.AddContainerProfile:
    properties:
      baseSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      hostMinCapacityPercent:
        type: number
      maxSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      name:
        type: string
      scalingIntervalSecs:
        type: integer
      scalingMaxDurationSecs:
        type: integer
      scalingPolicy:
        $ref: '#/definitions/valueObject.ScalingPolicy'
      scalingThreshold:
        type: integer
    type: object
  dto.Login:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.UpdateAccount:
    properties:
      accountId:
        type: integer
      password:
        type: string
      quota:
        $ref: '#/definitions/valueObject.AccountQuota'
      shouldUpdateApiKey:
        type: boolean
    type: object
  dto.UpdateContainer:
    properties:
      accountId:
        type: integer
      id:
        type: string
      profileId:
        type: integer
      status:
        type: boolean
    type: object
  dto.UpdateContainerProfile:
    properties:
      baseSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      hostMinCapacityPercent:
        type: number
      id:
        type: integer
      maxSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      name:
        type: string
      scalingIntervalSecs:
        type: integer
      scalingMaxDurationSecs:
        type: integer
      scalingPolicy:
        $ref: '#/definitions/valueObject.ScalingPolicy'
      scalingThreshold:
        type: integer
    type: object
  entity.AccessToken:
    properties:
      expiresIn:
        type: integer
      tokenStr:
        type: string
      type:
        $ref: '#/definitions/valueObject.AccessTokenType'
    type: object
  entity.Account:
    properties:
      createdAt:
        type: integer
      groupId:
        type: integer
      id:
        type: integer
      quota:
        $ref: '#/definitions/valueObject.AccountQuota'
      quotaUsage:
        $ref: '#/definitions/valueObject.AccountQuota'
      updatedAt:
        type: integer
      username:
        type: string
    type: object
  entity.Container:
    properties:
      accountId:
        type: integer
      createdAt:
        type: integer
      entrypoint:
        type: string
      envs:
        items:
          type: string
        type: array
      hostname:
        type: string
      id:
        type: string
      image:
        type: string
      imageHash:
        type: string
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      privateIp:
        type: string
      profileId:
        type: integer
      restartPolicy:
        $ref: '#/definitions/valueObject.ContainerRestartPolicy'
      startedAt:
        type: integer
      status:
        type: boolean
    type: object
  entity.ContainerProfile:
    properties:
      baseSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      hostMinCapacityPercent:
        type: number
      id:
        type: integer
      maxSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      name:
        type: string
      scalingIntervalSecs:
        type: integer
      scalingMaxDurationSecs:
        type: integer
      scalingPolicy:
        $ref: '#/definitions/valueObject.ScalingPolicy'
      scalingThreshold:
        type: integer
    type: object
  entity.O11yOverview:
    properties:
      currentUsage:
        $ref: '#/definitions/valueObject.CurrentResourceUsage'
      hostname:
        type: string
      publicIp:
        type: string
      specs:
        $ref: '#/definitions/valueObject.HardwareSpecs'
      uptimeSecs:
        type: integer
    type: object
  valueObject.AccessTokenType:
    enum:
    - sessionToken
    - accountApiKey
    type: string
    x-enum-varnames:
    - sessionToken
    - accountApiKey
  valueObject.AccountQuota:
    properties:
      cpuCores:
        type: number
      diskBytes:
        type: integer
      inodes:
        type: integer
      memoryBytes:
        type: integer
    type: object
  valueObject.ContainerRestartPolicy:
    enum:
    - "no"
    - on-failure
    - always
    - unless-stopped
    type: string
    x-enum-varnames:
    - "no"
    - onFailure
    - always
    - unlessStopped
  valueObject.ContainerSpecs:
    properties:
      cpuCores:
        type: number
      memoryBytes:
        type: integer
    type: object
  valueObject.CurrentResourceUsage:
    properties:
      cpuUsagePercent:
        type: number
      memUsagePercent:
        type: number
      netUsage:
        $ref: '#/definitions/valueObject.NetUsage'
      storageUsage:
        items:
          $ref: '#/definitions/valueObject.DiskInfo'
        type: array
    type: object
  valueObject.DiskInfo:
    properties:
      availableBytes:
        type: integer
      name:
        type: string
      totalBytes:
        type: integer
      usedBytes:
        type: integer
    type: object
  valueObject.HardwareSpecs:
    properties:
      cpuCores:
        type: integer
      cpuFrequency:
        type: number
      cpuModel:
        type: string
      memoryTotal:
        type: integer
      storageTotal:
        items:
          $ref: '#/definitions/valueObject.DiskInfo'
        type: array
    type: object
  valueObject.NetUsage:
    properties:
      receivedBytes:
        type: integer
      sentBytes:
        type: integer
    type: object
  valueObject.NetworkProtocol:
    enum:
    - tcp
    - udp
    type: string
    x-enum-varnames:
    - tcp
    - udp
  valueObject.PortBinding:
    properties:
      containerPort:
        type: integer
      hostPort:
        type: integer
      protocol:
        $ref: '#/definitions/valueObject.NetworkProtocol'
    type: object
  valueObject.ScalingPolicy:
    enum:
    - connection
    - cpu
    - memory
    type: string
    x-enum-varnames:
    - connection
    - cpu
    - memory
host: localhost:3141
info:
  contact:
    email: eng+swagger@goinfinite.net
    name: Infinite Engineering
    url: https://goinfinite.net/
  description: Infinite FleetManager API
  license:
    name: INFINITE CLOUD COMPUTING Â© 2023. All Rights Reserved.
    url: https://goinfinite.net/tos/
  termsOfService: https://goinfinite.net/tos/
  title: FleetApi
  version: 0.0.1
paths:
  /account/:
    get:
      consumes:
      - application/json
      description: List accs.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Account'
            type: array
      security:
      - Bearer: []
      summary: GetAccounts
      tags:
      - account
    post:
      consumes:
      - application/json
      description: Add a new account.
      parameters:
      - description: NewAccount
        in: body
        name: addAccountDto
        required: true
        schema:
          $ref: '#/definitions/dto.AddAccount'
      produces:
      - application/json
      responses:
        "201":
          description: AccountCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: AddNewAccount
      tags:
      - account
    put:
      consumes:
      - application/json
      description: Update an account.
      parameters:
      - description: UpdateAccount (Only accountId is required.)
        in: body
        name: updateAccountDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAccount'
      produces:
      - application/json
      responses:
        "200":
          description: AccountUpdated message or NewKeyString
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateAccount
      tags:
      - account
  /account/{accountId}/:
    delete:
      consumes:
      - application/json
      description: Delete an account.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: AccountDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteAccount
      tags:
      - account
  /auth/login/:
    post:
      consumes:
      - application/json
      description: Generate JWT with credentials
      parameters:
      - description: Login
        in: body
        name: loginDto
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.AccessToken'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: GenerateJwtWithCredentials
      tags:
      - auth
  /container/:
    get:
      consumes:
      - application/json
      description: List containers.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Container'
            type: array
      security:
      - Bearer: []
      summary: GetContainers
      tags:
      - container
    post:
      consumes:
      - application/json
      description: Add a new container.
      parameters:
      - description: NewContainer (Only accountId, hostname and imgAddr are required.)
        in: body
        name: addContainerDto
        required: true
        schema:
          $ref: '#/definitions/dto.AddContainer'
      produces:
      - application/json
      responses:
        "201":
          description: ContainerCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: AddNewContainer
      tags:
      - container
    put:
      consumes:
      - application/json
      description: Update a container.
      parameters:
      - description: UpdateContainer (Only accId and containerId are required.)
        in: body
        name: updateContainerDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateContainer'
      produces:
      - application/json
      responses:
        "200":
          description: ContainerUpdated message or NewKeyString
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateContainer
      tags:
      - container
  /container/{accountId}/{containerId}/:
    delete:
      consumes:
      - application/json
      description: Delete a container.
      parameters:
      - description: AccountId
        in: path
        name: accId
        required: true
        type: string
      - description: ContainerId
        in: path
        name: containerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ContainerDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteContainer
      tags:
      - container
  /container/profile/:
    get:
      consumes:
      - application/json
      description: List container profiles.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.ContainerProfile'
            type: array
      security:
      - Bearer: []
      summary: GetContainerProfiles
      tags:
      - container
    post:
      consumes:
      - application/json
      description: Add a new container profile.
      parameters:
      - description: NewContainerProfile (Only name and baseSpecs are required.)
        in: body
        name: addContainerProfileDto
        required: true
        schema:
          $ref: '#/definitions/dto.AddContainerProfile'
      produces:
      - application/json
      responses:
        "201":
          description: ContainerProfileCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: AddNewContainerProfile
      tags:
      - container
    put:
      consumes:
      - application/json
      description: Update a container profile.
      parameters:
      - description: UpdateContainerProfile (Only id is required.)
        in: body
        name: updateContainerProfileDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateContainerProfile'
      produces:
      - application/json
      responses:
        "200":
          description: ContainerProfileUpdated
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateContainerProfile
      tags:
      - container
  /container/profile/{profileId}/:
    delete:
      consumes:
      - application/json
      description: Delete a container profile.
      parameters:
      - description: ProfileId
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ContainerProfileDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteContainerProfile
      tags:
      - container
  /o11y/overview/:
    get:
      consumes:
      - application/json
      description: Show system information and resource usage.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.O11yOverview'
      security:
      - Bearer: []
      summary: O11yOverview
      tags:
      - o11y
securityDefinitions:
  Bearer:
    description: Type "Bearer" + JWT token or API key.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
