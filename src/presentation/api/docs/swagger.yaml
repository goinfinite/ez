basePath: /api
definitions:
  apiController.FailedArchiveFileUpload:
    properties:
      failReason:
        type: string
      fileName:
        type: string
    type: object
  dto.ContainerWithMetrics:
    properties:
      accountId:
        type: integer
      createdAt:
        type: integer
      entrypoint:
        type: string
      envs:
        items:
          type: string
        type: array
      hostname:
        type: string
      id:
        type: string
      imageAddress:
        type: string
      imageHash:
        type: string
      imageId:
        type: string
      metrics:
        $ref: '#/definitions/valueObject.ContainerMetrics'
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      profileId:
        type: integer
      restartCount:
        type: integer
      restartPolicy:
        type: string
      startedAt:
        type: integer
      status:
        type: boolean
      stoppedAt:
        type: integer
      updatedAt:
        type: integer
    type: object
  dto.CreateAccount:
    properties:
      password:
        type: string
      quota:
        $ref: '#/definitions/valueObject.AccountQuota'
      username:
        type: string
    type: object
  dto.CreateBackupDestinationRequest:
    properties:
      accountId:
        type: integer
      destinationDescription:
        type: string
      destinationName:
        type: string
      destinationPath:
        type: string
      destinationType:
        $ref: '#/definitions/valueObject.BackupDestinationType'
      downloadBytesSecRateLimit:
        type: integer
      maxConcurrentConnections:
        type: integer
      maxDestinationStorageUsagePercent:
        type: integer
      minLocalStorageFreePercent:
        type: integer
      objectStorageBucketName:
        type: string
      objectStorageEndpointUrl:
        type: string
      objectStorageProvider:
        $ref: '#/definitions/valueObject.ObjectStorageProvider'
      objectStorageProviderAccessKeyId:
        type: string
      objectStorageProviderRegion:
        type: string
      objectStorageProviderSecretAccessKey:
        type: string
      remoteHostConnectionRetrySecs:
        type: integer
      remoteHostConnectionTimeoutSecs:
        type: integer
      remoteHostNetworkPort:
        type: integer
      remoteHostPassword:
        type: string
      remoteHostPrivateKeyFilePath:
        type: string
      remoteHostType:
        $ref: '#/definitions/valueObject.BackupDestinationRemoteHostType'
      remoteHostUsername:
        type: string
      remoteHostname:
        type: string
      skipCertificateVerification:
        type: boolean
      uploadBytesSecRateLimit:
        type: integer
    type: object
  dto.CreateBackupDestinationResponse:
    properties:
      destinationId:
        type: integer
      encryptionKey:
        type: string
    type: object
  dto.CreateBackupJob:
    properties:
      accountId:
        type: integer
      archiveCompressionFormat:
        $ref: '#/definitions/valueObject.CompressionFormat'
      backupSchedule:
        type: string
      containerAccountIds:
        items:
          type: integer
        type: array
      containerIds:
        items:
          type: string
        type: array
      destinationIds:
        items:
          type: integer
        type: array
      exceptContainerAccountIds:
        items:
          type: integer
        type: array
      exceptContainerIds:
        items:
          type: string
        type: array
      jobDescription:
        type: string
      maxConcurrentCpuCores:
        type: integer
      maxTaskRetentionCount:
        type: integer
      maxTaskRetentionDays:
        type: integer
      retentionStrategy:
        $ref: '#/definitions/valueObject.BackupRetentionStrategy'
      timeoutSecs:
        type: integer
    type: object
  dto.CreateBackupTaskArchive:
    properties:
      containerAccountIds:
        items:
          type: integer
        type: array
      containerIds:
        items:
          type: string
        type: array
      exceptContainerAccountIds:
        items:
          type: integer
        type: array
      exceptContainerIds:
        items:
          type: string
        type: array
      taskId:
        type: integer
      timeoutSecs:
        type: integer
    type: object
  dto.CreateContainer:
    properties:
      accountId:
        type: integer
      autoCreateMappings:
        type: boolean
      entrypoint:
        type: string
      envs:
        items:
          type: string
        type: array
      existingContainerId:
        type: string
      hostname:
        type: string
      imageAddress:
        type: string
      imageId:
        type: string
      launchScript:
        type: string
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      profileId:
        type: integer
      restartPolicy:
        type: string
      useImageExposedPorts:
        type: boolean
    type: object
  dto.CreateContainerImageArchive:
    properties:
      accountId:
        type: integer
      compressionFormat:
        $ref: '#/definitions/valueObject.CompressionFormat'
      imageId:
        type: string
    type: object
  dto.CreateContainerProfile:
    properties:
      accountId:
        type: integer
      baseSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      hostMinCapacityPercent:
        type: integer
      maxSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      name:
        type: string
      scalingIntervalSecs:
        type: integer
      scalingMaxDurationSecs:
        type: integer
      scalingPolicy:
        type: string
      scalingThreshold:
        type: integer
    type: object
  dto.CreateContainerSnapshotImage:
    properties:
      archiveCompressionFormat:
        $ref: '#/definitions/valueObject.CompressionFormat'
      containerId:
        type: string
      shouldCreateArchive:
        type: boolean
      shouldDiscardImage:
        type: boolean
    type: object
  dto.CreateMapping:
    properties:
      accountId:
        type: integer
      containerIds:
        items:
          type: string
        type: array
      hostname:
        type: string
      protocol:
        type: string
      publicPort:
        type: integer
    type: object
  dto.CreateMappingTarget:
    properties:
      accountId:
        type: integer
      containerId:
        type: string
      mappingId:
        type: integer
    type: object
  dto.CreateSessionToken:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.Pagination:
    properties:
      itemsPerPage:
        type: integer
      itemsTotal:
        type: integer
      lastSeenId:
        type: string
      pageNumber:
        type: integer
      pagesTotal:
        type: integer
      sortBy:
        type: string
      sortDirection:
        $ref: '#/definitions/valueObject.PaginationSortDirection'
    type: object
  dto.ReadBackupDestinationsResponse:
    properties:
      destinations:
        items: {}
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.ReadBackupJobsResponse:
    properties:
      jobs:
        items:
          $ref: '#/definitions/entity.BackupJob'
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.ReadBackupTaskArchivesResponse:
    properties:
      archives:
        items:
          $ref: '#/definitions/entity.BackupTaskArchive'
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.ReadBackupTasksResponse:
    properties:
      pagination:
        $ref: '#/definitions/dto.Pagination'
      tasks:
        items:
          $ref: '#/definitions/entity.BackupTask'
        type: array
    type: object
  dto.ReadContainerImageArchivesResponse:
    properties:
      archives:
        items:
          $ref: '#/definitions/entity.ContainerImageArchive'
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.ReadContainersResponse:
    properties:
      containers:
        items:
          $ref: '#/definitions/entity.Container'
        type: array
      containersWithMetrics:
        items:
          $ref: '#/definitions/dto.ContainerWithMetrics'
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.ReadMarketplaceItemsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/entity.MarketplaceItem'
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.ReadScheduledTasksResponse:
    properties:
      pagination:
        $ref: '#/definitions/dto.Pagination'
      tasks:
        items:
          $ref: '#/definitions/entity.ScheduledTask'
        type: array
    type: object
  dto.RestoreBackupTaskRequest:
    properties:
      archiveId:
        type: string
      containerAccountIds:
        items:
          type: integer
        type: array
      containerIds:
        items:
          type: string
        type: array
      exceptContainerAccountIds:
        items:
          type: integer
        type: array
      exceptContainerIds:
        items:
          type: string
        type: array
      shouldReplaceExistingContainers:
        type: boolean
      shouldRestoreMappings:
        type: boolean
      taskId:
        type: integer
      timeoutSecs:
        type: integer
    type: object
  dto.UpdateAccount:
    properties:
      accountId:
        type: integer
      password:
        type: string
      quota:
        $ref: '#/definitions/valueObject.AccountQuota'
      shouldUpdateApiKey:
        type: boolean
    type: object
  dto.UpdateBackupDestination:
    properties:
      accountId:
        type: integer
      destinationDescription:
        type: string
      destinationId:
        type: integer
      destinationName:
        type: string
      destinationPath:
        type: string
      downloadBytesSecRateLimit:
        type: integer
      maxConcurrentConnections:
        type: integer
      maxDestinationStorageUsagePercent:
        type: integer
      minLocalStorageFreePercent:
        type: integer
      objectStorageBucketName:
        type: string
      objectStorageEndpointUrl:
        type: string
      objectStorageProvider:
        $ref: '#/definitions/valueObject.ObjectStorageProvider'
      objectStorageProviderAccessKeyId:
        type: string
      objectStorageProviderRegion:
        type: string
      objectStorageProviderSecretAccessKey:
        type: string
      remoteHostConnectionRetrySecs:
        type: integer
      remoteHostConnectionTimeoutSecs:
        type: integer
      remoteHostNetworkPort:
        type: integer
      remoteHostPassword:
        type: string
      remoteHostPrivateKeyFilePath:
        type: string
      remoteHostType:
        $ref: '#/definitions/valueObject.BackupDestinationRemoteHostType'
      remoteHostUsername:
        type: string
      remoteHostname:
        type: string
      skipCertificateVerification:
        type: boolean
      uploadBytesSecRateLimit:
        type: integer
    type: object
  dto.UpdateBackupJob:
    properties:
      accountId:
        type: integer
      backupSchedule:
        type: string
      containerAccountIds:
        items:
          type: integer
        type: array
      containerIds:
        items:
          type: string
        type: array
      destinationIds:
        items:
          type: integer
        type: array
      exceptContainerAccountIds:
        items:
          type: integer
        type: array
      exceptContainerIds:
        items:
          type: string
        type: array
      jobDescription:
        type: string
      jobId:
        type: integer
      jobStatus:
        type: boolean
      maxConcurrentCpuCores:
        type: integer
      maxTaskRetentionCount:
        type: integer
      maxTaskRetentionDays:
        type: integer
      timeoutSecs:
        type: integer
    type: object
  dto.UpdateBackupTask:
    properties:
      jobId:
        type: integer
      taskStatus:
        $ref: '#/definitions/valueObject.BackupTaskStatus'
    type: object
  dto.UpdateContainer:
    properties:
      accountId:
        type: integer
      id:
        type: string
      profileId:
        type: integer
      status:
        type: boolean
    type: object
  dto.UpdateContainerProfile:
    properties:
      accountId:
        type: integer
      baseSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      hostMinCapacityPercent:
        type: integer
      maxSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      name:
        type: string
      profileId:
        type: integer
      scalingIntervalSecs:
        type: integer
      scalingMaxDurationSecs:
        type: integer
      scalingPolicy:
        type: string
      scalingThreshold:
        type: integer
    type: object
  dto.UpdateScheduledTask:
    properties:
      runAt:
        type: integer
      status:
        type: string
      taskId:
        type: integer
    type: object
  entity.AccessToken:
    properties:
      expiresIn:
        type: integer
      tokenStr:
        type: string
      type:
        $ref: '#/definitions/valueObject.AccessTokenType'
    type: object
  entity.Account:
    properties:
      createdAt:
        type: integer
      groupId:
        type: integer
      homeDirectory:
        type: string
      id:
        type: integer
      quota:
        $ref: '#/definitions/valueObject.AccountQuota'
      quotaUsage:
        $ref: '#/definitions/valueObject.AccountQuota'
      updatedAt:
        type: integer
      username:
        type: string
    type: object
  entity.BackupJob:
    properties:
      accountId:
        type: integer
      accountUsername:
        type: string
      archiveCompressionFormat:
        $ref: '#/definitions/valueObject.CompressionFormat'
      backupSchedule:
        type: string
      containerAccountIds:
        items:
          type: integer
        type: array
      containerIds:
        items:
          type: string
        type: array
      createdAt:
        type: integer
      destinationIds:
        items:
          type: integer
        type: array
      exceptContainerAccountIds:
        items:
          type: integer
        type: array
      exceptContainerIds:
        items:
          type: string
        type: array
      jobDescription:
        type: string
      jobId:
        type: integer
      jobStatus:
        type: boolean
      lastRunAt:
        type: integer
      lastRunStatus:
        $ref: '#/definitions/valueObject.BackupTaskStatus'
      maxConcurrentCpuCores:
        type: integer
      maxTaskRetentionCount:
        type: integer
      maxTaskRetentionDays:
        type: integer
      nextRunAt:
        type: integer
      retentionStrategy:
        $ref: '#/definitions/valueObject.BackupRetentionStrategy'
      tasksCount:
        type: integer
      timeoutSecs:
        type: integer
      totalSpaceUsageBytes:
        type: integer
      updatedAt:
        type: integer
    type: object
  entity.BackupTask:
    properties:
      accountId:
        type: integer
      accountUsername:
        type: string
      backupSchedule:
        type: string
      containerAccountIds:
        items:
          type: integer
        type: array
      createdAt:
        type: integer
      destinationId:
        type: integer
      elapsedSecs:
        type: integer
      executionOutput:
        type: string
      failedContainerIds:
        items:
          type: string
        type: array
      finishedAt:
        type: integer
      jobId:
        type: integer
      retentionStrategy:
        $ref: '#/definitions/valueObject.BackupRetentionStrategy'
      sizeBytes:
        type: integer
      startedAt:
        type: integer
      successfulContainerIds:
        items:
          type: string
        type: array
      taskId:
        type: integer
      taskStatus:
        $ref: '#/definitions/valueObject.BackupTaskStatus'
      timeoutSecs:
        type: integer
      updatedAt:
        type: integer
    type: object
  entity.BackupTaskArchive:
    properties:
      accountId:
        type: integer
      accountUsername:
        type: string
      archiveId:
        type: string
      createdAt:
        type: integer
      downloadUrl:
        type: string
      sizeBytes:
        type: integer
      taskId:
        type: integer
      unixFilePath:
        type: string
    type: object
  entity.Container:
    properties:
      accountId:
        type: integer
      createdAt:
        type: integer
      entrypoint:
        type: string
      envs:
        items:
          type: string
        type: array
      hostname:
        type: string
      id:
        type: string
      imageAddress:
        type: string
      imageHash:
        type: string
      imageId:
        type: string
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      profileId:
        type: integer
      restartCount:
        type: integer
      restartPolicy:
        type: string
      startedAt:
        type: integer
      status:
        type: boolean
      stoppedAt:
        type: integer
      updatedAt:
        type: integer
    type: object
  entity.ContainerImage:
    properties:
      accountId:
        type: integer
      createdAt:
        type: integer
      entrypoint:
        type: string
      envs:
        items:
          type: string
        type: array
      id:
        type: string
      imageAddress:
        type: string
      imageHash:
        type: string
      isa:
        type: string
      originContainerDetails:
        $ref: '#/definitions/entity.Container'
      originContainerMappings:
        items:
          $ref: '#/definitions/entity.Mapping'
        type: array
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      sizeBytes:
        type: integer
    type: object
  entity.ContainerImageArchive:
    properties:
      accountId:
        type: integer
      containerId:
        type: string
      createdAt:
        type: integer
      downloadUrl:
        type: string
      imageId:
        type: string
      sizeBytes:
        type: integer
      unixFilePath:
        type: string
    type: object
  entity.ContainerProfile:
    properties:
      accountId:
        type: integer
      baseSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      hostMinCapacityPercent:
        type: integer
      id:
        type: integer
      maxSpecs:
        $ref: '#/definitions/valueObject.ContainerSpecs'
      name:
        type: string
      scalingIntervalHours:
        type: integer
      scalingIntervalMinutes:
        type: integer
      scalingIntervalSecs:
        type: integer
      scalingMaxDurationHours:
        type: integer
      scalingMaxDurationMinutes:
        type: integer
      scalingMaxDurationSecs:
        type: integer
      scalingPolicy:
        type: string
      scalingThreshold:
        type: integer
    type: object
  entity.Mapping:
    properties:
      accountId:
        type: integer
      createdAt:
        type: integer
      hostname:
        type: string
      id:
        type: integer
      protocol:
        type: string
      publicPort:
        type: integer
      targets:
        items:
          $ref: '#/definitions/entity.MappingTarget'
        type: array
      updatedAt:
        type: integer
    type: object
  entity.MappingTarget:
    properties:
      containerHostname:
        type: string
      containerId:
        type: string
      containerPrivatePort:
        type: integer
      id:
        type: integer
      mappingId:
        type: integer
    type: object
  entity.MarketplaceItem:
    properties:
      avatarUrl:
        type: string
      description:
        type: string
      estimatedSizeBytes:
        type: integer
      id:
        type: integer
      launchScript:
        type: string
      manifestVersion:
        type: string
      minimumCpuMillicores:
        type: integer
      minimumMemoryBytes:
        type: integer
      name:
        type: string
      registryImageAddress:
        type: string
      slugs:
        items:
          type: string
        type: array
      type:
        type: string
    type: object
  entity.O11yOverview:
    properties:
      hostname:
        type: string
      privateIp:
        type: string
      publicIp:
        type: string
      resourceUsage:
        $ref: '#/definitions/valueObject.HostResourceUsage'
      specs:
        $ref: '#/definitions/valueObject.HardwareSpecs'
      uptimeRelative:
        type: string
      uptimeSecs:
        type: integer
    type: object
  entity.RegistryImage:
    properties:
      createdAt:
        type: integer
      description:
        type: string
      imageAddress:
        type: string
      isas:
        items:
          type: string
        type: array
      logoUrl:
        type: string
      name:
        type: string
      publisherName:
        type: string
      pullCount:
        type: integer
      registryName:
        type: string
      starCount:
        type: integer
      updatedAt:
        type: integer
      updatedAtRelative:
        type: string
    type: object
  entity.RegistryTaggedImage:
    properties:
      imageAddress:
        type: string
      imageHash:
        type: string
      imageName:
        type: string
      isa:
        type: string
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      publisherName:
        type: string
      registryName:
        type: string
      sizeBytes:
        type: integer
      tagName:
        type: string
      updatedAt:
        type: integer
    type: object
  entity.ScheduledTask:
    properties:
      command:
        type: string
      createdAt:
        type: integer
      elapsedSecs:
        type: integer
      err:
        type: string
      finishedAt:
        type: integer
      id:
        type: integer
      name:
        type: string
      output:
        type: string
      runAt:
        type: integer
      startedAt:
        type: integer
      status:
        type: string
      tags:
        items:
          type: string
        type: array
      timeoutSecs:
        type: integer
      updatedAt:
        type: integer
    type: object
  valueObject.AccessTokenType:
    enum:
    - sessionToken
    - accountApiKey
    type: string
    x-enum-varnames:
    - sessionToken
    - accountApiKey
  valueObject.AccountQuota:
    properties:
      cpuCores:
        type: number
      memoryBytes:
        type: integer
      memoryGibibytes:
        type: integer
      memoryMebibytes:
        type: integer
      millicores:
        type: integer
      storageBytes:
        type: integer
      storageGibibytes:
        type: integer
      storageInodes:
        type: integer
      storageMebibytes:
        type: integer
      storagePerformanceUnits:
        type: integer
    type: object
  valueObject.BackupDestinationRemoteHostType:
    enum:
    - ftp
    - sftp
    type: string
    x-enum-varnames:
    - BackupDestinationRemoteHostTypeFtp
    - BackupDestinationRemoteHostTypeSftp
  valueObject.BackupDestinationType:
    enum:
    - local
    - remote-host
    - object-storage
    type: string
    x-enum-varnames:
    - BackupDestinationTypeLocal
    - BackupDestinationTypeRemoteHost
    - BackupDestinationTypeObjectStorage
  valueObject.BackupRetentionStrategy:
    enum:
    - full
    - incremental
    type: string
    x-enum-varnames:
    - BackupRetentionStrategyFull
    - BackupRetentionStrategyIncremental
  valueObject.BackupTaskStatus:
    enum:
    - completed
    - failed
    - executing
    - partial
    - canceled
    - cancelled
    type: string
    x-enum-varnames:
    - BackupTaskStatusCompleted
    - BackupTaskStatusFailed
    - BackupTaskStatusExecuting
    - BackupTaskStatusPartial
    - BackupTaskStatusCanceled
    - BackupTaskStatusCancelled
  valueObject.CompressionFormat:
    enum:
    - tar
    - gzip
    - zip
    - xz
    - br
    type: string
    x-enum-varnames:
    - CompressionFormatTarball
    - CompressionFormatGzip
    - CompressionFormatZip
    - CompressionFormatXz
    - CompressionFormatBrotli
  valueObject.ContainerMetrics:
    properties:
      avgCpuPercent:
        type: number
      currentCpuPercent:
        type: number
      currentCpuPercentStr:
        type: string
      memoryBytes:
        type: integer
      memoryPercent:
        type: number
      memoryPercentStr:
        type: string
      netInputBytes:
        type: integer
      netOutputBytes:
        type: integer
      storageInodesCount:
        type: integer
      storageInputBytes:
        type: integer
      storageOutputBytes:
        type: integer
      storageSpaceBytes:
        type: integer
    type: object
  valueObject.ContainerSpecs:
    properties:
      cpuCores:
        type: number
      memoryBytes:
        type: integer
      memoryGibibytes:
        type: integer
      memoryMebibytes:
        type: integer
      millicores:
        type: integer
      storagePerformanceUnits:
        type: integer
    type: object
  valueObject.HardwareSpecs:
    properties:
      cpuCoresCount:
        type: number
      cpuFrequency:
        type: number
      cpuModelName:
        type: string
      memoryTotalBytes:
        type: integer
    type: object
  valueObject.HostResourceUsage:
    properties:
      cpuPercent:
        type: number
      cpuPercentStr:
        type: string
      memoryPercent:
        type: number
      memoryPercentStr:
        type: string
      netInfo:
        items:
          $ref: '#/definitions/valueObject.NetInterfaceInfo'
        type: array
      netInfoAggregated:
        $ref: '#/definitions/valueObject.NetInterfaceInfo'
      storageInfo:
        items:
          $ref: '#/definitions/valueObject.StorageUnitInfo'
        type: array
      userDataStorageInfo:
        $ref: '#/definitions/valueObject.StorageUnitInfo'
    type: object
  valueObject.NetInterfaceInfo:
    properties:
      deviceName:
        type: string
      recvBytes:
        type: integer
      recvDropPackets:
        type: integer
      recvErrs:
        type: integer
      recvPackets:
        type: integer
      sentBytes:
        type: integer
      sentDropPackets:
        type: integer
      sentErrs:
        type: integer
      sentPackets:
        type: integer
    type: object
  valueObject.ObjectStorageProvider:
    enum:
    - custom
    - akamai
    - alibaba
    - aws
    - cloudflare
    - digitalocean
    - google-cloud
    - linode
    - magalu
    - r2
    - wasabi
    type: string
    x-enum-varnames:
    - ObjectStorageProviderCustom
    - ObjectStorageProviderAkamai
    - ObjectStorageProviderAlibaba
    - ObjectStorageProviderAws
    - ObjectStorageProviderCloudFlare
    - ObjectStorageProviderDigitalOcean
    - ObjectStorageProviderGoogleCloud
    - ObjectStorageProviderLinode
    - ObjectStorageProviderMagalu
    - ObjectStorageProviderR2
    - ObjectStorageProviderWasabi
  valueObject.PaginationSortDirection:
    enum:
    - asc
    - desc
    type: string
    x-enum-varnames:
    - PaginationSortDirectionAsc
    - PaginationSortDirectionDesc
  valueObject.PortBinding:
    properties:
      containerPort:
        type: integer
      privatePort:
        type: integer
      protocol:
        type: string
      publicPort:
        type: integer
      serviceName:
        type: string
    type: object
  valueObject.StorageUnitInfo:
    properties:
      deviceName:
        type: string
      fileSystem:
        type: string
      freeBytes:
        type: integer
      freeInodes:
        type: integer
      mountPoint:
        type: string
      readBytes:
        type: integer
      readOpsCount:
        type: integer
      totalBytes:
        type: integer
      totalInodes:
        type: integer
      usedBytes:
        type: integer
      usedInodes:
        type: integer
      usedInodesPercent:
        type: number
      usedPercent:
        type: number
      usedPercentStr:
        type: string
      writeBytes:
        type: integer
      writeOpsCount:
        type: integer
    type: object
info:
  contact:
    email: eng+swagger@goinfinite.net
    name: Infinite Engineering
    url: https://goinfinite.net/
  description: Infinite Ez API
  license:
    name: FCL-1.0-ALv2
    url: https://github.com/goinfinite/ez/blob/main/LICENSE.md
  termsOfService: https://goinfinite.net/tos/
  title: ezApi
  version: 0.1.1
paths:
  /v1/account/:
    get:
      consumes:
      - application/json
      description: List accounts.
      parameters:
      - description: AccountId
        in: query
        name: id
        type: string
      - description: AccountUsername
        in: query
        name: username
        type: string
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Account'
            type: array
      security:
      - Bearer: []
      summary: ReadAccounts
      tags:
      - account
    post:
      consumes:
      - application/json
      description: Create a new account.
      parameters:
      - description: Human-readable fields ('cpuCores', 'memoryMebibytes' etc) will
          be converted to their technical counterpart ('millicores' etc) automatically.
        in: body
        name: createDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAccount'
      produces:
      - application/json
      responses:
        "201":
          description: AccountCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateAccount
      tags:
      - account
    put:
      consumes:
      - application/json
      description: Update an account.
      parameters:
      - description: Only 'accountId' is required. Human-readable fields ('cpuCores',
          'memoryMebibytes' etc) will be converted to their technical counterpart
          ('millicores' etc) automatically.
        in: body
        name: updateDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAccount'
      produces:
      - application/json
      responses:
        "200":
          description: AccountUpdated message or NewKeyString
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateAccount
      tags:
      - account
  /v1/account/{accountId}/:
    delete:
      consumes:
      - application/json
      description: Delete an account.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: AccountDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteAccount
      tags:
      - account
  /v1/auth/login/:
    post:
      consumes:
      - application/json
      description: Create a new session token with the provided credentials.
      parameters:
      - description: CreateSessionToken
        in: body
        name: createSessionToken
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSessionToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.AccessToken'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: CreateSessionTokenWithCredentials
      tags:
      - auth
  /v1/backup/destination/:
    get:
      consumes:
      - application/json
      description: List backups destinations.
      parameters:
      - description: BackupDestinationId
        in: query
        name: destinationId
        type: string
      - description: BackupAccountId
        in: query
        name: accountId
        type: integer
      - description: BackupDestinationName
        in: query
        name: destinationName
        type: string
      - description: BackupDestinationType
        in: query
        name: destinationType
        type: string
      - description: ObjectStorageProvider
        in: query
        name: objectStorageProvider
        type: string
      - description: RemoteHostType
        in: query
        name: remoteHostType
        type: string
      - description: RemoteHostname
        in: query
        name: remoteHostname
        type: string
      - description: CreatedBeforeAt
        in: query
        name: createdBeforeAt
        type: string
      - description: CreatedAfterAt
        in: query
        name: createdAfterAt
        type: string
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadBackupDestinationsResponse'
      security:
      - Bearer: []
      summary: ReadBackupsDestinations
      tags:
      - backup
    post:
      consumes:
      - application/json
      description: Create a backup destination.
      parameters:
      - description: CreateBackupDestination
        in: body
        name: createBackupDestinationDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBackupDestinationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateBackupDestinationResponse'
        "500":
          description: CreateBackupDestinationInfraError
          schema:
            type: string
      security:
      - Bearer: []
      summary: CreateBackupDestination
      tags:
      - backup
    put:
      consumes:
      - application/json
      description: Update a backup destination.
      parameters:
      - description: UpdateBackupDestination
        in: body
        name: updateBackupDestinationDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBackupDestination'
      produces:
      - application/json
      responses:
        "200":
          description: BackupDestinationUpdated
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateBackupDestination
      tags:
      - backup
  /v1/backup/destination/{accountId}/{destinationId}:
    delete:
      consumes:
      - application/json
      description: Delete a backup destination.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      - description: BackupDestinationId
        in: path
        name: destinationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: BackupDestinationDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteBackupDestination
      tags:
      - backup
  /v1/backup/job/:
    get:
      consumes:
      - application/json
      description: List backup jobs.
      parameters:
      - description: BackupJobId
        in: query
        name: jobId
        type: string
      - description: BackupJobStatus
        in: query
        name: jobStatus
        type: boolean
      - description: BackupAccountId
        in: query
        name: accountId
        type: integer
      - description: BackupDestinationId
        in: query
        name: destinationId
        type: string
      - description: RetentionStrategy
        in: query
        name: retentionStrategy
        type: string
      - description: ArchiveCompressionFormat
        in: query
        name: archiveCompressionFormat
        type: string
      - description: LastRunStatus
        in: query
        name: lastRunStatus
        type: string
      - description: LastRunBeforeAt
        in: query
        name: lastRunBeforeAt
        type: string
      - description: LastRunAfterAt
        in: query
        name: lastRunAfterAt
        type: string
      - description: NextRunBeforeAt
        in: query
        name: nextRunBeforeAt
        type: string
      - description: NextRunAfterAt
        in: query
        name: nextRunAfterAt
        type: string
      - description: CreatedBeforeAt
        in: query
        name: createdBeforeAt
        type: string
      - description: CreatedAfterAt
        in: query
        name: createdAfterAt
        type: string
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadBackupJobsResponse'
      security:
      - Bearer: []
      summary: ReadBackupJobs
      tags:
      - backup
    post:
      consumes:
      - application/json
      description: Create a backup destination.
      parameters:
      - description: CreateBackupJob
        in: body
        name: createBackupJobDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBackupJob'
      produces:
      - application/json
      responses:
        "201":
          description: BackupJobCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateBackupJob
      tags:
      - backup
    put:
      consumes:
      - application/json
      description: Update a backup job.
      parameters:
      - description: UpdateBackupJob
        in: body
        name: updateBackupJobDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBackupJob'
      produces:
      - application/json
      responses:
        "200":
          description: BackupJobUpdated
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateBackupJob
      tags:
      - backup
  /v1/backup/job/{accountId}/{jobId}:
    delete:
      consumes:
      - application/json
      description: Delete a backup job.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      - description: BackupJobId
        in: path
        name: jobId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: BackupJobDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteBackupJob
      tags:
      - backup
  /v1/backup/job/{accountId}/{jobId}/run/:
    post:
      consumes:
      - application/json
      description: Run a backup job.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      - description: BackupJobId
        in: path
        name: jobId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: BackupTaskCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: RunBackupJob
      tags:
      - backup
  /v1/backup/task/:
    get:
      consumes:
      - application/json
      description: List backup tasks.
      parameters:
      - description: BackupTaskId
        in: query
        name: taskId
        type: string
      - description: BackupAccountId
        in: query
        name: accountId
        type: integer
      - description: BackupJobId
        in: query
        name: jobId
        type: string
      - description: BackupDestinationId
        in: query
        name: destinationId
        type: string
      - description: BackupTaskStatus
        in: query
        name: taskStatus
        type: string
      - description: RetentionStrategy
        in: query
        name: retentionStrategy
        type: string
      - description: ContainerId
        in: query
        name: containerId
        type: string
      - description: StartedBeforeAt
        in: query
        name: startedBeforeAt
        type: string
      - description: StartedAfterAt
        in: query
        name: startedAfterAt
        type: string
      - description: FinishedBeforeAt
        in: query
        name: finishedBeforeAt
        type: string
      - description: FinishedAfterAt
        in: query
        name: finishedAfterAt
        type: string
      - description: CreatedBeforeAt
        in: query
        name: createdBeforeAt
        type: string
      - description: CreatedAfterAt
        in: query
        name: createdAfterAt
        type: string
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadBackupTasksResponse'
      security:
      - Bearer: []
      summary: ReadBackupTasks
      tags:
      - backup
    put:
      consumes:
      - application/json
      description: Update a backup task.
      parameters:
      - description: UpdateBackupTask
        in: body
        name: updateBackupTaskDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBackupTask'
      produces:
      - application/json
      responses:
        "200":
          description: BackupTaskUpdated
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateBackupTask
      tags:
      - backup
  /v1/backup/task/{taskId}/:
    delete:
      consumes:
      - application/json
      description: Delete a backup task and its files if "shouldDiscardFiles" is true.
      parameters:
      - description: BackupTaskId
        in: path
        name: taskId
        required: true
        type: string
      - description: ShouldDiscardFiles (bool)
        in: query
        name: shouldDiscardFiles
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: BackupTaskDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteBackupTask
      tags:
      - backup
  /v1/backup/task/archive/:
    get:
      consumes:
      - application/json
      description: List backup tasks archives.
      parameters:
      - description: BackupTaskArchiveId
        in: query
        name: archiveId
        type: string
      - description: BackupAccountId
        in: query
        name: accountId
        type: integer
      - description: BackupTaskId
        in: query
        name: taskId
        type: string
      - description: CreatedBeforeAt
        in: query
        name: createdBeforeAt
        type: string
      - description: CreatedAfterAt
        in: query
        name: createdAfterAt
        type: string
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadBackupTaskArchivesResponse'
      security:
      - Bearer: []
      summary: ReadBackupTaskArchives
      tags:
      - backup
    post:
      consumes:
      - application/json
      description: Schedule a backup task archive creation.
      parameters:
      - description: CreateBackupTaskArchive
        in: body
        name: createBackupTaskArchiveDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBackupTaskArchive'
      produces:
      - application/json
      responses:
        "201":
          description: BackupTaskArchiveCreationScheduled
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateBackupTaskArchive
      tags:
      - backup
  /v1/backup/task/archive/{archiveId}/:
    delete:
      consumes:
      - application/json
      description: Delete a backup task archive.
      parameters:
      - description: BackupTaskArchiveId
        in: path
        name: archiveId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: BackupTaskArchiveDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteBackupTaskArchive
      tags:
      - backup
    get:
      consumes:
      - application/json
      description: Download a backup task archive file.
      parameters:
      - description: ArchiveId
        in: path
        name: archiveId
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: BackupTaskArchiveFile
          schema:
            type: file
      security:
      - Bearer: []
      summary: DownloadBackupTaskArchiveFile
      tags:
      - backup
  /v1/backup/task/restore/:
    post:
      consumes:
      - application/json
      description: Schedule a backup task restoration.
      parameters:
      - description: RestoreBackupTask
        in: body
        name: restoreBackupTaskDto
        required: true
        schema:
          $ref: '#/definitions/dto.RestoreBackupTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: BackupTaskRestorationScheduled
          schema:
            type: object
      security:
      - Bearer: []
      summary: RestoreBackupTask
      tags:
      - backup
  /v1/container/:
    get:
      consumes:
      - application/json
      description: List containers.
      parameters:
      - description: ContainerId
        in: query
        name: containerId
        type: string
      - description: ContainerAccountId
        in: query
        name: containerAccountId
        type: integer
      - description: ContainerHostname
        in: query
        name: containerHostname
        type: string
      - description: ContainerStatus
        in: query
        name: containerStatus
        type: boolean
      - description: ContainerImageId
        in: query
        name: containerImageId
        type: string
      - description: ContainerImageAddress
        in: query
        name: containerImageAddress
        type: string
      - description: ContainerImageHash
        in: query
        name: containerImageHash
        type: string
      - description: ContainerPortBindings
        in: query
        name: containerPortBindings
        type: string
      - description: ContainerRestartPolicy
        in: query
        name: containerRestartPolicy
        type: string
      - description: ContainerProfileId
        in: query
        name: containerProfileId
        type: integer
      - description: ContainerEnv
        in: query
        name: containerEnv
        type: string
      - description: CreatedBeforeAt
        in: query
        name: createdBeforeAt
        type: string
      - description: CreatedAfterAt
        in: query
        name: createdAfterAt
        type: string
      - description: StartedBeforeAt
        in: query
        name: startedBeforeAt
        type: string
      - description: StartedAfterAt
        in: query
        name: startedAfterAt
        type: string
      - description: StoppedBeforeAt
        in: query
        name: stoppedBeforeAt
        type: string
      - description: StoppedAfterAt
        in: query
        name: stoppedAfterAt
        type: string
      - description: WithMetrics
        in: query
        name: withMetrics
        type: boolean
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadContainersResponse'
      security:
      - Bearer: []
      summary: ReadContainers
      tags:
      - container
    post:
      consumes:
      - application/json
      description: Create a new container.
      parameters:
      - description: Only accountId, hostname and imageAddress are required.<br />When
          specifying portBindings, only 'publicPort' OR 'serviceName' is required.<br
          />'launchScript' must be base64 encoded (if any).
        in: body
        name: createContainerDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateContainer'
      - description: ArchiveImageFile (For importing container image file, if any.)
        in: formData
        name: archiveImageFile
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: ContainerCreationScheduled
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateContainer
      tags:
      - container
    put:
      consumes:
      - application/json
      description: Update a container.
      parameters:
      - description: UpdateContainer (Only accountId and containerId are required.)
        in: body
        name: updateContainerDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateContainer'
      produces:
      - application/json
      responses:
        "200":
          description: ContainerUpdated
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateContainer
      tags:
      - container
  /v1/container/{accountId}/{containerId}/:
    delete:
      consumes:
      - application/json
      description: Delete a container.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      - description: ContainerId
        in: path
        name: containerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ContainerDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteContainer
      tags:
      - container
  /v1/container/image/:
    get:
      consumes:
      - application/json
      description: List container images.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.ContainerImage'
            type: array
      security:
      - Bearer: []
      summary: ReadContainerImages
      tags:
      - containerImage
  /v1/container/image/{accountId}/{imageId}/:
    delete:
      consumes:
      - application/json
      description: Delete a container image.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      - description: ImageId
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ContainerImageDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteContainerImage
      tags:
      - containerImage
  /v1/container/image/archive/:
    get:
      consumes:
      - application/json
      description: List container image archive files.
      parameters:
      - description: ImageId
        in: query
        name: imageId
        type: string
      - description: AccountId
        in: query
        name: accountId
        type: integer
      - description: CreatedBeforeAt
        in: query
        name: createdBeforeAt
        type: string
      - description: CreatedAfterAt
        in: query
        name: createdAfterAt
        type: string
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadContainerImageArchivesResponse'
      security:
      - Bearer: []
      summary: ReadContainerImageArchives
      tags:
      - containerImageArchive
    post:
      consumes:
      - application/json
      description: Export a container image to a file. This is an asynchronous operation.
      parameters:
      - description: CreateContainerImageArchiveDto
        in: body
        name: createContainerImageArchiveDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateContainerImageArchive'
      produces:
      - application/json
      responses:
        "201":
          description: ContainerImageArchiveCreationScheduled
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateContainerImageArchive
      tags:
      - containerImageArchive
  /v1/container/image/archive/{accountId}/{imageId}/:
    delete:
      consumes:
      - application/json
      description: Delete a container image archive file.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      - description: ImageId
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ContainerImageArchiveDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteContainerImageArchive
      tags:
      - containerImageArchive
    get:
      consumes:
      - application/json
      description: Download a container image archive file.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      - description: ImageId
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: ContainerImageArchive
          schema:
            type: file
      security:
      - Bearer: []
      summary: DownloadContainerImageArchive
      tags:
      - containerImageArchive
  /v1/container/image/archive/import/:
    post:
      consumes:
      - multipart/form-data
      description: Import container images from archive files.
      parameters:
      - description: AccountId
        in: formData
        name: accountId
        type: string
      - description: ArchiveFiles
        in: formData
        name: archiveFiles
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: ContainerImageArchivesImported
          schema:
            type: string
        "207":
          description: ContainerImageArchivesPartiallyImported
          schema:
            items:
              $ref: '#/definitions/apiController.FailedArchiveFileUpload'
            type: array
      security:
      - Bearer: []
      summary: ImportContainerImageArchives
      tags:
      - containerImageArchive
  /v1/container/image/snapshot/:
    post:
      consumes:
      - application/json
      description: Create a new container snapshot image. This is an asynchronous
        operation.
      parameters:
      - description: Container's owner account must have enough quota to store the
          snapshot image (and/or archive).<br />'shouldCreateArchive' and 'shouldDiscardImage'
          are optional and default to false if not provided.<br/>'shouldDiscardImage'
          is only effective when 'shouldCreateArchive' is true and it will delete
          the snapshot image after creating the archive file.<br /> 'archiveCompressionFormat'
          is optional and defaults to 'br' if not provided. Although it's possible
          to provide other values, it's recommended to use 'br' for best speed/compression
          ratio.
        in: body
        name: createContainerSnapshotImageDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateContainerSnapshotImage'
      produces:
      - application/json
      responses:
        "201":
          description: ContainerSnapshotImageCreationScheduled
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateContainerSnapshotImage
      tags:
      - containerImage
  /v1/container/metrics/:
    get:
      consumes:
      - application/json
      description: List containers.
      parameters:
      - description: ContainerId
        in: query
        name: containerId
        type: string
      - description: ContainerAccountId
        in: query
        name: containerAccountId
        type: integer
      - description: ContainerHostname
        in: query
        name: containerHostname
        type: string
      - description: ContainerStatus
        in: query
        name: containerStatus
        type: boolean
      - description: ContainerImageId
        in: query
        name: containerImageId
        type: string
      - description: ContainerImageAddress
        in: query
        name: containerImageAddress
        type: string
      - description: ContainerImageHash
        in: query
        name: containerImageHash
        type: string
      - description: ContainerPortBindings
        in: query
        name: containerPortBindings
        type: string
      - description: ContainerRestartPolicy
        in: query
        name: containerRestartPolicy
        type: string
      - description: ContainerProfileId
        in: query
        name: containerProfileId
        type: integer
      - description: ContainerEnv
        in: query
        name: containerEnv
        type: string
      - description: CreatedBeforeAt
        in: query
        name: createdBeforeAt
        type: string
      - description: CreatedAfterAt
        in: query
        name: createdAfterAt
        type: string
      - description: StartedBeforeAt
        in: query
        name: startedBeforeAt
        type: string
      - description: StartedAfterAt
        in: query
        name: startedAfterAt
        type: string
      - description: StoppedBeforeAt
        in: query
        name: stoppedBeforeAt
        type: string
      - description: StoppedAfterAt
        in: query
        name: stoppedAfterAt
        type: string
      - description: WithMetrics
        in: query
        name: withMetrics
        type: boolean
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadContainersResponse'
      security:
      - Bearer: []
      summary: ReadContainers
      tags:
      - container
  /v1/container/profile/:
    get:
      consumes:
      - application/json
      description: List container profiles.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.ContainerProfile'
            type: array
      security:
      - Bearer: []
      summary: ReadContainerProfiles
      tags:
      - containerProfile
    post:
      consumes:
      - application/json
      description: Create a new container profile.
      parameters:
      - description: Only 'name' and 'baseSpecs' are required. Human-readable fields
          ('cpuCores', 'memoryMebibytes' etc) will be converted to their technical
          counterpart ('millicores' etc) automatically.
        in: body
        name: createContainerProfileDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateContainerProfile'
      produces:
      - application/json
      responses:
        "201":
          description: ContainerProfileCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateNewContainerProfile
      tags:
      - containerProfile
    put:
      consumes:
      - application/json
      description: Update a container profile.
      parameters:
      - description: Only 'id' is required. Human-readable fields ('cpuCores', 'memoryMebibytes'
          etc) will be converted to their technical counterpart ('millicores' etc)
          automatically.
        in: body
        name: updateContainerProfileDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateContainerProfile'
      produces:
      - application/json
      responses:
        "200":
          description: ContainerProfileUpdated
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateContainerProfile
      tags:
      - containerProfile
  /v1/container/profile/{accountId}/{profileId}/:
    delete:
      consumes:
      - application/json
      description: Delete a container profile.
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      - description: ProfileId
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ContainerProfileDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteContainerProfile
      tags:
      - containerProfile
  /v1/container/registry/image/:
    get:
      consumes:
      - application/json
      description: Get container registry images.
      parameters:
      - description: ImageName
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.RegistryImage'
            type: array
      security:
      - Bearer: []
      summary: GetContainerRegistryImages
      tags:
      - containerRegistry
  /v1/container/registry/image/tagged/:
    get:
      consumes:
      - application/json
      description: Get container registry tagged image.
      parameters:
      - description: ImageAddress
        in: query
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.RegistryTaggedImage'
      security:
      - Bearer: []
      summary: GetContainerRegistryTaggedImage
      tags:
      - containerRegistry
  /v1/container/session/{accountId}/{containerId}/:
    get:
      consumes:
      - application/json
      description: Creates a session token for the specified container and redirects
        to Infinite OS dashboard (if shouldRedirect is not false).
      parameters:
      - description: AccountId
        in: path
        name: accountId
        required: true
        type: string
      - description: ContainerId
        in: path
        name: containerId
        required: true
        type: string
      - description: ShouldRedirect (default/empty is true)
        in: query
        name: shouldRedirect
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: If shouldRedirect is set to false, the updated session token
            is returned.
          schema:
            type: string
        "302":
          description: A redirect to Infinite OS dashboard (:1618/{containerId}/).
          schema:
            type: string
        "500":
          description: Container is not found, not running or isn't Infinite OS.
          schema:
            type: string
      security:
      - Bearer: []
      summary: CreateContainerSessionToken
      tags:
      - container
  /v1/mapping/:
    get:
      consumes:
      - application/json
      description: List mappings.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Mapping'
            type: array
      security:
      - Bearer: []
      summary: ReadMappings
      tags:
      - mapping
    post:
      consumes:
      - application/json
      description: Create a new mapping.
      parameters:
      - description: NewMapping
        in: body
        name: createMappingDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMapping'
      produces:
      - application/json
      responses:
        "201":
          description: MappingCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateNewMapping
      tags:
      - mapping
  /v1/mapping/{accountId}/{mappingId}/:
    delete:
      consumes:
      - application/json
      description: Delete a mapping.
      parameters:
      - description: MappingId
        in: path
        name: mappingId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: MappingDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteMapping
      tags:
      - mapping
  /v1/mapping/{accountId}/{mappingId}/target/{targetId}/:
    delete:
      consumes:
      - application/json
      description: Delete a mapping target.
      parameters:
      - description: MappingId
        in: path
        name: mappingId
        required: true
        type: string
      - description: TargetId
        in: path
        name: targetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: MappingTargetDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteMappingTarget
      tags:
      - mapping
  /v1/mapping/{mappingId}/:
    delete:
      consumes:
      - application/json
      description: Delete a mapping.
      parameters:
      - description: MappingId
        in: path
        name: mappingId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: MappingDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteMapping
      tags:
      - mapping
  /v1/mapping/{mappingId}/target/{targetId}/:
    delete:
      consumes:
      - application/json
      description: Delete a mapping target.
      parameters:
      - description: MappingId
        in: path
        name: mappingId
        required: true
        type: string
      - description: TargetId
        in: path
        name: targetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: MappingTargetDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteMappingTarget
      tags:
      - mapping
  /v1/mapping/target/:
    post:
      consumes:
      - application/json
      description: Create a new mapping target.
      parameters:
      - description: NewMappingTarget
        in: body
        name: createMappingTargetDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMappingTarget'
      produces:
      - application/json
      responses:
        "201":
          description: MappingTargetCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateMappingTarget
      tags:
      - mapping
  /v1/marketplace/:
    get:
      consumes:
      - application/json
      description: List marketplace items.
      parameters:
      - description: Slug
        in: query
        name: itemSlug
        type: string
      - description: Name
        in: query
        name: itemName
        type: string
      - description: Type
        in: query
        name: itemType
        type: string
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadMarketplaceItemsResponse'
      security:
      - Bearer: []
      summary: ReadMarketplaceItems
      tags:
      - marketplace
  /v1/o11y/overview/:
    get:
      consumes:
      - application/json
      description: Show system information and resource usage.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.O11yOverview'
      security:
      - Bearer: []
      summary: O11yOverview
      tags:
      - o11y
  /v1/scheduled-task/:
    get:
      consumes:
      - application/json
      description: List scheduled tasks.
      parameters:
      - description: TaskId
        in: query
        name: taskId
        type: string
      - description: TaskName
        in: query
        name: taskName
        type: string
      - description: TaskStatus
        in: query
        name: taskStatus
        type: string
      - description: TaskTags (semicolon separated)
        in: query
        name: taskTags
        type: string
      - description: StartedBeforeAt
        in: query
        name: startedBeforeAt
        type: string
      - description: StartedAfterAt
        in: query
        name: startedAfterAt
        type: string
      - description: FinishedBeforeAt
        in: query
        name: finishedBeforeAt
        type: string
      - description: FinishedAfterAt
        in: query
        name: finishedAfterAt
        type: string
      - description: CreatedBeforeAt
        in: query
        name: createdBeforeAt
        type: string
      - description: CreatedAfterAt
        in: query
        name: createdAfterAt
        type: string
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadScheduledTasksResponse'
      security:
      - Bearer: []
      summary: ReadScheduledTasks
      tags:
      - scheduled-task
    put:
      consumes:
      - application/json
      description: Reschedule a task or change its status.
      parameters:
      - description: UpdateScheduledTask (Only id is required.)
        in: body
        name: updateScheduledTaskDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateScheduledTask'
      produces:
      - application/json
      responses:
        "200":
          description: ScheduledTaskUpdated
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateScheduledTask
      tags:
      - scheduled-task
securityDefinitions:
  Bearer:
    description: Type "Bearer" + JWT token or API key.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
