package componentForm

script PasswordInputLocalState() {
	document.addEventListener('alpine:init', () => {
		Alpine.data('passwordInput', () => ({
			// Random Password Generator States
			isPasswordReadable: false,
			generateRandomPassword() {
				const passwordContent = Infinite.CreateRandomPassword();

				this.displayPasswordStrengthCriteria = false;
				this.updatePasswordStrengthPercentage(passwordContent);

				return passwordContent;
			},
			// Password Strength Criteria States
			displayPasswordStrengthCriteria: false,
			passwordStrengthPercentage: 0,
			passwordStrengthCriteria: {},
			resetPasswordStrengthParams() {
				this.passwordStrengthPercentage = 0;
				this.passwordStrengthCriteria = {
					isLongEnough: false,
					hasNumbers: false,
					hasUppercaseChars: false,
					hasLowercaseChars: false,
					hasSpecialChars: false,
				};
			},
			updatePasswordStrengthPercentage(password) {
				this.resetPasswordStrengthParams();

				let passwordStrengthPercentage = 0
				if (password.length >= 6 && password.length <= 64) {
					this.passwordStrengthCriteria.isLongEnough = true;
					passwordStrengthPercentage += 20;
				}

				if (/[1-9]/.test(password)) {
					this.passwordStrengthCriteria.hasNumbers = true;
					passwordStrengthPercentage += 20;
				}

				if (/[A-Z]/.test(password)) {
					this.passwordStrengthCriteria.hasUppercaseChars = true;
					passwordStrengthPercentage += 20;
				}

				if (/[a-z]/.test(password)) {
					this.passwordStrengthCriteria.hasLowercaseChars = true;
					passwordStrengthPercentage += 20;
				}

				if (/[!@#\$%\^\&*\)\(+=._-]/.test(password)) {
					this.passwordStrengthCriteria.hasSpecialChars = true;
					passwordStrengthPercentage += 20;
				}

				this.passwordStrengthPercentage = passwordStrengthPercentage;
			},
		}));
	});
}

templ togglePasswordReadabilityButton() {
	<div class="absolute right-2 top-1/2 -translate-y-1/2">
		<button
			type="button"
			class="mx-1 bg-inherit text-xl text-neutral-50"
			@click="isPasswordReadable = !isPasswordReadable"
		>
			<i class="ph-duotone ph-eye-slash" x-show="!isPasswordReadable"></i>
			<i class="ph-duotone ph-eye" x-show="isPasswordReadable"></i>
		</button>
	</div>
}

templ generateRandomPasswordButton(bindModelPath, onClick string) {
	<div class="group relative">
		<button
			type="button"
			@click={ bindModelPath + " = " + onClick }
			class="inline-flex items-center rounded-md border border-cyan-800 bg-cyan-950 px-3 py-2 lowercase hover:border-transparent hover:bg-cyan-800"
		>
			<i class="ph-bold ph-binary text-xl"></i>
		</button>
		<div class="invisible absolute bottom-full left-1/2 mb-2 w-max -translate-x-1/2 transform rounded-md bg-cyan-900 p-1.5 text-xs text-neutral-50 shadow-md transition-all duration-300 group-hover:visible group-hover:block group-hover:-translate-y-0.5">
			generate random password
		</div>
	</div>
}

templ passwordStrengthCriteria() {
	<!-- PasswordInputStrengthProgressBar -->
	<div class="bg-ez-200 h-1.5 rounded-full bg-opacity-70">
		<div x-bind:class="'bg-infinite-500 h-1.5 rounded-full w-' + passwordStrengthPercentage + '%'"></div>
	</div>
	<!-- PasswordInputStrengthCriteria -->
	<div class="w-full text-xs">
		<ul x-show="displayPasswordStrengthCriteria && passwordStrengthPercentage > 0">
			<li>
				<i
					x-bind:class="passwordStrengthCriteria.isLongEnough ? 'ph-bold ph-check text-green-500' : 'ph-bold ph-x text-red-500'"
				></i> Must be between 6 and 64 characters
			</li>
			<li>
				<i
					x-bind:class="passwordStrengthCriteria.hasNumbers ? 'ph-bold ph-check text-green-500' : 'ph-bold ph-x text-red-500'"
				></i> Must have at least 1 number
			</li>
			<li>
				<i
					x-bind:class="passwordStrengthCriteria.hasUppercaseChars ? 'ph-bold ph-check text-green-500' : 'ph-bold ph-x text-red-500'"
				></i> Must have at least 1 uppercase letter
			</li>
			<li>
				<i
					x-bind:class="passwordStrengthCriteria.hasLowercaseChars ? 'ph-bold ph-check text-green-500' : 'ph-bold ph-x text-red-500'"
				></i> Must have at least 1 lowercase letter
			</li>
			<li>
				<i
					x-bind:class="passwordStrengthCriteria.hasSpecialChars ? 'ph-bold ph-check text-green-500' : 'ph-bold ph-x text-red-500'"
				></i> Must have at least 1 special character
			</li>
		</ul>
	</div>
}

templ PasswordInput(
	name, label, bindModelPath string,
	showGenerateButton, showPasswordStrengthCriteria bool,
) {
	<!-- PasswordInput JavaScript -->
	@PasswordInputLocalState()
	<!-- PasswordInput HTML -->
	<div class="relative flex w-full flex-col gap-3" x-data="passwordInput">
		<div class="flex gap-2">
			<div class="relative w-full">
				<input
					@keyup.debounce.300ms="updatePasswordStrengthPercentage($event.target.value); displayPasswordStrengthCriteria = true"
					x-bind:type="isPasswordReadable ? 'text' : 'password'"
					name={ name }
					x-model:value={ bindModelPath }
					autocomplete="off"
					placeholder={ label }
					class="bg-ez-300 border-ez-200 hover:border-ez-100 autofill:bg-ez-300 focus:border-ez-50 peer relative h-10 w-full rounded-md border px-3 text-sm text-neutral-100 placeholder-transparent outline-none transition-all"
				/>
				@togglePasswordReadabilityButton()
				<label
					class="from-ez-300 via-ez-300 absolute -top-2 left-1.5 z-[1] cursor-text bg-gradient-to-t via-50% to-transparent to-50% px-1.5 text-xs font-bold text-neutral-50 text-opacity-80 transition-all before:absolute before:left-0 before:top-0 before:z-[-1] before:block before:h-full before:w-full before:bg-white before:transition-all peer-placeholder-shown:top-2.5 peer-placeholder-shown:text-sm peer-placeholder-shown:font-normal peer-autofill:-top-2 peer-hover:text-opacity-90 peer-focus:-top-2 peer-focus:cursor-default peer-focus:text-opacity-100"
				>
					{ label }
				</label>
			</div>
			if showGenerateButton {
				@generateRandomPasswordButton(bindModelPath, "generateRandomPassword()")
			}
		</div>
		if showPasswordStrengthCriteria {
			@passwordStrengthCriteria()
		}
	</div>
}
