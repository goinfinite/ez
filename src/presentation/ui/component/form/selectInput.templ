package componentForm

templ SelectInput(
	id, label, bindValuePath string, options []string, denseMode bool,
) {
	<!-- SelectInput -->
	<div class="relative w-full">
		<select
			id={ id }
			name={ id }
			x-model:value={ bindValuePath }
			placeholder={ label }
			if denseMode {
				class="bg-control-300 hover:border-control-100 border-control-200 autofill:bg-control-300 focus:border-control-50 h-7.5 peer relative w-full appearance-none rounded-md border px-1.5 text-[13px] leading-normal text-neutral-100 placeholder-transparent outline-none transition-all"
			} else {
				class="bg-control-300 hover:border-control-100 border-control-200 autofill:bg-control-300 focus:border-control-50 peer relative h-10 w-full appearance-none rounded-md border px-3 text-sm text-neutral-100 placeholder-transparent outline-none transition-all"
			}
		>
			<option class="bg-control-500 checked:bg-speedia-500 bg-opacity-90" value></option>
			for _, option := range options {
				<option class="bg-control-500 checked:bg-speedia-500 bg-opacity-90" value={ option }>{ option }</option>
			}
		</select>
		if label != "" {
			<label
				for={ id }
				class="from-control-300 via-control-300 absolute -top-2 left-1.5 z-[1] cursor-text bg-gradient-to-t via-55% to-transparent to-55% px-1.5 text-xs font-bold text-neutral-50 text-opacity-80 transition-all before:absolute before:left-0 before:top-0 before:z-[-1] before:block before:h-full before:w-full before:bg-white before:transition-all peer-placeholder-shown:top-2.5 peer-placeholder-shown:text-sm peer-placeholder-shown:font-normal peer-autofill:-top-2 peer-hover:text-opacity-90 peer-focus:-top-2 peer-focus:cursor-default peer-focus:text-opacity-100"
			>
				{ label }
			</label>
		}
		<i class="ph-bold ph-caret-down pointer-events-none absolute right-2.5 top-3.5 text-sm"></i>
	</div>
}

type SelectLabelValuePair struct {
	Label string
	Value string
}

templ SelectInputWithLabelValuePair(
	id, label, bindValuePath string,
	options []SelectLabelValuePair,
	denseMode bool,
) {
	<!-- SelectInputWithLabelValuePair -->
	<div class="relative w-full">
		<select
			id={ id }
			name={ id }
			if bindValuePath != "" {
				x-model:value={ bindValuePath }
			}
			placeholder={ label }
			if denseMode {
				class="bg-control-300 hover:border-control-100 border-control-200 autofill:bg-control-300 focus:border-control-50 h-7.5 peer relative w-full appearance-none rounded-md border px-1.5 text-[13px] leading-normal text-neutral-100 placeholder-transparent outline-none transition-all"
			} else {
				class="bg-control-300 hover:border-control-100 border-control-200 autofill:bg-control-300 focus:border-control-50 peer relative h-10 w-full appearance-none rounded-md border px-3 text-sm text-neutral-100 placeholder-transparent outline-none transition-all"
			}
		>
			<option class="bg-control-500 checked:bg-speedia-500 bg-opacity-90">--</option>
			for _, option := range options {
				<option
					class="bg-control-500 checked:bg-speedia-500 bg-opacity-90"
					value={ option.Value }
				>
					{ option.Label }
				</option>
			}
		</select>
		if label != "" {
			<label
				for={ id }
				class="from-control-300 via-control-300 absolute -top-2 left-1.5 z-[1] cursor-text bg-gradient-to-t via-55% to-transparent to-55% px-1.5 text-xs font-bold text-neutral-50 text-opacity-80 transition-all before:absolute before:left-0 before:top-0 before:z-[-1] before:block before:h-full before:w-full before:bg-white before:transition-all peer-placeholder-shown:top-2.5 peer-placeholder-shown:text-sm peer-placeholder-shown:font-normal peer-autofill:-top-2 peer-hover:text-opacity-90 peer-focus:-top-2 peer-focus:cursor-default peer-focus:text-opacity-100"
			>
				{ label }
			</label>
		}
		<i class="ph-bold ph-caret-down pointer-events-none absolute right-2.5 top-3.5 text-sm"></i>
	</div>
}

script SearchableSelectInputLocalState(id string) {
	document.addEventListener('alpine:init', () => {
		Alpine.data('searchableSelect', () => ({
			searchableItems: JSON.parse(
				document.getElementById(id + 'SearchableItems').textContent
			),
			showDropdown: false,
			userInput: '',
			selectedItemLabel: null,
			selectedItemValue: null,
			resetState() {
				this.userInput = '';
				this.selectedItemLabel = null;
				this.selectedItemValue = null;
				closeDropdown();
			},
			openDropdown() { 
				this.showDropdown = true; 
			},
			closeDropdown() {
				this.showDropdown = false;
			},
			setSelectedItem(itemIndex) {
				this.selectedItemLabel = this.filteredItems[itemIndex].Label;
				this.selectedItemValue = this.filteredItems[itemIndex].Value;
				this.userInput = this.selectedItemLabel;
				this.showDropdown = false;
			},
			get filteredItems() {
				return this.searchableItems.filter((item) => {
					if (this.userInput === '') {
						return true;
					}

					if (item.SearchableText === null) {
						return item.Label.includes(this.userInput);
					}
					
					return item.SearchableText.includes(this.userInput);
				});
			},
		}));
	});
}

type SearchableSelectItem struct {
	Label          string
	Value          string
	HtmlLabel      *string
	SearchableText *string
}

templ SearchableSelectInput(
	id, label, bindValuePath string,
	searchableItems []SearchableSelectItem,
) {
	<!-- SearchableSelectInput JavaScript -->
	@templ.JSONScript(id+"SearchableItems", searchableItems)
	@SearchableSelectInputLocalState(id)
	<!-- SearchableSelectInput HTML -->
	<div
		x-data="searchableSelect"
		class="relative flex flex-col items-center"
	>
		<div
			@click.away="closeDropdown()"
			class="bg-control-300 hover:border-control-100 border-control-200 autofill:bg-control-300 focus:border-control-50 relative flex h-10 w-full appearance-none rounded-md border px-3 text-sm text-neutral-100 outline-none transition-all"
		>
			<input
				id={ id }
				placeholder={ label }
				x-model="userInput"
				@mousedown="openDropdown()"
				class="peer w-full appearance-none bg-transparent placeholder-transparent outline-none"
			/>
			if label != "" {
				<label
					for={ id }
					class="from-control-300 via-control-300 absolute -top-2 left-1.5 z-[1] cursor-text bg-gradient-to-t via-55% to-transparent to-55% px-1.5 text-xs font-bold text-neutral-50 text-opacity-80 transition-all before:absolute before:left-0 before:top-0 before:z-[-1] before:block before:h-full before:w-full before:bg-white before:transition-all peer-placeholder-shown:top-2.5 peer-placeholder-shown:text-sm peer-placeholder-shown:font-normal peer-autofill:-top-2 peer-hover:text-opacity-90 peer-focus:-top-2 peer-focus:cursor-default peer-focus:text-opacity-100"
				>
					{ label }
				</label>
			}
			<i
				x-show="userInput !== ''"
				@click.prevent="resetState()"
				class="ph-bold ph-x-circle right-7.5 absolute top-2.5 cursor-pointer text-xl"
			></i>
			<i class="ph-bold ph-caret-down pointer-events-none absolute right-2.5 top-3.5 text-sm"></i>
		</div>
		<div
			x-show="showDropdown"
			class="max-h-select bg-control-700 absolute top-10 z-40 w-full overflow-y-auto rounded-md"
		>
			<div class="flex w-full flex-col">
				<template x-for="(searchableItem, itemIndex) in filteredItems">
					<div
						class="hover:bg-control-300 cursor-pointer p-2"
						@click={ "setSelectedItem(itemIndex); " + bindValuePath + " = searchableItem.Value" }
					>
						<span x-show="searchableItem.HtmlLabel" x-html="searchableItem.HtmlLabel"></span>
						<span x-show="!searchableItem.HtmlLabel" x-text="searchableItem.Label"></span>
					</div>
				</template>
			</div>
		</div>
	</div>
}
