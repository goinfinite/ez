package componentStructural

const (
	IconButtonSizeXs        = "xs"
	IconButtonSizeSm        = "sm"
	IconButtonSizeMd        = "md"
	IconButtonSizeLg        = "lg"
	IconButtonSizeXl        = "xl"
	IconButtonShapeCircular = "circular"
	IconButtonShapeSquare   = "square"
)

type IconButtonSettings struct {
	Id                   string
	Label                string
	Icon                 string
	BackgroundColor      string
	HoverBackgroundColor string
	TextColor            string
	HoverTextColor       string
	Shape                string
	Size                 string
	OnClick              string
	TooltipText          string
	TooltipColor         string
	TooltipPosition      string
	IsFullWidth          bool
	IsSubmit             bool
}

templ IconButton(inputSettings IconButtonSettings) {
	<!-- IconButton -->
	{{ buttonWidth := "" }}
	if inputSettings.IsFullWidth {
		{{ buttonWidth = " w-full" }}
	}
	<div class={ "group relative" + buttonWidth }>
		{{ backgroundColor := "bg-infinite-500" }}
		if inputSettings.BackgroundColor != "" {
			{{ backgroundColor = "bg-" + inputSettings.BackgroundColor }}
		}
		{{ backgroundHoverColor := "hover:bg-infinite-300" }}
		if inputSettings.HoverBackgroundColor != "" {
			{{ backgroundHoverColor = "hover:bg-" + inputSettings.HoverBackgroundColor }}
		}
		{{ textColor := "text-neutral-50" }}
		{{ radiusRoundness := "rounded-md" }}
		if inputSettings.Shape == IconButtonShapeCircular {
			{{ radiusRoundness = "rounded-full" }}
		}
		{{ backgroundSize := "p-2 text-base gap-1" }}
		switch inputSettings.Size {
			case IconButtonSizeXs:
				{{ backgroundSize = "p-1 text-sm gap-1" }}
			case IconButtonSizeSm:
				{{ backgroundSize = "p-1.5 text-base gap-1.5" }}
			case IconButtonSizeMd:
				{{ backgroundSize = "p-2 text-lg gap-2" }}
			case IconButtonSizeLg:
				{{ backgroundSize = "p-2.5 text-xl gap-2.5" }}
			case IconButtonSizeXl:
				{{ backgroundSize = "p-3 text-2xl gap-3" }}
		}
		{{ iconSize := "text-xl" }}
		switch inputSettings.Size {
			case IconButtonSizeXs:
				{{ iconSize = "text-xs" }}
			case IconButtonSizeSm:
				{{ iconSize = "text-sm" }}
			case IconButtonSizeMd:
				{{ iconSize = "text-base" }}
			case IconButtonSizeLg:
				{{ iconSize = "text-lg" }}
			case IconButtonSizeXl:
				{{ iconSize = "text-xl" }}
		}
		<button
			if inputSettings.Id != "" {
				id={ inputSettings.Id }
			}
			if inputSettings.IsSubmit {
				type="submit"
			}
			if inputSettings.OnClick != "" {
				@click={ inputSettings.OnClick }
			}
			class={ backgroundSize + " " + backgroundColor + " " + backgroundHoverColor + " " + textColor + " " + radiusRoundness + " justify-center w-full border-none text-center font-bold lowercase flex flex-row items-center leading-none" }
		>
			if inputSettings.Icon != "" {
				<i class={ "ph-duotone " + inputSettings.Icon + " " + iconSize }></i>
			}
			if inputSettings.Label != "" {
				{ inputSettings.Label }
			}
		</button>
		if inputSettings.TooltipText != "" {
			{{ tooltipBaseClass := "absolute hidden transition-all duration-300 group-hover:flex transform w-fit p-1.5 bg-" + inputSettings.TooltipColor + " text-neutral-100 text-xs rounded-md shadow-lg" }}
			switch inputSettings.TooltipPosition {
				case "top":
					<div class={ tooltipBaseClass + " bottom-full mb-1.5 group-hover:-translate-y-0.5 left-1/2 -translate-x-1/2" }>
						{ inputSettings.TooltipText }
					</div>
				case "bottom":
					<div class={ tooltipBaseClass + " top-full mt-1.5 group-hover:translate-y-0.5 left-1/2 -translate-x-1/2" }>
						{ inputSettings.TooltipText }
					</div>
				case "left":
					<div class={ tooltipBaseClass + " right-full mr-1.5 group-hover:translate-x-0.5 top-1/2 -translate-y-1/2" }>
						{ inputSettings.TooltipText }
					</div>
				case "right":
					<div class={ tooltipBaseClass + " left-full ml-1.5 group-hover:-translate-x-0.5 top-1/2 -translate-y-1/2" }>
						{ inputSettings.TooltipText }
					</div>
			}
		}
	</div>
}
