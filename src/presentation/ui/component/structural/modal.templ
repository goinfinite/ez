package componentStructural

templ RegularModal(
	title, isOpenState, closeModalFunction, elementIdStatePath string,
) {
	<!-- RegularModal HTML -->
	<div
		x-show={ isOpenState }
		x-transition:enter="transition ease-out duration-500"
		x-transition:enter-start="opacity-0"
		x-transition:enter-end="opacity-100"
		x-transition:leave="transition ease-in duration-150"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0"
		class="fixed left-0 top-0 z-50 mx-auto h-screen max-h-screen w-full overflow-y-auto overflow-x-hidden bg-neutral-950 bg-opacity-50"
	>
		<div class="bg-ez-400 max-w-3/5 relative mx-auto mt-20 rounded-md p-6 drop-shadow-xl xl:mt-24 xl:max-w-3xl">
			<div class="mb-4 flex justify-between align-middle">
				<h2 class="text-2xl">
					{ title }
					if elementIdStatePath != "" {
						<strong>#<span x-text={ elementIdStatePath }></span></strong>
					}
				</h2>
				<div class="inline-flex space-x-5">
					<button
						@click={ closeModalFunction }
						class="opacity-85 bg-transparent hover:opacity-100 active:opacity-100"
					>
						<i class="ph-bold ph-x-square align-middle text-3xl"></i>
					</button>
				</div>
			</div>
			{ children... }
		</div>
	</div>
}

templ DeleteModal(
	isOpenState, closeFunction, deleteFunction, deleteIdTag string,
	elNameStatePath, elIdStatePath string,
) {
	<!-- DeleteModal HTML -->
	<div
		x-show={ isOpenState }
		x-transition:enter="transition ease-out duration-500"
		x-transition:enter-start="opacity-0"
		x-transition:enter-end="opacity-100"
		x-transition:leave="transition ease-in duration-150"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0"
		class="fixed left-0 top-0 z-50 mx-auto h-screen max-h-screen w-full overflow-y-auto overflow-x-hidden bg-neutral-950 bg-opacity-50"
	>
		<div class="relative mx-auto mt-20 max-w-2xl rounded-md bg-red-950 p-8 drop-shadow-xl xl:mt-24">
			<button
				@click={ closeFunction }
				class="opacity-85 float-right bg-transparent hover:opacity-100 active:opacity-100"
			>
				<i class="ph-bold ph-x-square align-middle text-3xl"></i>
			</button>
			<div class="h-18 w-18 mx-auto my-4 flex items-center justify-center rounded-full bg-neutral-300 text-center text-5xl">
				<i class="ph-duotone ph-warning text-red-950"></i>
			</div>
			<h3 class="text-pretty my-3 px-2 text-center text-xl font-bold leading-relaxed after:content-['?']">
				Are you sure you want to delete
				if elNameStatePath != "" {
					<strong
						x-show={ elNameStatePath + " !== ''" }
						x-text={ elNameStatePath }
						class="rounded-md border-2 border-dashed border-red-900 px-2 py-1"
					></strong>
				}
				if elIdStatePath != "" {
					<span x-show={ elIdStatePath + " !== ''" } class="font-bold before:content-['#']" x-text={ elIdStatePath }></span>
				}
			</h3>
			<p class="mb-6 text-center">
				This process cannot be undone. This will permanently delete the element.
			</p>
			<div class="grid grid-cols-2 gap-4">
				@IconButton(IconButtonSettings{
					Label:                "No, Keep it.",
					BackgroundColor:      "neutral-300",
					HoverBackgroundColor: "neutral-400",
					TextColor:            "neutral-950",
					HoverTextColor:       "neutral-950",
					OnClick:              closeFunction,
					Size:                 IconButtonSizeMd,
					IsFullWidth:          true,
				})
				{{ deleteButtonId := "" }}
				if deleteIdTag != "" {
					{{ deleteButtonId = deleteIdTag }}
				}
				@IconButton(IconButtonSettings{
					Id:                   deleteButtonId,
					Label:                "Yes, Delete!",
					Icon:                 "ph-trash",
					BackgroundColor:      "red-800",
					HoverBackgroundColor: "red-900",
					TextColor:            "white",
					OnClick:              deleteFunction,
					Size:                 IconButtonSizeMd,
					IsFullWidth:          true,
				})
			</div>
		</div>
	</div>
}

const (
	ConfirmationDescriptionDelete = "This process cannot be undone. This will permanently delete the element."

	ConfirmationTypeInfo    = "info"
	ConfirmationTypeWarning = "warning"
	ConfirmationTypeDanger  = "danger"
)

type ConfirmationModalSettings struct {
	Title            string
	TitleIcon        string
	Description      string
	ConfirmationType string
	IsOpenState      string
	ConfirmFunction  string
}

templ ConfirmationModal(inputSettings ConfirmationModalSettings) {
	<!-- ConfirmationModal HTML -->
	<div
		x-show={ inputSettings.IsOpenState }
		x-transition:enter="transition ease-out duration-500"
		x-transition:enter-start="opacity-0"
		x-transition:enter-end="opacity-100"
		x-transition:leave="transition ease-in duration-150"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0"
		class="fixed left-0 top-0 z-50 mx-auto h-screen max-h-screen w-full overflow-y-auto overflow-x-hidden bg-neutral-950 bg-opacity-50"
	>
		<div class="relative mx-auto mt-[5%] max-w-2xl rounded-md drop-shadow-xl">
			{{ modalContentClasses := "flex flex-col rounded-md p-8 gap-5" }}
			switch inputSettings.ConfirmationType {
				case ConfirmationTypeInfo:
					{{ modalContentClasses += " bg-cyan-900" }}
				case ConfirmationTypeWarning:
					{{ modalContentClasses += " bg-yellow-900" }}
				case ConfirmationTypeDanger:
					{{ modalContentClasses += " bg-red-900" }}
				default:
					{{ modalContentClasses += " bg-zinc-900" }}
			}
			<div class={ modalContentClasses }>
				<i
					@click={ inputSettings.IsOpenState + " = false" }
					class="ph-bold ph-x-square opacity-85 right-7.5 top-7.5 absolute cursor-pointer text-3xl hover:opacity-100 active:opacity-100"
				></i>
				<h3 class="flex flex-row items-center justify-center gap-2 leading-relaxed">
					<i class={ "ph-duotone " + inputSettings.TitleIcon + " text-4xl text-neutral-100" }></i>
					<span class="text-2xl font-bold">
						@templ.Raw(inputSettings.Title)
					</span>
				</h3>
				<p class="text-center">
					@templ.Raw(inputSettings.Description)
				</p>
				<div class="grid grid-cols-2 gap-4">
					@IconButton(IconButtonSettings{
						Label:                "no, do not proceed.",
						BackgroundColor:      "neutral-300/90",
						HoverBackgroundColor: "neutral-200",
						TextColor:            "neutral-950",
						HoverTextColor:       "neutral-950",
						OnClick:              inputSettings.IsOpenState + " = false",
						Size:                 IconButtonSizeMd,
						IsFullWidth:          true,
					})
					@IconButton(IconButtonSettings{
						Label:                "yes, proceed!",
						BackgroundColor:      "neutral-950/40",
						HoverBackgroundColor: "neutral-950/60",
						TextColor:            "white",
						OnClick:              inputSettings.ConfirmFunction,
						Size:                 IconButtonSizeMd,
						IsFullWidth:          true,
					})
				</div>
			</div>
		</div>
	</div>
}
