package componentStructural

templ RegularModal(
	title, isOpenState, closeModalFunction, elementIdStatePath string,
) {
	<!-- RegularModal HTML -->
	<template x-if={ isOpenState }>
		<div
			x-transition:enter="transition ease-out duration-500"
			x-transition:enter-start="opacity-0"
			x-transition:enter-end="opacity-100"
			x-transition:leave="transition ease-in duration-150"
			x-transition:leave-start="opacity-100"
			x-transition:leave-end="opacity-0"
			class="fixed left-0 top-0 z-50 mx-auto h-screen max-h-screen w-full overflow-y-auto overflow-x-hidden bg-neutral-950 bg-opacity-50"
		>
			<div class="bg-ez-400 max-w-3/5 relative mx-auto mt-20 rounded-md p-6 drop-shadow-xl xl:mt-24 xl:max-w-3xl">
				<div class="mb-4 flex justify-between align-middle">
					<h2 class="text-2xl">
						{ title }
						if elementIdStatePath != "" {
							<strong>#<span x-text={ elementIdStatePath }></span></strong>
						}
					</h2>
					<div class="inline-flex space-x-5">
						<button
							@click={ closeModalFunction }
							class="opacity-85 bg-transparent hover:opacity-100 active:opacity-100"
						>
							<i class="ph-bold ph-x-square align-middle text-3xl"></i>
						</button>
					</div>
				</div>
				{ children... }
			</div>
		</div>
	</template>
}

templ DeleteModal(
	isOpenState, closeFunction, deleteFunction, deleteIdTag string,
	elNameStatePath, elIdStatePath string,
) {
	<!-- DeleteModal HTML -->
	<template x-if={ isOpenState }>
		<div
			x-transition:enter="transition ease-out duration-500"
			x-transition:enter-start="opacity-0"
			x-transition:enter-end="opacity-100"
			x-transition:leave="transition ease-in duration-150"
			x-transition:leave-start="opacity-100"
			x-transition:leave-end="opacity-0"
			class="fixed left-0 top-0 z-50 mx-auto h-screen max-h-screen w-full overflow-y-auto overflow-x-hidden bg-neutral-950 bg-opacity-50"
		>
			<div class="relative mx-auto mt-20 max-w-2xl rounded-md bg-red-950 p-8 drop-shadow-xl xl:mt-24">
				<button
					@click={ closeFunction }
					class="opacity-85 float-right bg-transparent hover:opacity-100 active:opacity-100"
				>
					<i class="ph-bold ph-x-square align-middle text-3xl"></i>
				</button>
				<div class="h-18 w-18 mx-auto my-4 flex items-center justify-center rounded-full bg-neutral-300 text-center text-5xl">
					<i class="ph-duotone ph-warning text-red-950"></i>
				</div>
				<h3 class="text-pretty my-3 px-2 text-center text-xl font-bold leading-relaxed">
					Are you sure you want to delete
					if elNameStatePath != "" {
						<strong
							x-show={ elNameStatePath + " !== ''" }
							x-text={ elNameStatePath }
							class="rounded-md border-2 border-dashed border-red-900 px-2 py-1"
						></strong>
					}
					if elIdStatePath != "" {
						<span x-show={ elIdStatePath + " !== ''" }>
							#<strong x-text={ elIdStatePath }></strong>
						</span>
					}
					?
				</h3>
				<p class="mb-6 text-center">
					This process cannot be undone. This will permanently delete the element.
				</p>
				<div class="flex flex-row space-x-4">
					<button
						@click={ closeFunction }
						class="w-full rounded-md border-none bg-neutral-300 p-3 text-center text-base lowercase leading-none text-neutral-950 hover:bg-neutral-400"
					>
						No, Keep it.
					</button>
					<button
						if deleteIdTag != "" {
							id={ deleteIdTag }
						} else {
							id="delete-element"
						}
						type="submit"
						@click={ deleteFunction }
						class="w-full rounded-md border-none bg-red-800 p-3 text-center text-base font-bold lowercase leading-none text-white hover:bg-red-900"
					>
						<i class={ "ph-duotone ph-trash mr-1 align-middle text-xl" }></i>Yes, Delete!
					</button>
				</div>
			</div>
		</div>
	</template>
}

const (
	ConfirmationTypeInfo     = "info"
	ConfirmationTypeWarning  = "warning"
	ConfirmationTypeDanger   = "danger"
	ConfirmationTypeCritical = "critical"
)

templ ConfirmationModal(
	title, titleIcon, description, isOpenState, confirmFunction, confirmationType string,
) {
	<!-- ConfirmationModal HTML -->
	<template x-if={ isOpenState }>
		<div
			x-transition:enter="transition ease-out duration-500"
			x-transition:enter-start="opacity-0"
			x-transition:enter-end="opacity-100"
			x-transition:leave="transition ease-in duration-150"
			x-transition:leave-start="opacity-100"
			x-transition:leave-end="opacity-0"
			class="fixed left-0 top-0 z-50 mx-auto h-screen max-h-screen w-full overflow-y-auto overflow-x-hidden bg-neutral-950 bg-opacity-50"
		>
			<div class="relative mx-auto mt-[5%] max-w-2xl rounded-md drop-shadow-xl">
				<div
					if confirmationType == ConfirmationTypeInfo {
						class="flex flex-col rounded-md bg-sky-900 p-8"
					} else {
						class="flex flex-col rounded-md bg-yellow-900 p-8"
					}
				>
					<i
						@click={ isOpenState + " = false" }
						class="ph-bold ph-x-square opacity-85 right-7.5 top-7.5 absolute cursor-pointer text-3xl hover:opacity-100 active:opacity-100"
					></i>
					<h3 class="my-3 flex flex-row items-center justify-center gap-2 leading-relaxed">
						<i class={ "ph-duotone " + titleIcon + " text-4xl text-neutral-100" }></i>
						<span class="text-2xl font-bold">
							@templ.Raw(title)
						</span>
					</h3>
					<p class="mb-6 text-center">
						@templ.Raw(description)
					</p>
					<div class="flex flex-row gap-4">
						<button
							@click={ isOpenState + " = false" }
							class="w-full rounded-md bg-transparent p-3 text-center text-base lowercase leading-none text-neutral-50 ring-1 ring-neutral-50 transition-all hover:bg-neutral-50 hover:text-neutral-950"
						>
							No, do not proceed.
						</button>
						<button
							type="submit"
							@click={ confirmFunction }
							class="w-full rounded-md border-none bg-neutral-950 bg-opacity-50 p-3 text-center text-base font-bold lowercase leading-none text-neutral-50 transition-all hover:bg-opacity-75"
						>
							Yes, Proceed!
						</button>
					</div>
				</div>
			</div>
		</div>
	</template>
}
