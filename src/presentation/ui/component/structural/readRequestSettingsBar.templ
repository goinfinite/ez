package componentStructural

import "github.com/goinfinite/ez/src/domain/dto"
import "github.com/goinfinite/ez/src/presentation/ui/component/form"
import "github.com/goinfinite/ez/src/domain/valueObject"
import "github.com/goinfinite/ez/src/presentation/ui/envs"

templ ReadRequestSettingsBar(
	entityName, uiEndpoint, recordsDisplayElementId string,
	readRequestDto interface{},
	responsePaginationDto dto.Pagination,
	entityStruct interface{},
) {
	@templ.JSONScript(entityName+"ReadRequestDto", readRequestDto)
	@templ.JSONScript(entityName+"PaginationDto", responsePaginationDto)
	@templ.JSONScript(entityName+"Struct", entityStruct)
	<script type="text/javascript" src={ uiEnvs.LocalStateAssetsPath + "/component/structural/readRequestSettingsBar.js" }></script>
	@templ.JSFuncCall(
		"InitReadRequestSettingsLocalState", entityName, uiEndpoint, recordsDisplayElementId,
	)
	<div
		class="flex flex-row items-center justify-between"
		x-data={ entityName + "ReadRequestSettings" }
	>
		<!-- RecordFilters -->
		<div class="flex flex-row items-center justify-start gap-1.5">
			<div class="flex basis-3/4 flex-row flex-wrap items-center gap-2">
				<template x-for={ "(filterKey, filterIndex) in Object.keys(filters)" }>
					<!-- FilterField -->
					<div
						class="bg-ez-400 flex flex-row items-center gap-1.5 rounded-xl p-2"
						x-data="{selectedFilterKey: filterKey}"
						x-show={ "filters[filterKey] !== ''" }
					>
						<div class="relative w-full">
							<select
								:id={ "'" + entityName + "FilterKey-' + selectedFilterKey" }
								x-model="selectedFilterKey"
								x-init={ "$watch('selectedFilterKey', (newFilterKey, oldFilterKey) => { if (newFilterKey !== oldFilterKey) { filters[oldFilterKey] = '';filters[newFilterKey] = ' '} })" }
								placeholder="filter"
								class="bg-ez-300 hover:border-ez-100 border-ez-200 autofill:bg-ez-300 focus:border-ez-50 h-7.5 peer relative w-full appearance-none rounded-md border px-1.5 text-[13px] leading-normal text-neutral-100 placeholder-transparent outline-none transition-all"
							>
								<template x-for={ "remainingFilterKey in Object.keys(filters)" }>
									<option
										class="bg-ez-500 checked:bg-infinite-500 bg-opacity-90"
										:value="remainingFilterKey"
										x-text="remainingFilterKey"
										:selected={ "remainingFilterKey === selectedFilterKey" }
									></option>
								</template>
							</select>
							<label
								:for={ "'" + entityName + "FilterKey-' + selectedFilterKey" }
								class="from-ez-300 via-ez-300 absolute -top-2 left-1.5 z-[1] cursor-text bg-gradient-to-t via-55% to-transparent to-55% px-1.5 text-xs font-bold text-neutral-50 text-opacity-80 transition-all before:absolute before:left-0 before:top-0 before:z-[-1] before:block before:h-full before:w-full before:bg-white before:transition-all peer-placeholder-shown:top-2.5 peer-placeholder-shown:text-sm peer-placeholder-shown:font-normal peer-autofill:-top-2 peer-hover:text-opacity-90 peer-focus:-top-2 peer-focus:cursor-default peer-focus:text-opacity-100"
							>
								filter
							</label>
							<i class="ph-bold ph-caret-down pointer-events-none absolute right-2 top-3 text-xs"></i>
						</div>
						<div class="flex w-full flex-row items-center gap-1.5">
							<input
								:id={ "'" + entityName + "FilterValue-' + selectedFilterKey" }
								type="text"
								x-model:value={ "filters[selectedFilterKey]" }
								class="bg-ez-300 border-ez-200 hover:border-ez-100 autofill:bg-ez-300 focus:border-ez-50 h-7.5 min-w-38 peer relative w-full rounded-md border px-1.5 text-[13px] text-neutral-100 placeholder-transparent outline-none transition-all"
							/>
							<button
								type="button"
								class="bg-ez-500 hover:bg-ez-300 flex h-6 items-center rounded-lg p-1.5 leading-none"
								@click={ "filters[selectedFilterKey] = ''" }
							>
								<i class="ph-bold ph-x text-[10px]"></i>
							</button>
						</div>
					</div>
				</template>
			</div>
			<button
				type="button"
				class="bg-ez-400 hover:bg-ez-300 h-6.5 flex items-center rounded-lg p-1.5 leading-none"
				x-show={ "!Object.values(filters).every((value) => value !== '')" }
				@click={ "Object.keys(filters).some((filterKey) => { if (filters[filterKey] === '') { filters[filterKey] = ' '; return true; } })" }
			>
				<i class="ph-bold ph-plus text-xs" x-show={ "Object.values(filters).some((value) => value !== '')" }></i>
				<i class="ph-bold ph-funnel text-xs" x-show={ "Object.values(filters).every((value) => value === '')" }></i>
			</button>
			<button
				type="button"
				class="flex h-7 flex-row items-center rounded-md bg-cyan-900 px-2 text-sm leading-none hover:bg-cyan-700"
				@click={ "reloadRecordsDisplay()" }
				x-show={ "Object.values(filters).some((value) => value !== '')" }
			>
				<i class="ph-duotone ph-funnel text-md mr-1 align-middle"></i>
				apply
			</button>
			<button
				type="button"
				class="flex h-7 flex-row items-center rounded-md bg-yellow-900 px-2 text-sm leading-none hover:bg-yellow-700"
				@click={ "Object.keys(filters).forEach((filterKey) => { filters[filterKey] = '' }); reloadRecordsDisplay()" }
				x-show={ "Object.values(filters).some((value) => value !== '')" }
			>
				<i class="ph-duotone ph-broom text-md mr-1 align-middle"></i>
				clear all
			</button>
		</div>
		<div class="flex basis-1/4 flex-row items-center justify-evenly gap-1.5">
			@Pagination(
				entityName, responsePaginationDto, "pagination.pageNumber", "pagination.itemsPerPage",
			)
			<!-- SortBy -->
			<div class="w-26">
				@componentForm.SelectInputClientSideOptions(
					componentForm.SelectInputClientSideOptionsDto{
						Id:                    entityName + "SortBy",
						Label:                 "sort by",
						SelectedModelBindPath: "pagination.sortBy",
						OptionsModelBindPath:  "entityFieldKeys",
						DenseMode:             true,
					},
				)
			</div>
			<!-- SortDirection -->
			if responsePaginationDto.SortDirection != nil {
				switch *responsePaginationDto.SortDirection {
					case valueObject.PaginationSortDirectionAsc:
						@IconButton(IconButtonSettings{
							Id:                   entityName + "SortDirection",
							Shape:                IconButtonShapeSquare,
							Size:                 "md",
							Icon:                 "ph-sort-ascending",
							BackgroundColor:      "ez-400",
							HoverBackgroundColor: "ez-200",
							OnClick:              "pagination.sortDirection = 'desc'",
							TooltipText:          "sort descending",
							TooltipColor:         "ez-500",
							TooltipPosition:      "top",
						})
					case valueObject.PaginationSortDirectionDesc:
						@IconButton(IconButtonSettings{
							Id:                   entityName + "SortDirection",
							Shape:                IconButtonShapeSquare,
							Size:                 "md",
							Icon:                 "ph-sort-descending",
							BackgroundColor:      "ez-400",
							HoverBackgroundColor: "ez-200",
							OnClick:              "pagination.sortDirection = 'asc'",
							TooltipText:          "sort ascending",
							TooltipColor:         "ez-500",
							TooltipPosition:      "top",
						})
				}
			}
		</div>
	</div>
}
