package layout

import (
	"fmt"
	"github.com/speedianet/control/src/domain/entity"
	"github.com/speedianet/control/src/domain/valueObject"
	componentMisc "github.com/speedianet/control/src/presentation/ui/component/misc"
)

templ FooterSkeleton() {
	<footer
		id="footer"
		hx-get="/fragment/footer"
		hx-trigger="load delay:500ms"
		hx-target="this"
		hx-swap="outerHTML transition:true"
		class="bg-control-800 border-control-400 h-8.5 fixed bottom-0 flex w-full items-center justify-end border-t-2 px-3 text-sm transition-all duration-300 ease-in-out"
	>
		<div class="flex items-center space-x-3">
			for i := 0; i < 3; i++ {
				<div class="bg-control-200 w-27 h-6 animate-pulse rounded-md"></div>
			}
		</div>
	</footer>
}

func scheduledTaskStatusToIcon(taskStatus valueObject.ScheduledTaskStatus) string {
	switch taskStatus.String() {
	case "pending":
		return "ph-clock text-neutral-50"
	case "running":
		return "ph-cooking-pot text-amber-500 animate-duration-[2s] animate-pulse"
	case "completed":
		return "ph-check-circle text-emerald-500"
	case "failed":
		return "ph-x-circle text-red-600"
	case "cancelled":
		return "ph-ph-prohibit text-red-600"
	case "timeout":
		return "ph-timer text-red-600"
	default:
		return "ph-question-circle"
	}
}

templ ScheduledTasksPopover(
	scheduledTasksEntities []entity.ScheduledTask,
) {
	<div
		x-cloak
		x-show="$store.main.displayScheduledTasksPopover"
		class="bg-control-400 w-100 max-h-100 absolute bottom-full z-10 mt-2 -translate-x-1/2 transform overflow-y-auto rounded-t-md text-sm text-neutral-50 shadow-xl transition-all duration-300 ease-in-out"
	>
		<div class="bg-control-300 flex items-center justify-between rounded-t-md p-2.5">
			<div class="text-base font-bold">Scheduled Tasks</div>
			<div class="text-base font-bold">
				<i
					class="ph-bold ph-minus cursor-pointer"
					@click="$store.main.toggleScheduledTasksPopover()"
				></i>
			</div>
		</div>
		<div class="flex justify-center overflow-x-hidden px-1.5 py-2">
			if len(scheduledTasksEntities) == 0 {
				<div class="text-center text-neutral-50">No scheduled tasks.</div>
			}
			<table class="table-auto border-collapse rounded-md">
				<tbody>
					for _, scheduledTask := range scheduledTasksEntities {
						<tr
							class="even:bg-control-500 even:hover:bg-control-300 hover:bg-control-300 cursor-pointer rounded-md border-b border-neutral-500 border-opacity-30 last:border-b-0"
							x-data="{ isExpanded: false }"
							@click="isExpanded = !isExpanded"
							:class="{ 'bg-control-300': isExpanded }"
						>
							<td class="p-1.5" :class="{ 'w-0 opacity-0': isExpanded }">
								<i class={ "text-xl ph-duotone " + scheduledTaskStatusToIcon(scheduledTask.Status) }></i>
							</td>
							<td class="w-85 px-1 py-2" :class="{ 'w-95': isExpanded }">
								{ scheduledTask.Name.String() } <small>#{ scheduledTask.Id.String() }</small>
								if scheduledTask.ElapsedSecs != nil {
									<small>({ fmt.Sprintf("%d", *scheduledTask.ElapsedSecs) }s)</small>
								}
								<div x-show="!isExpanded">
									if scheduledTask.Output != nil {
										<p class="max-w-85 bg-control-900 truncate rounded-md bg-opacity-50 px-1 text-[10px] text-neutral-50">
											{ scheduledTask.Output.String() }
										</p>
									}
									if scheduledTask.Error != nil {
										<p class="max-w-85 truncate rounded-md bg-red-500 bg-opacity-30 px-1 text-[10px] text-neutral-50">
											{ scheduledTask.Error.String() }
										</p>
									}
								</div>
								<div class="max-w-85 text-[10px]" x-show="isExpanded">
									<table>
										<tbody>
											<tr>
												<td class="max-w-80 text-wrap">
													<p class="font-bold">Command</p>
													<p class="max-w-80 bg-control-900 rounded-md bg-opacity-50 px-1 font-mono text-neutral-50">
														{ scheduledTask.Command.String() }
													</p>
												</td>
											</tr>
											<tr>
												<td class="max-w-80 text-wrap break-words p-1">
													<p class="font-bold">Outputs</p>
													if scheduledTask.Output != nil {
														<p class="max-w-80 bg-control-900 rounded-md bg-opacity-50 px-1 font-mono text-neutral-50">
															{ scheduledTask.Output.String() }
														</p>
													}
													if scheduledTask.Error != nil {
														<p class="max-w-80 rounded-md bg-red-500 bg-opacity-30 px-1 text-neutral-50">
															{ scheduledTask.Error.String() }
														</p>
													}
												</td>
											</tr>
											<tr>
												<td class="max-w-80">
													<p class="font-bold">Timings</p>
													<table>
														<tbody>
															<thead class="bg-control-600">
																<th class="text-left">CreatedAt</th>
																<th class="bg-control-500 text-left">StartedAt</th>
																<th class="text-left">FinishedAt</th>
															</thead>
															<tr>
																<td class="text-wrap break-words p-1">
																	{ scheduledTask.CreatedAt.GetRfcDate() }
																</td>
																<td class="bg-control-400 text-wrap break-words p-1">
																	if scheduledTask.StartedAt != nil {
																		{ scheduledTask.StartedAt.GetRfcDate() }
																	} else {
																		-
																	}
																</td>
																<td class="text-wrap break-words p-1">
																	if scheduledTask.FinishedAt != nil {
																		{ scheduledTask.FinishedAt.GetRfcDate() }
																	} else {
																		-
																	}
																</td>
															</tr>
														</tbody>
													</table>
												</td>
											</tr>
										</tbody>
									</table>
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

templ ResourceUsageProgressBar(usageRate uint8, usageLabel, tooltipText, icon string) {
	<div class="group relative flex items-center">
		<i class={ "ph-bold " + icon + " mr-2 align-middle text-xl" }></i>
		@componentMisc.ProgressBar(usageRate, usageLabel)
		<div class={ "absolute left-1/2 transform -translate-x-1/2 opacity-0 bottom-full mb-2 transition-all duration-300 group-hover:block group-hover:-translate-y-0.5 group-hover:opacity-100 p-1.5 bg-control-300 text-neutral-50 text-xs rounded-md shadow-md" }>
			{ tooltipText }
		</div>
	</div>
}

templ Footer(
	o11yOverviewEntity entity.O11yOverview,
	scheduledTasksEntities []entity.ScheduledTask,
) {
	<footer
		id="footer"
		hx-get="/fragment/footer"
		hx-trigger="every 620s, refresh:footer from:window delay:250ms"
		hx-target="this"
		hx-swap="outerHTML"
		class="bg-control-800 border-control-400 h-8.5 fixed bottom-0 flex w-full items-center justify-end border-t-2 px-3 text-sm transition-all duration-300 ease-in-out"
	>
		<div
			class="mr-5 flex h-full items-center"
			:class="$store.main.displayScheduledTasksPopover ? 'bg-control-300' : 'bg-control-800'"
		>
			<i
				class="ph-bold ph-list-checks cursor-pointer px-1 text-xl"
				@click="$store.main.toggleScheduledTasksPopover()"
			></i>
			@ScheduledTasksPopover(scheduledTasksEntities)
		</div>
		<div class="flex items-center space-x-3">
			@ResourceUsageProgressBar(
				uint8(o11yOverviewEntity.HostResourceUsage.CpuPercent),
				o11yOverviewEntity.HostResourceUsage.CpuPercentStr+"%",
				"CPU",
				"ph-speedometer",
			)
			@ResourceUsageProgressBar(
				uint8(o11yOverviewEntity.HostResourceUsage.MemoryPercent),
				o11yOverviewEntity.HostResourceUsage.MemoryPercentStr+"%",
				"RAM",
				"ph-memory",
			)
			@ResourceUsageProgressBar(
				uint8(o11yOverviewEntity.HostResourceUsage.UserDataStorageInfo.UsedPercent),
				o11yOverviewEntity.HostResourceUsage.UserDataStorageInfo.UsedPercentStr+"%",
				"/var/data",
				"ph-hard-drives",
			)
		</div>
	</footer>
}
