package layout

import (
	"github.com/goinfinite/ez/src/domain/entity"
	"github.com/goinfinite/ez/src/domain/valueObject"
	"github.com/goinfinite/ez/src/presentation/ui/component/form"
	componentMisc "github.com/goinfinite/ez/src/presentation/ui/component/misc"
	"github.com/goinfinite/ez/src/presentation/ui/helper"
)

templ FooterSkeleton() {
	<footer
		id="footer"
		hx-get="/fragment/footer"
		hx-trigger="load delay:500ms"
		hx-target="this"
		hx-swap="outerHTML transition:true"
		class="bg-ez-800 border-ez-400 h-8.5 fixed bottom-0 flex w-full items-center justify-end border-t-2 px-3 text-sm transition-all duration-300 ease-in-out"
	>
		<div class="flex items-center space-x-3">
			<div class="bg-ez-200 h-6 w-9 animate-pulse rounded-md"></div>
			for i := 0; i < 3; i++ {
				<div class="bg-ez-200 w-27 h-6 animate-pulse rounded-md"></div>
			}
		</div>
	</footer>
}

func scheduledTaskStatusToIcon(taskStatus valueObject.ScheduledTaskStatus) string {
	switch taskStatus.String() {
	case "pending":
		return "ph-clock text-neutral-50"
	case "running":
		return "ph-cooking-pot text-amber-500 animate-duration-[2s] animate-pulse"
	case "completed":
		return "ph-check-circle text-emerald-500"
	case "failed":
		return "ph-x-circle text-red-600"
	case "cancelled":
		return "ph-prohibit text-red-600"
	case "timeout":
		return "ph-timer text-red-600"
	default:
		return "ph-question-circle"
	}
}

templ ScheduledTasksPopover(
	scheduledTasksEntities []entity.ScheduledTask,
) {
	<div
		x-cloak
		x-show="$store.main.displayScheduledTasksPopover"
		class="bg-ez-400 w-100 border-1 absolute bottom-full z-10 mt-2 -translate-x-1/2 transform overflow-hidden rounded-t-md border-b-0 border-neutral-50/5 text-sm text-neutral-50 shadow-2xl transition-all duration-300 ease-in-out"
	>
		<div class="flex items-center justify-between rounded-t-md bg-neutral-50/5 p-2.5">
			<div class="text-base font-bold">Scheduled Tasks</div>
			<div class="text-base font-bold">
				<i
					class="ph-bold ph-minus cursor-pointer"
					@click="$store.main.toggleScheduledTasksPopover()"
				></i>
			</div>
		</div>
		if len(scheduledTasksEntities) == 0 {
			<div class="text-center text-neutral-50">No scheduled tasks.</div>
		}
		<div class="flex max-h-96 w-full flex-col gap-1 overflow-y-auto overflow-x-hidden px-2.5 py-1.5 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-neutral-50/30 [&::-webkit-scrollbar-thumb]:hover:bg-neutral-50/50 [&::-webkit-scrollbar-track]:rounded-full [&::-webkit-scrollbar-track]:bg-neutral-50/10 [&::-webkit-scrollbar]:w-3">
			for taskEntityIndex, taskEntity := range scheduledTasksEntities {
				{{ rowClasses := "group flex cursor-pointer flex-row items-center justify-evenly gap-0.5 rounded-md p-1" }}
				if taskEntityIndex%2 != 0 {
					{{ rowClasses += " bg-neutral-950/20" }}
				}
				<div
					class={ rowClasses }
					:class="isScheduledTaskExpanded ? 'bg-neutral-950/20' : 'hover:bg-neutral-50/5'"
					x-data="{ isScheduledTaskExpanded: false }"
					@click="if (!isScheduledTaskExpanded) { isScheduledTaskExpanded = true }"
				>
					<div class="text-center align-middle" x-show="!isScheduledTaskExpanded">
						<i class={ "text-opacity-80 text-xl ph-duotone " + scheduledTaskStatusToIcon(taskEntity.Status) }></i>
					</div>
					<div class="w-[90%] py-1.5" :class="{ 'w-full p-2.5': isScheduledTaskExpanded }">
						{ taskEntity.Name.String() } <small class="font-bold">#{ taskEntity.Id.String() }</small>
						if taskEntity.ElapsedSecs != nil {
							<small>({ uiHelper.FormatPointer(taskEntity.ElapsedSecs) })</small>
						}
						<i
							class="ph-bold border-1 active:bg-infinite-500 float-right cursor-pointer rounded-lg border-neutral-50/10 bg-neutral-50/5 p-1 text-xs text-neutral-100 opacity-0 transition-all hover:border-neutral-50/40 hover:bg-neutral-50/20 group-hover:opacity-90"
							:class="isScheduledTaskExpanded ? 'ph-arrows-in' : 'ph-arrows-out'"
							@click.stop="isScheduledTaskExpanded = !isScheduledTaskExpanded"
						></i>
						<div x-show="!isScheduledTaskExpanded">
							if taskEntity.Output != nil {
								<p class="truncate rounded-md bg-neutral-950/20 px-1 text-[10px] text-neutral-100/90">
									{ taskEntity.Output.String() }
								</p>
							}
							if taskEntity.Error != nil {
								<p class="truncate rounded-md bg-red-500/20 px-1 text-[10px] text-neutral-100/90">
									{ taskEntity.Error.String() }
								</p>
							}
						</div>
						<div class="max-w-85 space-y-2 text-[10px]" x-show="isScheduledTaskExpanded">
							@componentForm.TextArea(componentForm.TextAreaSettings{
								Id:         "taskCmd_" + taskEntity.Id.String(),
								Label:      "Command",
								Value:      taskEntity.Command.String(),
								Size:       componentForm.TextAreaSizeXs,
								IsCode:     true,
								IsReadOnly: true,
							})
							@componentForm.TextArea(componentForm.TextAreaSettings{
								Id:         "taskOutput_" + taskEntity.Id.String(),
								Label:      "Output",
								Value:      uiHelper.FormatPointer(taskEntity.Output),
								Size:       componentForm.TextAreaSizeXs,
								IsCode:     true,
								IsReadOnly: true,
							})
							@componentForm.TextArea(componentForm.TextAreaSettings{
								Id:         "taskError_" + taskEntity.Id.String(),
								Label:      "Error",
								Value:      uiHelper.FormatPointer(taskEntity.Error),
								Size:       componentForm.TextAreaSizeXs,
								IsCode:     true,
								IsReadOnly: true,
							})
							<div class="p-2">
								<p class="font-bold">Timings</p>
								<table>
									<tbody>
										<thead class="bg-neutral-50/10">
											<th class="text-left">CreatedAt</th>
											<th class="bg-neutral-950/20 text-left">StartedAt</th>
											<th class="text-left">FinishedAt</th>
										</thead>
										<tr>
											<td class="text-wrap break-words p-1">
												{ uiHelper.FormatPointer(&taskEntity.CreatedAt) }
											</td>
											<td class="text-wrap break-words bg-neutral-950/20 p-1">
												{ uiHelper.FormatPointer(taskEntity.StartedAt) }
											</td>
											<td class="text-wrap break-words p-1">
												{ uiHelper.FormatPointer(taskEntity.FinishedAt) }
											</td>
										</tr>
									</tbody>
								</table>
							</div>
							<div class="space-x-2">
								if taskEntity.Status.String() == "pending" {
									<button
										hx-put="/api/v1/scheduled-task/"
										hx-vals={ "{\"taskId\": " + taskEntity.Id.String() + ", \"status\": \"cancelled\"}" }
										hx-trigger="click"
										hx-swap="none"
										@click="$dispatch('refresh:footer')"
										class="rounded-md border-none bg-red-800 bg-opacity-60 px-2 py-1 text-center text-sm font-bold lowercase leading-none hover:bg-opacity-80"
									>
										<i class="ph-bold ph-hand-palm mr-0.5 align-middle"></i>
										Cancel
									</button>
								} else {
									if taskEntity.Status.String() != "running" {
										<button
											hx-put="/api/v1/scheduled-task/"
											hx-vals={ "{\"taskId\": " + taskEntity.Id.String() + ", \"status\": \"pending\"}" }
											hx-trigger="click"
											hx-swap="none"
											@click="$dispatch('refresh:footer')"
											class="rounded-md border-none bg-amber-700 bg-opacity-60 px-2 py-1 text-center text-sm font-bold lowercase leading-none hover:bg-opacity-80"
										>
											<i class="ph-bold ph-repeat mr-0.5 align-middle"></i>
											Run Again
										</button>
									}
								}
							</div>
						</div>
					</div>
				</div>
			}
		</div>
	</div>
}

templ ResourceUsageProgressBar(usageRate uint8, usageLabel, tooltipText, icon string) {
	<div class="group relative flex items-center">
		<i class={ "ph-bold " + icon + " mr-2 align-middle text-xl" }></i>
		@componentMisc.ProgressBar(usageRate, usageLabel)
		<div class={ "absolute left-1/2 transform -translate-x-1/2 opacity-0 bottom-full mb-2 transition-all duration-300 group-hover:block group-hover:-translate-y-0.5 group-hover:opacity-100 p-1.5 bg-ez-300 text-neutral-50 text-xs rounded-md shadow-md" }>
			{ tooltipText }
		</div>
	</div>
}

templ Footer(
	o11yOverviewEntity entity.O11yOverview,
	scheduledTasksEntities []entity.ScheduledTask,
) {
	<footer
		id="footer"
		hx-get="/fragment/footer"
		hx-trigger="every 30s, refresh:footer from:window delay:200ms"
		hx-target="this"
		hx-swap="outerHTML"
		class="bg-ez-800 border-ez-400 h-8.5 z-2 fixed bottom-0 flex w-full items-center justify-end border-t-2 px-3 text-sm transition-all duration-300 ease-in-out"
	>
		<div
			class="mr-5 flex h-full items-center"
			:class="$store.main.displayScheduledTasksPopover ? 'bg-ez-300' : 'bg-ez-800'"
		>
			<i
				class="ph-bold ph-list-checks cursor-pointer px-1 text-xl"
				@click="$store.main.toggleScheduledTasksPopover()"
			></i>
			@ScheduledTasksPopover(scheduledTasksEntities)
		</div>
		<div class="flex items-center space-x-3">
			@ResourceUsageProgressBar(
				uint8(o11yOverviewEntity.HostResourceUsage.CpuPercent),
				o11yOverviewEntity.HostResourceUsage.CpuPercentStr+"%",
				"CPU",
				"ph-speedometer",
			)
			@ResourceUsageProgressBar(
				uint8(o11yOverviewEntity.HostResourceUsage.MemoryPercent),
				o11yOverviewEntity.HostResourceUsage.MemoryPercentStr+"%",
				"RAM",
				"ph-memory",
			)
			@ResourceUsageProgressBar(
				uint8(o11yOverviewEntity.HostResourceUsage.UserDataStorageInfo.UsedPercent),
				o11yOverviewEntity.HostResourceUsage.UserDataStorageInfo.UsedPercentStr+"%",
				"/var/data",
				"ph-hard-drives",
			)
		</div>
	</footer>
}
