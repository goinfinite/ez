package page

import "github.com/goinfinite/ez/src/domain/dto"
import "strconv"
import "github.com/goinfinite/ez/src/presentation/ui/component/misc"
import "github.com/goinfinite/ez/src/domain/valueObject"
import "github.com/goinfinite/ez/src/presentation/ui/helper"

import componentStructural "github.com/goinfinite/ez/src/presentation/ui/component/structural"

templ BackupIndex(
	readBackupTasksResponse dto.ReadBackupTasksResponse,
	readBackupTaskArchivesResponse dto.ReadBackupTaskArchivesResponse,
	readBackupJobsResponse dto.ReadBackupJobsResponse,
	readBackupDestinationsResponse dto.ReadBackupDestinationsResponse,
) {
	<!-- BackupIndex JavaScript -->
	<script type="text/javascript" src="/assets/local-states/backup.js"></script>
	<!-- BackupIndex HTML -->
	<div x-data="backupIndex">
		@componentStructural.HorizontalTabHeader(
			[]componentStructural.TabHeaderItem{
				{Label: "Tasks", Value: "tasks", Icon: "ph-package", Size: "lg"},
				{Label: "Jobs", Value: "jobs", Icon: "ph-factory", Size: "lg"},
				{Label: "Destinations", Value: "destinations", Icon: "ph-barn", Size: "lg"},
			},
			"backupFeatureTabSelected",
		)
		<div class="rounded-lb-md rounded-r-md bg-neutral-100 bg-opacity-[4%] p-4">
			<div x-show="backupFeatureTabSelected === 'tasks'">
				@BackupTasks(readBackupTasksResponse, readBackupTaskArchivesResponse)
			</div>
			<div x-show="backupFeatureTabSelected === 'jobs'">
				@BackupJobs(readBackupJobsResponse)
			</div>
			<div x-show="backupFeatureTabSelected === 'destinations'">
				@BackupDestinations(readBackupDestinationsResponse)
			</div>
		</div>
	</div>
}

templ BackupTasksTable(readBackupTasksResponse dto.ReadBackupTasksResponse) {
	<!-- Backup Tasks Table -->
	<div
		id="backup-tasks-table"
		hx-get="/backup/"
		hx-trigger="submit from:form delay:500ms, update:backup-task from:window delay:500ms, delete:backup-task from:window delay:500ms"
		hx-select="#backup-tasks-table"
		hx-target="#backup-tasks-table"
		hx-swap="outerHTML transition:true"
		@update:backup-tasks-pagination="reloadBackupTasksTable()"
		@update:backup-tasks-record-filters="reloadBackupTasksTable()"
	>
		<div class="bg-ez-800 border-b border-neutral-500 border-opacity-90 p-2">
			@componentStructural.RecordFilters("backupTasks", "backupTasksFilters")
		</div>
		<table
			class="w-full table-fixed border-collapse rounded-md transition-all duration-300 ease-in-out"
		>
			<thead class="bg-ez-800 text-xs uppercase text-neutral-400">
				<tr class="border-b border-neutral-500 border-opacity-90 text-center">
					<th scope="col" class="w-[3%] overflow-x-hidden py-3">Id</th>
					<th scope="col" class="w-[20%] overflow-x-hidden py-3">Status</th>
					<th scope="col" class="w-[40%] overflow-x-hidden py-3">Results</th>
					<th scope="col" class="w-[18%] overflow-x-hidden py-3">Settings</th>
					<th scope="col" class="w-[14%] py-3"></th>
				</tr>
			</thead>
			<tbody>
				for _, backupTaskEntity := range readBackupTasksResponse.Tasks {
					<!-- Backup Task Entry -->
					<tr class="odd:bg-ez-400 even:bg-ez-600 border-b border-neutral-500 border-opacity-30 text-center">
						@templ.JSONScript("backupTaskEntity_"+backupTaskEntity.TaskId.String(), backupTaskEntity)
						<td class="w-[3%] overflow-x-hidden px-3 py-2">
							{ backupTaskEntity.TaskId.String() }
						</td>
						<td class="w-[20%] overflow-x-hidden p-3">
							{{ statusColor := "ez-200" }}
							{{ statusIcon := "ph-check-circle" }}
							switch backupTaskEntity.TaskStatus {
								case valueObject.BackupTaskStatusCompleted:
									{{ statusColor = "emerald-900" }}
									{{ statusIcon = "ph-check-circle" }}
								case valueObject.BackupTaskStatusPartial:
									{{ statusColor = "amber-500" }}
									{{ statusIcon = "ph-warning" }}
								case valueObject.BackupTaskStatusFailed:
									{{ statusColor = "red-900" }}
									{{ statusIcon = "ph-x-circle" }}
								case valueObject.BackupTaskStatusExecuting:
									{{ statusColor = "cyan-800" }}
									{{ statusIcon = "ph-hourglass" }}
							}
							@componentMisc.Tag(
								statusIcon, "", backupTaskEntity.TaskStatus.String(), statusColor,
							)
							<table class="mt-2 w-full rounded-md text-left text-[11px] ring-2 ring-neutral-50/5">
								<tbody>
									<tr>
										<td class="rounded-tl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Started At
										</td>
										<td class="rounded-tr-md px-2 py-1">
											{ uiHelper.FormatPointer(backupTaskEntity.StartedAt) }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Finished At
										</td>
										<td class="px-2 py-1">
											{ uiHelper.FormatPointer(backupTaskEntity.FinishedAt) }
										</td>
									</tr>
									<tr>
										<td class="rounded-bl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Elapsed Time
										</td>
										<td class="rounded-br-md px-2 py-1">
											{ uiHelper.FormatPointer(backupTaskEntity.ElapsedSecs) }
										</td>
									</tr>
								</tbody>
							</table>
						</td>
						<td class="w-[40%] space-y-3 overflow-x-hidden p-3 text-xs">
							<p>
								<span class="text-[10px] font-bold uppercase">Total Size:</span>
								{ uiHelper.FormatPointer(backupTaskEntity.SizeBytes) }
							</p>
							<div x-data="{ isExpanded: false }">
								<table class="w-full rounded-md ring-2 ring-neutral-50/5">
									<thead class="bg-neutral-950/20 text-[10px] uppercase">
										<tr class="border-b-2 border-neutral-50/5 text-center">
											<th class="w-[50%] rounded-tl-md border-r-2 border-neutral-50/5 p-1">
												Successful ContainerIds
											</th>
											<th class="w-[50%] rounded-tr-md p-1">Failed ContainerIds</th>
										</tr>
									</thead>
									<tbody>
										<tr>
											<td class="border-r-2 border-neutral-50/5">
												for containerIndex, containerId := range backupTaskEntity.SuccessfulContainerIds {
													<p x-show={ "isExpanded || " + strconv.Itoa(containerIndex) + " < 3" }>
														{ containerId.String() } <i class="ph-duotone ph-check-square"></i>
													</p>
												}
											</td>
											<td>
												for containerIndex, containerId := range backupTaskEntity.FailedContainerIds {
													<p x-show={ "isExpanded || " + strconv.Itoa(containerIndex) + " < 3" }>
														{ containerId.String() } <i class="ph-duotone ph-x-square text-red-700"></i>
													</p>
												}
											</td>
										</tr>
									</tbody>
								</table>
								if len(backupTaskEntity.FailedContainerIds) > 3 || len(backupTaskEntity.SuccessfulContainerIds) > 3 {
									<button
										x-on:click="isExpanded = !isExpanded"
										class="flex w-full items-center justify-center rounded-b-md bg-neutral-50/5 py-1.5 text-center text-[8px] text-neutral-200 hover:bg-opacity-20"
									>
										<i x-show="isExpanded" class="ph-bold ph-caret-double-up"></i>
										<i x-show="!isExpanded" class="ph-bold ph-caret-double-down"></i>
									</button>
								}
							</div>
							<div>
								<p class="text-[10px] font-bold uppercase">Execution Output</p>
								<p class="rounded-md bg-neutral-950/10 p-1 font-mono text-neutral-50">
									{ uiHelper.FormatPointer(backupTaskEntity.ExecutionOutput) }
								</p>
							</div>
						</td>
						<td class="w-[18%] overflow-x-hidden p-3">
							<table class="w-full rounded-md text-left text-[11px] ring-2 ring-neutral-50/5">
								<tbody>
									<tr>
										<td class="rounded-tl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											JobId
										</td>
										<td class="rounded-tr-md px-2 py-1">
											{ backupTaskEntity.JobId.String() }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											DestinationId
										</td>
										<td class="px-2 py-1">
											{ backupTaskEntity.DestinationId.String() }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											AccountId
										</td>
										<td class="px-2 py-1">
											{ backupTaskEntity.AccountId.String() }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											RetentionStrategy
										</td>
										<td class="px-2 py-1">
											{ backupTaskEntity.RetentionStrategy.String() }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Schedule
										</td>
										<td class="px-2 py-1">
											{ backupTaskEntity.BackupSchedule.String() }
										</td>
									</tr>
									<tr>
										<td class="rounded-bl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Timeout
										</td>
										<td class="rounded-br-md px-2 py-1">
											{ backupTaskEntity.TimeoutSecs.StringWithSuffix() }
										</td>
									</tr>
								</tbody>
							</table>
						</td>
						<td class="w-[14%] p-2">
							<div class="flex flex-wrap items-center justify-center gap-1">
								if backupTaskEntity.TaskStatus == valueObject.BackupTaskStatusCompleted {
									@componentStructural.CircularIconButtonWithTooltip(
										"create-task-archive", "ph-file-zip", "ez-300", "ez-200",
										"openCreateTaskArchiveModal('"+backupTaskEntity.TaskId.String()+"')",
										"Create Archive", "ez-300",
									)
									@componentStructural.CircularIconButtonWithTooltip(
										"restore-task", "ph-clock-clockwise", "ez-300", "ez-200",
										"openRestoreTaskModal('"+backupTaskEntity.TaskId.String()+"')",
										"Restore", "ez-300",
									)
									@componentStructural.CircularIconButtonWithTooltip(
										"delete-task", "ph-trash", "red-900", "red-700",
										"openDeleteTaskModal('"+backupTaskEntity.TaskId.String()+"')",
										"Delete", "red-700",
									)
								}
							</div>
						</td>
					</tr>
				}
				if len(readBackupTasksResponse.Tasks) == 0 {
					<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20">
						<td class="px-3 py-2" colspan="12">No backup tasks created yet.</td>
					</tr>
				}
			</tbody>
		</table>
		<div class="bg-ez-800 border-t border-neutral-500 border-opacity-90 p-3">
			@componentStructural.Pagination(
				"backupTasks",
				readBackupTasksResponse.Pagination, "backupTasksPagination.pageNumber",
				"backupTasksPagination.itemsPerPage",
			)
		</div>
	</div>
}

templ BackupTasks(
	readBackupTasksResponse dto.ReadBackupTasksResponse,
	readBackupTaskArchivesResponse dto.ReadBackupTaskArchivesResponse,
) {
	@BackupTasksTable(readBackupTasksResponse)
	<br/>
	Tasks Archives
}

templ BackupJobs(readBackupJobsResponse dto.ReadBackupJobsResponse) {
	Jobs with Pagination (10)
}

templ BackupDestinations(readBackupDestinationsResponse dto.ReadBackupDestinationsResponse) {
	Destinations with Pagination (10)
}
