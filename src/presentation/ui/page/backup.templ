package page

import "github.com/goinfinite/ez/src/domain/dto"
import "strconv"
import "github.com/goinfinite/ez/src/presentation/ui/component/misc"
import "github.com/goinfinite/ez/src/domain/valueObject"
import "github.com/goinfinite/ez/src/presentation/ui/helper"
import "github.com/goinfinite/ez/src/domain/entity"

import componentStructural "github.com/goinfinite/ez/src/presentation/ui/component/structural"

templ BackupIndex(
	readBackupTasksResponse dto.ReadBackupTasksResponse,
	readBackupTaskArchivesResponse dto.ReadBackupTaskArchivesResponse,
	readBackupJobsResponse dto.ReadBackupJobsResponse,
	readBackupDestinationsResponse BackupDestinationModifiedResponseDto,
) {
	<!-- BackupIndex JavaScript -->
	<script type="text/javascript" src="/assets/local-states/backup.js"></script>
	<!-- BackupIndex HTML -->
	<div x-data="backupIndex">
		@componentStructural.HorizontalTabHeader(
			[]componentStructural.TabHeaderItem{
				{Label: "Tasks", Value: "tasks", Icon: "ph-package", Size: "lg"},
				{Label: "Jobs", Value: "jobs", Icon: "ph-factory", Size: "lg"},
				{Label: "Destinations", Value: "destinations", Icon: "ph-barn", Size: "lg"},
			},
			"backupFeatureTabSelected",
		)
		<div class="rounded-lb-md rounded-r-md bg-neutral-100 bg-opacity-[4%] p-4">
			<div x-show="backupFeatureTabSelected === 'tasks'">
				@BackupTasks(readBackupTasksResponse, readBackupTaskArchivesResponse)
			</div>
			<div x-show="backupFeatureTabSelected === 'jobs'">
				@BackupJobs(readBackupJobsResponse)
			</div>
			<div x-show="backupFeatureTabSelected === 'destinations'">
				@BackupDestinations(readBackupDestinationsResponse)
			</div>
		</div>
	</div>
}

templ BackupTasksTable(readBackupTasksResponse dto.ReadBackupTasksResponse) {
	<!-- Backup Tasks Table -->
	<div
		id="backup-tasks-table"
		hx-get="/backup/"
		hx-trigger="create:backup-task-archive from:window delay:500ms, restore:backup-task from:window delay:500ms, delete:backup-task from:window delay:500ms"
		hx-select="#backup-tasks-table"
		hx-target="#backup-tasks-table"
		hx-swap="outerHTML transition:true"
		@update:backup-tasks-pagination="reloadBackupTasksTable()"
		@update:backup-tasks-record-filters="reloadBackupTasksTable()"
	>
		<div class="bg-ez-800 border-b border-neutral-500 border-opacity-90 p-2">
			@componentStructural.RecordFilters("backupTasks", "backupTasksFilters")
		</div>
		<table
			class="w-full table-fixed border-collapse rounded-md transition-all duration-300 ease-in-out"
		>
			<thead class="bg-ez-800 text-xs uppercase text-neutral-400">
				<tr class="border-b border-neutral-500 border-opacity-90 text-center">
					<th scope="col" class="w-[5%] overflow-x-hidden py-3">Id</th>
					<th scope="col" class="w-[22.5%] overflow-x-hidden py-3">Status</th>
					<th scope="col" class="w-[42.5%] overflow-x-hidden py-3">Results</th>
					<th scope="col" class="w-[20%] overflow-x-hidden py-3">Settings</th>
					<th scope="col" class="w-[10%]"></th>
				</tr>
			</thead>
			<tbody>
				for _, backupTaskEntity := range readBackupTasksResponse.Tasks {
					<!-- Backup Task Entry -->
					<tr class="odd:bg-ez-400 even:bg-ez-600 border-b border-neutral-500 border-opacity-30 text-center">
						@templ.JSONScript("backupTaskEntity_"+backupTaskEntity.TaskId.String(), backupTaskEntity)
						<td class="w-[5%] overflow-x-hidden px-3 py-2">
							{ backupTaskEntity.TaskId.String() }
						</td>
						<td class="w-[22.5%] overflow-x-hidden p-3">
							{{ statusColor := "ez-200" }}
							{{ statusIcon := "ph-check-circle" }}
							switch backupTaskEntity.TaskStatus {
								case valueObject.BackupTaskStatusCompleted:
									{{ statusColor = "emerald-900" }}
									{{ statusIcon = "ph-check-circle" }}
								case valueObject.BackupTaskStatusPartial:
									{{ statusColor = "amber-500" }}
									{{ statusIcon = "ph-warning" }}
								case valueObject.BackupTaskStatusFailed:
									{{ statusColor = "red-900" }}
									{{ statusIcon = "ph-x-circle" }}
								case valueObject.BackupTaskStatusExecuting:
									{{ statusColor = "cyan-800" }}
									{{ statusIcon = "ph-hourglass" }}
							}
							@componentMisc.Tag(
								statusIcon, "", backupTaskEntity.TaskStatus.String(), statusColor,
							)
							<table class="mt-2 w-full rounded-md text-left text-[11px] ring-2 ring-neutral-50/5">
								<tbody>
									<tr>
										<td class="rounded-tl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Started At
										</td>
										<td class="rounded-tr-md px-2 py-1">
											{ uiHelper.FormatPointer(backupTaskEntity.StartedAt) }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Finished At
										</td>
										<td class="px-2 py-1">
											{ uiHelper.FormatPointer(backupTaskEntity.FinishedAt) }
										</td>
									</tr>
									<tr>
										<td class="rounded-bl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Elapsed Time
										</td>
										<td class="rounded-br-md px-2 py-1">
											{ uiHelper.FormatPointer(backupTaskEntity.ElapsedSecs) }
										</td>
									</tr>
								</tbody>
							</table>
						</td>
						<td class="w-[42.5%] space-y-3 overflow-x-hidden px-6 py-3 text-xs">
							<p>
								<span class="text-[10px] font-bold uppercase">Total Size:</span>
								{ uiHelper.FormatPointer(backupTaskEntity.SizeBytes) }
							</p>
							<div x-data="{ isExpanded: false }">
								<table class="w-full rounded-md ring-2 ring-neutral-50/5">
									<thead class="bg-neutral-950/20 text-[10px] uppercase">
										<tr class="border-b-2 border-neutral-50/5 text-center">
											<th class="w-[50%] rounded-tl-md border-r-2 border-neutral-50/5 p-1">
												Successful ContainerIds
											</th>
											<th class="w-[50%] rounded-tr-md p-1">Failed ContainerIds</th>
										</tr>
									</thead>
									<tbody>
										<tr>
											<td class="border-r-2 border-neutral-50/5">
												for containerIndex, containerId := range backupTaskEntity.SuccessfulContainerIds {
													<p x-show={ "isExpanded || " + strconv.Itoa(containerIndex) + " < 3" }>
														{ containerId.String() } <i class="ph-duotone ph-check-square"></i>
													</p>
												}
											</td>
											<td>
												for containerIndex, containerId := range backupTaskEntity.FailedContainerIds {
													<p x-show={ "isExpanded || " + strconv.Itoa(containerIndex) + " < 3" }>
														{ containerId.String() } <i class="ph-duotone ph-x-square text-red-700"></i>
													</p>
												}
											</td>
										</tr>
									</tbody>
								</table>
								if len(backupTaskEntity.FailedContainerIds) > 3 || len(backupTaskEntity.SuccessfulContainerIds) > 3 {
									<button
										x-on:click="isExpanded = !isExpanded"
										class="flex w-full items-center justify-center rounded-b-md bg-neutral-50/5 py-1.5 text-center text-[8px] text-neutral-200 hover:bg-opacity-20"
									>
										<i x-show="isExpanded" class="ph-bold ph-caret-double-up"></i>
										<i x-show="!isExpanded" class="ph-bold ph-caret-double-down"></i>
									</button>
								}
							</div>
							<div>
								<p class="text-[10px] font-bold uppercase">Execution Output</p>
								<p class="rounded-md bg-neutral-950/10 p-1 font-mono text-neutral-50">
									{ uiHelper.FormatPointer(backupTaskEntity.ExecutionOutput) }
								</p>
							</div>
						</td>
						<td class="w-[20%] overflow-x-hidden p-3">
							<table class="w-full rounded-md text-left text-[11px] ring-2 ring-neutral-50/5">
								<tbody>
									<tr>
										<td class="rounded-tl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											JobId
										</td>
										<td class="rounded-tr-md px-2 py-1">
											{ backupTaskEntity.JobId.String() }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											DestinationId
										</td>
										<td class="px-2 py-1">
											{ backupTaskEntity.DestinationId.String() }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											AccountId
										</td>
										<td class="px-2 py-1">
											{ backupTaskEntity.AccountId.String() }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											RetentionStrategy
										</td>
										<td class="px-2 py-1">
											{ backupTaskEntity.RetentionStrategy.String() }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Schedule
										</td>
										<td class="px-2 py-1">
											{ backupTaskEntity.BackupSchedule.String() }
										</td>
									</tr>
									<tr>
										<td class="rounded-bl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Timeout
										</td>
										<td class="rounded-br-md px-2 py-1">
											{ backupTaskEntity.TimeoutSecs.StringWithSuffix() }
										</td>
									</tr>
								</tbody>
							</table>
						</td>
						<td class="w-[10%]">
							<div class="flex flex-col items-center justify-center gap-2">
								if backupTaskEntity.TaskStatus == valueObject.BackupTaskStatusCompleted {
									@componentStructural.IconButtonWithTooltip(
										"create-task-archive", componentStructural.IconButtonShapeCircular,
										"ph-file-zip", "ez-300", "ez-200",
										"openCreateTaskArchiveModal('"+backupTaskEntity.TaskId.String()+"')",
										"Create Archive", "ez-300", "left",
									)
									@componentStructural.IconButtonWithTooltip(
										"restore-task", componentStructural.IconButtonShapeCircular,
										"ph-clock-clockwise", "ez-300", "ez-200",
										"openRestoreTaskModal('"+backupTaskEntity.TaskId.String()+"')",
										"Restore", "ez-300", "left",
									)
									@componentStructural.IconButtonWithTooltip(
										"delete-task", componentStructural.IconButtonShapeCircular,
										"ph-trash", "red-900", "red-700",
										"openDeleteTaskModal('"+backupTaskEntity.TaskId.String()+"')",
										"Delete", "red-700", "left",
									)
								}
							</div>
						</td>
					</tr>
				}
				if len(readBackupTasksResponse.Tasks) == 0 {
					<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20">
						<td class="px-3 py-2" colspan="12">No backup tasks created yet.</td>
					</tr>
				}
			</tbody>
		</table>
		<div class="bg-ez-800 border-t border-neutral-500 border-opacity-90 p-3">
			@componentStructural.Pagination(
				"backupTasks",
				readBackupTasksResponse.Pagination, "backupTasksPagination.pageNumber",
				"backupTasksPagination.itemsPerPage",
			)
		</div>
	</div>
}

templ BackupTaskArchivesTable(readBackupTaskArchivesResponse dto.ReadBackupTaskArchivesResponse) {
	<!-- Backup Task Archives Table -->
	<div
		id="backup-task-archives-table"
		hx-get="/backup/"
		hx-trigger="submit from:form delay:500ms, update:backup-task-archive from:window delay:500ms, delete:backup-task-archive from:window delay:500ms"
		hx-select="#backup-task-archives-table"
		hx-target="#backup-task-archives-table"
		hx-swap="outerHTML transition:true"
		@update:backup-task-archives-pagination="reloadBackupTaskArchivesTable()"
	>
		<table
			class="w-full table-fixed border-collapse rounded-md transition-all duration-300 ease-in-out"
		>
			<thead class="bg-ez-800 text-xs uppercase text-neutral-400">
				<tr class="border-b border-neutral-500 border-opacity-90 text-left">
					<th scope="col" class="w-[50%] p-3">File Path</th>
					<th scope="col" class="w-[15%] p-3">Archive Id</th>
					<th scope="col" class="w-[10%] p-3">Size</th>
					<th scope="col" class="w-[10%] p-3">Created At</th>
					<th scope="col" class="w-[15%] p-3"></th>
				</tr>
			</thead>
			<tbody>
				for _, backupTaskArchiveEntity := range readBackupTaskArchivesResponse.Archives {
					@templ.JSONScript(
						"backupTaskArchiveEntity_"+backupTaskArchiveEntity.ArchiveId.String(),
						backupTaskArchiveEntity,
					)
					<tr class="odd:bg-ez-400 even:bg-ez-600 border-b border-neutral-500 border-opacity-30 text-sm">
						<td class="w-[50%] px-3 py-2">
							{ backupTaskArchiveEntity.UnixFilePath.String() }
						</td>
						<td class="w-[15%] space-y-1 p-3">
							<p>{ backupTaskArchiveEntity.ArchiveId.String() }</p>
							@componentMisc.Tag(
								"ph-user", "",
								backupTaskArchiveEntity.AccountUsername.String()+" <small>("+backupTaskArchiveEntity.AccountId.String()+")</small>",
								"ez-200",
							)
						</td>
						<td class="w-[10%] p-3">
							{ backupTaskArchiveEntity.SizeBytes.StringWithSuffix() }
						</td>
						<td class="w-[10%] p-3">
							{ backupTaskArchiveEntity.CreatedAt.ReadAsRfcDate() }
						</td>
						<td class="w-[15%] p-2">
							<div class="flex flex-wrap items-center justify-center gap-1">
								@componentStructural.IconButtonWithTooltip(
									"download-task-archive", componentStructural.IconButtonShapeCircular,
									"ph-download", "ez-300", "ez-200",
									"window.open('"+backupTaskArchiveEntity.DownloadUrl.String()+"')",
									"Download", "ez-300", "left",
								)
								@componentStructural.IconButtonWithTooltip(
									"delete-task-archive", componentStructural.IconButtonShapeCircular,
									"ph-trash", "red-900", "red-700",
									"openDeleteTaskArchiveModal('"+backupTaskArchiveEntity.ArchiveId.String()+"')",
									"Delete", "red-700", "right",
								)
							</div>
						</td>
					</tr>
				}
				if len(readBackupTaskArchivesResponse.Archives) == 0 {
					<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20">
						<td class="px-6 py-4" colspan="12">No task archives found.</td>
					</tr>
				}
			</tbody>
		</table>
		<div class="bg-ez-800 border-t border-neutral-500 border-opacity-90 p-3">
			@componentStructural.Pagination(
				"backupTaskArchives",
				readBackupTaskArchivesResponse.Pagination, "backupTaskArchivesPagination.pageNumber",
				"backupTaskArchivesPagination.itemsPerPage",
			)
		</div>
	</div>
}

templ BackupTasks(
	readBackupTasksResponse dto.ReadBackupTasksResponse,
	readBackupTaskArchivesResponse dto.ReadBackupTaskArchivesResponse,
) {
	<div class="mb-4">
		@componentStructural.PageSubHeading(
			"Tasks",
			"Manage and monitor individual backup operations, including tracking status, downloading, restoring, or deleting tasks.",
			"ph-package",
		)
	</div>
	@BackupTasksTable(readBackupTasksResponse)
	<br/>
	<div class="mb-4">
		@componentStructural.PageSubHeading(
			"Tasks Archives",
			"Access and manage compressed files of completed backup tasks, with options to download or delete archives.",
			"ph-box-arrow-down",
		)
	</div>
	@BackupTaskArchivesTable(readBackupTaskArchivesResponse)
	<p class="mt-2 text-xs">
		Note: archive files are automatically deleted after 24h to preserve storage space.
	</p>
}

templ BackupJobsTable(readBackupJobsResponse dto.ReadBackupJobsResponse) {
	<!-- Backup Jobs Table -->
	<div
		id="backup-jobs-table"
		hx-get="/backup/"
		hx-trigger="create:backup-job from:window delay:500ms, update:backup-job from:window delay:500ms, delete:backup-job from:window delay:500ms"
		hx-select="#backup-jobs-table"
		hx-target="#backup-jobs-table"
		hx-swap="outerHTML transition:true"
		@update:backup-jobs-pagination="reloadBackupJobsTable()"
		@update:backup-jobs-record-filters="reloadBackupJobsTable()"
	>
		<div class="bg-ez-800 border-b border-neutral-500 border-opacity-90 p-2">
			@componentStructural.RecordFilters("backupJobs", "backupJobsFilters")
		</div>
		<table
			class="w-full table-fixed border-collapse rounded-md transition-all duration-300 ease-in-out"
		>
			<thead class="bg-ez-800 text-xs uppercase text-neutral-400">
				<tr class="border-b border-neutral-500 border-opacity-90 text-center">
					<th scope="col" class="w-[20%] overflow-x-hidden py-3">Id</th>
					<th scope="col" class="w-[25%] overflow-x-hidden py-3">Status</th>
					<th scope="col" class="w-[45%] overflow-x-hidden py-3">Settings</th>
					<th scope="col" class="w-[10%] py-3"></th>
				</tr>
			</thead>
			<tbody>
				for _, backupJobEntity := range readBackupJobsResponse.Jobs {
					<!-- Backup Job Entry -->
					<tr class="odd:bg-ez-400 even:bg-ez-600 border-b border-neutral-500 border-opacity-30 text-center">
						@templ.JSONScript("backupJobEntity_"+backupJobEntity.JobId.String(), backupJobEntity)
						<td class="w-[20%] text-clip px-3 py-2 text-left">
							<p class="font-bold">
								<span class="text-xs">#</span>{ backupJobEntity.JobId.String() }
							</p>
							<p class="text-xs">
								{ uiHelper.FormatPointer(backupJobEntity.JobDescription) }
							</p>
						</td>
						<td class="w-[25%] overflow-x-hidden p-3">
							{{ statusText := "enabled" }}
							{{ statusColor := "ez-200" }}
							{{ statusIcon := "ph-check-circle" }}
							if !backupJobEntity.JobStatus {
								{{ statusText = "disabled" }}
								{{ statusColor = "red-900" }}
								{{ statusIcon = "ph-x-circle" }}
							}
							@componentMisc.Tag(statusIcon, "", statusText, statusColor)
							<table class="mt-2 w-full rounded-md text-left text-[11px] ring-2 ring-neutral-50/5">
								<tbody>
									<tr>
										<td class="rounded-tl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Tasks Count
										</td>
										<td class="rounded-tr-md px-2 py-1">
											{ uiHelper.FormatPointer(backupJobEntity.TasksCount) }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Total Space Usage
										</td>
										<td class="px-2 py-1">
											{ uiHelper.FormatPointer(backupJobEntity.TotalSpaceUsageBytes) }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Last Run At
										</td>
										<td class="px-2 py-1">
											{ uiHelper.FormatPointer(backupJobEntity.LastRunAt) }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Last Run Status
										</td>
										<td class="px-2 py-1">
											{ uiHelper.FormatPointer(backupJobEntity.LastRunStatus) }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Next Run At
										</td>
										<td class="px-2 py-1">
											{ uiHelper.FormatPointer(backupJobEntity.NextRunAt) }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Updated At
										</td>
										<td class="px-2 py-1">
											{ backupJobEntity.UpdatedAt.ReadAsRfcDate() }
										</td>
									</tr>
									<tr>
										<td class="rounded-bl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Created At
										</td>
										<td class="rounded-br-md px-2 py-1">
											{ backupJobEntity.CreatedAt.ReadAsRfcDate() }
										</td>
									</tr>
								</tbody>
							</table>
						</td>
						<td class="w-[45%] overflow-x-hidden p-3">
							<table class="w-full rounded-md text-left text-[11px] ring-2 ring-neutral-50/5">
								<tbody>
									<tr>
										<td class="rounded-tl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											AccountId
										</td>
										<td class="rounded-tr-md px-2 py-1">
											{ backupJobEntity.AccountId.String() }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											DestinationIds
										</td>
										<td class="px-2 py-1">
											{ templ.JSONString(backupJobEntity.DestinationIds) }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Retention Strategy
										</td>
										<td class="px-2 py-1">
											{ backupJobEntity.RetentionStrategy.String() }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Schedule
										</td>
										<td class="px-2 py-1">
											{ backupJobEntity.BackupSchedule.String() }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Archive Compression Format
										</td>
										<td class="px-2 py-1">
											{ backupJobEntity.ArchiveCompressionFormat.String() }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Max
										</td>
										<td class="p-0">
											<table class="w-full table-auto text-center">
												<tr>
													<td class="bg-neutral-50/10 px-2 py-1">
														Tasks Count
													</td>
													<td class="px-2 py-1">
														{ uiHelper.FormatPointer(backupJobEntity.MaxTaskRetentionCount) }
													</td>
													<td class="bg-neutral-50/10 px-2 py-1">
														Retention Days
													</td>
													<td class="px-2 py-1">
														{ uiHelper.FormatPointer(backupJobEntity.MaxTaskRetentionDays) }
													</td>
													<td class="bg-neutral-50/10 px-2 py-1">
														CPUs
													</td>
													<td class="px-2 py-1">
														{ uiHelper.FormatPointer(backupJobEntity.MaxConcurrentCpuCores) }
													</td>
												</tr>
											</table>
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											ContainerAccountIds
										</td>
										<td class="text-clip px-2 py-1">
											{ templ.JSONString(backupJobEntity.ContainerAccountIds) }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											ContainerIds
										</td>
										<td class="text-clip px-2 py-1">
											{ templ.JSONString(backupJobEntity.ContainerIds) }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Except ContainerAccountIds
										</td>
										<td class="text-clip px-2 py-1">
											{ templ.JSONString(backupJobEntity.ExceptContainerAccountIds) }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Except ContainerIds
										</td>
										<td class="text-clip px-2 py-1">
											{ templ.JSONString(backupJobEntity.ExceptContainerIds) }
										</td>
									</tr>
									<tr>
										<td class="rounded-bl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Timeout
										</td>
										<td class="rounded-br-md px-2 py-1">
											{ backupJobEntity.TimeoutSecs.StringWithSuffix() }
										</td>
									</tr>
								</tbody>
							</table>
						</td>
						<td class="w-[10%]">
							<div class="flex flex-col items-center justify-center gap-2">
								@componentStructural.IconButtonWithTooltip(
									"run-job", componentStructural.IconButtonShapeCircular,
									"ph-queue", "cyan-900", "cyan-700",
									"openRunJobModal('"+backupJobEntity.JobId.String()+"')",
									"Run Job Now", "cyan-700", "left",
								)
								@componentStructural.IconButtonWithTooltip(
									"update-job", componentStructural.IconButtonShapeCircular,
									"ph-pencil", "ez-300", "ez-200",
									"openUpdateJobModal('"+backupJobEntity.JobId.String()+"')",
									"Update", "ez-300", "left",
								)
								@componentStructural.IconButtonWithTooltip(
									"delete-job", componentStructural.IconButtonShapeCircular,
									"ph-trash", "red-900", "red-700",
									"openDeleteJobModal('"+backupJobEntity.JobId.String()+"')",
									"Delete", "red-700", "left",
								)
							</div>
						</td>
					</tr>
				}
				if len(readBackupJobsResponse.Jobs) == 0 {
					<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20">
						<td class="px-3 py-2" colspan="12">No backup jobs created yet.</td>
					</tr>
				}
			</tbody>
		</table>
		<div class="bg-ez-800 border-t border-neutral-500 border-opacity-90 p-3">
			@componentStructural.Pagination(
				"backupJobs",
				readBackupJobsResponse.Pagination, "backupJobsPagination.pageNumber",
				"backupJobsPagination.itemsPerPage",
			)
		</div>
	</div>
}

templ BackupJobs(readBackupJobsResponse dto.ReadBackupJobsResponse) {
	<div class="mb-4">
		@componentStructural.PageSubHeading(
			"Jobs",
			"View and manage scheduled backup jobs, including creating, editing, or deleting jobs.",
			"ph-factory",
		)
	</div>
	@BackupJobsTable(readBackupJobsResponse)
}

templ BackupDestinationsTable(destinationsResponse BackupDestinationModifiedResponseDto) {
	<!-- Backup Destinations Table -->
	<div
		id="backup-destinations-table"
		hx-get="/backup/"
		hx-trigger="create:backup-destination from:window delay:500ms, update:backup-destination from:window delay:500ms, delete:backup-destination from:window delay:500ms"
		hx-select="#backup-destinations-table"
		hx-target="#backup-destinations-table"
		hx-swap="outerHTML transition:true"
		@update:backup-destinations-pagination="reloadBackupDestinationsTable()"
		@update:backup-destinations-record-filters="reloadBackupDestinationsTable()"
	>
		<div class="bg-ez-800 border-b border-neutral-500 border-opacity-90 p-2">
			@componentStructural.RecordFilters("backupDestinations", "backupDestinationsFilters")
		</div>
		<table
			class="w-full table-fixed border-collapse rounded-md transition-all duration-300 ease-in-out"
		>
			<thead class="bg-ez-800 text-xs uppercase text-neutral-400">
				<tr class="border-b border-neutral-500 border-opacity-90 text-center">
					<th scope="col" class="w-[20%] overflow-x-hidden py-3">Id</th>
					<th scope="col" class="w-[25%] overflow-x-hidden py-3">Status</th>
					<th scope="col" class="w-[45%] overflow-x-hidden py-3">Settings</th>
					<th scope="col" class="w-[10%] py-3"></th>
				</tr>
			</thead>
			<tbody>
				for _, destinationEntity := range destinationsResponse.Destinations {
					<!-- Backup Destination Entry -->
					<tr class="odd:bg-ez-400 even:bg-ez-600 border-b border-neutral-500 border-opacity-30 text-center">
						@templ.JSONScript(
							"backupDestinationEntity_"+destinationEntity.DestinationId.String(),
							destinationEntity,
						)
						<td class="w-[20%] text-clip px-3 py-2 text-left">
							<p class="font-bold">
								<span class="text-xs">#</span>{ destinationEntity.DestinationId.String() }
							</p>
							<p class="text-xs">
								{ uiHelper.FormatPointer(destinationEntity.DestinationDescription) }
							</p>
						</td>
					</tr>
				}
				if len(destinationsResponse.Destinations) == 0 {
					<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20">
						<td class="px-3 py-2" colspan="12">No backup destinations created yet.</td>
					</tr>
				}
			</tbody>
		</table>
		<div class="bg-ez-800 border-t border-neutral-500 border-opacity-90 p-3">
			@componentStructural.Pagination(
				"backupDestinations",
				destinationsResponse.Pagination,
				"backupDestinationsPagination.pageNumber",
				"backupDestinationsPagination.itemsPerPage",
			)
		</div>
	</div>
}

// Couldn't find how to ignore it via "lint:" directive, but it's safe to ignore.
type BackupDestinationUnifiedEntity struct {
	entity.BackupDestinationBase
	entity.BackupDestinationRemoteBase
	entity.BackupDestinationLocal
	entity.BackupDestinationObjectStorage
	entity.BackupDestinationRemoteHost
}

type BackupDestinationModifiedResponseDto struct {
	Destinations []BackupDestinationUnifiedEntity
	Pagination   dto.Pagination
}

templ BackupDestinations(destinationsResponse BackupDestinationModifiedResponseDto) {
	<div class="mb-4">
		@componentStructural.PageSubHeading(
			"Destinations",
			"Manage and monitor backup destinations, including adding, editing, or deleting destinations.",
			"ph-barn",
		)
	</div>
	@BackupDestinationsTable(destinationsResponse)
}
