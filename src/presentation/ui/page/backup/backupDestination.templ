package pageBackup

import (
	"github.com/goinfinite/ez/src/domain/dto"
	"github.com/goinfinite/ez/src/domain/entity"
	"github.com/goinfinite/ez/src/domain/valueObject"
	"github.com/goinfinite/ez/src/presentation/ui/component/form"
	"github.com/goinfinite/ez/src/presentation/ui/component/misc"
	"github.com/goinfinite/ez/src/presentation/ui/component/structural"
	"github.com/goinfinite/ez/src/presentation/ui/helper"
)

type CreateBackupDestinationModalDto struct {
	AccountSelectLabelValuePairs []componentForm.SelectLabelValuePair
}

templ CreateBackupDestinationForm(createDto CreateBackupDestinationModalDto) {
	<!-- CreateBackupDestinationForm -->
	<form
		id="create-backup-destination"
		hx-post="/api/v1/backup/destination/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		class="flex flex-col gap-4"
	>
		<div class="flex w-full flex-row items-center gap-6">
			<div class="w-1/2">
				@componentForm.InputField(componentForm.InputFieldDto{
					InputType:     "text",
					Id:            "destinationName",
					Label:         "Name",
					BindValuePath: "createDestination.destinationName",
				})
			</div>
			<div class="w-1/2">
				@componentForm.RadioSelectInput(componentForm.RadioSelectInputDto{
					Label: "Destination Type",
					Options: []componentForm.RadioInputDto{
						{
							Label:         "Local",
							BindValue:     valueObject.BackupDestinationTypeLocal.String(),
							BindModelPath: "createDestination.destinationType",
						},
						{
							Label:         "Remote Host",
							BindValue:     valueObject.BackupDestinationTypeRemoteHost.String(),
							BindModelPath: "createDestination.destinationType",
						},
						{
							Label:         "Object Storage",
							BindValue:     valueObject.BackupDestinationTypeObjectStorage.String(),
							BindModelPath: "createDestination.destinationType",
						},
					},
				})
			</div>
		</div>
		<div class="-mb-2">
			@componentForm.TextArea("destinationDescription", "Description", "createDestination.destinationDescription")
		</div>
		<div class="flex w-full flex-row items-center gap-6">
			<div class="w-1/3">
				@componentForm.InputField(componentForm.InputFieldDto{
					InputType:     "text",
					Id:            "destinationPath",
					Label:         "Destination Path",
					BindValuePath: "createDestination.destinationPath",
				})
			</div>
			<div class="w-1/3">
				@componentForm.InputField(componentForm.InputFieldDto{
					InputType:     "number",
					Id:            "minLocalStorageFreePercent",
					Label:         "Min Free Local Storage (%)",
					BindValuePath: "createDestination.minLocalStorageFreePercent",
				})
			</div>
			<div class="w-1/3">
				@componentForm.InputField(componentForm.InputFieldDto{
					InputType:     "number",
					Id:            "maxDestinationStorageUsagePercent",
					Label:         "Max Dest. Storage Usage (%)",
					BindValuePath: "createDestination.maxDestinationStorageUsagePercent",
				})
			</div>
		</div>
		{{ isRemoteHostDestination := `createDestination.destinationType == "` + valueObject.BackupDestinationTypeRemoteHost.String() + `"` }}
		{{ isObjectStorageDestination := `createDestination.destinationType == "` + valueObject.BackupDestinationTypeObjectStorage.String() + `"` }}
		{{ isRemoteDestination := isRemoteHostDestination + ` || ` + isObjectStorageDestination }}
		<template x-if={ isRemoteHostDestination }>
			<div class="flex w-full flex-row items-center gap-6">
				<div class="w-1/2">
					@componentForm.RadioSelectInput(componentForm.RadioSelectInputDto{
						Label: "Remote Host Type",
						Options: []componentForm.RadioInputDto{
							{
								Label:         "SFTP (recommended)",
								BindValue:     valueObject.BackupDestinationRemoteHostTypeSftp.String(),
								BindModelPath: "createDestination.remoteHostType",
							},
							{
								Label:         "FTP (insecure)",
								BindValue:     valueObject.BackupDestinationRemoteHostTypeFtp.String(),
								BindModelPath: "createDestination.remoteHostType",
							},
						},
					})
				</div>
				<div class="w-1/2">
					@componentForm.InputField(componentForm.InputFieldDto{
						InputType:     "text",
						Id:            "remoteHostname",
						Label:         "Server Hostname",
						BindValuePath: "createDestination.remoteHostname",
						IsRequired:    true,
					})
				</div>
			</div>
		</template>
		<template x-if={ isRemoteHostDestination }>
			<div
				class="flex w-full flex-row items-center gap-6"
			>
				<div class="w-1/2">
					@componentForm.InputField(componentForm.InputFieldDto{
						InputType:     "text",
						Id:            "remoteHostUsername",
						Label:         "Username",
						BindValuePath: "createDestination.remoteHostUsername",
						IsRequired:    true,
					})
				</div>
				<div class="w-1/2">
					@componentForm.InputField(componentForm.InputFieldDto{
						InputType:     "password",
						Id:            "remoteHostPassword",
						Label:         "Password",
						BindValuePath: "createDestination.remoteHostPassword",
					})
				</div>
			</div>
		</template>
		<template x-if={ isRemoteHostDestination }>
			<div
				class="flex w-full flex-row items-center gap-6"
			>
				<div class="w-1/2">
					@componentForm.InputField(componentForm.InputFieldDto{
						InputType:     "number",
						Id:            "remoteHostNetworkPort",
						Label:         "Server Port",
						BindValuePath: "createDestination.remoteHostNetworkPort",
					})
				</div>
				<div class="w-1/2">
					@componentForm.InputField(componentForm.InputFieldDto{
						InputType:     "text",
						Id:            "remoteHostPrivateKeyFilePath",
						Label:         "Private Key File Path",
						BindValuePath: "createDestination.remoteHostPrivateKeyFilePath",
					})
				</div>
			</div>
		</template>
		<template x-if={ isObjectStorageDestination }>
			<div class="flex w-full flex-row items-center gap-6">
				<div class="w-1/2">
					@componentForm.SelectInput(componentForm.SelectInputDto{
						Id:            "objectStorageProvider",
						Label:         "Object Storage Provider",
						BindValuePath: "createDestination.objectStorageProvider",
						Options:       valueObject.ObjectStorageProviderStrList,
					})
				</div>
				<div class="w-1/2">
					<template x-if="createDestination.objectStorageProvider == 'custom'">
						@componentForm.InputField(componentForm.InputFieldDto{
							InputType:     "text",
							Id:            "objectStorageEndpointUrl",
							Label:         "Endpoint Url",
							BindValuePath: "createDestination.objectStorageEndpointUrl",
						})
					</template>
					<template x-if="createDestination.objectStorageProvider != 'custom'">
						@componentForm.InputField(componentForm.InputFieldDto{
							InputType:     "text",
							Id:            "objectStorageProviderRegion",
							Label:         "Region",
							BindValuePath: "createDestination.objectStorageProviderRegion",
						})
					</template>
				</div>
			</div>
		</template>
		<template x-if={ isObjectStorageDestination }>
			@componentForm.InputField(componentForm.InputFieldDto{
				InputType:     "text",
				Id:            "objectStorageBucketName",
				Label:         "Bucket Name",
				BindValuePath: "createDestination.objectStorageBucketName",
			})
		</template>
		<template x-if={ isObjectStorageDestination }>
			<div class="flex w-full flex-row items-center gap-6">
				<div class="w-1/2">
					@componentForm.InputField(componentForm.InputFieldDto{
						InputType:     "text",
						Id:            "objectStorageProviderAccessKeyId",
						Label:         "Access Key Id",
						BindValuePath: "createDestination.objectStorageProviderAccessKeyId",
					})
				</div>
				<div class="w-1/2">
					@componentForm.InputField(componentForm.InputFieldDto{
						InputType:     "password",
						Id:            "objectStorageProviderSecretAccessKey",
						Label:         "Secret Access Key",
						BindValuePath: "createDestination.objectStorageProviderSecretAccessKey",
					})
				</div>
			</div>
		</template>
		@componentStructural.CollapsibleSection("Advanced Settings", "ph-gear") {
			@componentForm.SelectInputWithLabelValuePair(
				componentForm.SelectInputWithLabelValuePairDto{
					Id:                    "accountId",
					Label:                 "Account (Destination Owner)",
					SelectedBindValuePath: "createDestination.accountId",
					Options:               createDto.AccountSelectLabelValuePairs,
				})
			<template x-if={ isRemoteDestination }>
				<div class="flex w-full flex-row items-center gap-6">
					<div class="w-1/2">
						@componentForm.SelectInputWithLabelValuePair(
							componentForm.SelectInputWithLabelValuePairDto{
								Id:                    "downloadBytesSecRateLimit",
								Label:                 "Download Rate Limit (bytes/sec)",
								SelectedBindValuePath: "createDestination.downloadBytesSecRateLimit",
								Options: []componentForm.SelectLabelValuePair{
									{Label: "Unlimited", Value: ""},
									{Label: "1 MiB/s", Value: "1048576"},
									{Label: "5 MiB/s", Value: "5242880"},
									{Label: "10 MiB/s", Value: "10485760"},
									{Label: "50 MiB/s", Value: "52428800"},
									{Label: "100 MiB/s", Value: "104857600"},
									{Label: "200 MiB/s", Value: "209715200"},
									{Label: "500 MiB/s", Value: "524288000"},
									{Label: "1 GiB/s", Value: "1048576000"},
								},
							})
					</div>
					<div class="w-1/2">
						@componentForm.SelectInputWithLabelValuePair(
							componentForm.SelectInputWithLabelValuePairDto{
								Id:                    "uploadBytesSecRateLimit",
								Label:                 "Upload Rate Limit (bytes/sec)",
								SelectedBindValuePath: "createDestination.uploadBytesSecRateLimit",
								Options: []componentForm.SelectLabelValuePair{
									{Label: "Unlimited", Value: ""},
									{Label: "1 MiB/s", Value: "1048576"},
									{Label: "5 MiB/s", Value: "5242880"},
									{Label: "10 MiB/s", Value: "10485760"},
									{Label: "50 MiB/s", Value: "52428800"},
									{Label: "100 MiB/s", Value: "104857600"},
									{Label: "200 MiB/s", Value: "209715200"},
									{Label: "500 MiB/s", Value: "524288000"},
									{Label: "1 GiB/s", Value: "1048576000"},
								},
							})
					</div>
				</div>
			</template>
			<template x-if={ isRemoteDestination }>
				<div class="flex w-full flex-row items-center gap-6">
					<div class="w-1/2">
						@componentForm.InputField(componentForm.InputFieldDto{
							InputType:     "number",
							Id:            "maxConcurrentConnections",
							Label:         "Max Concurrent Connections",
							BindValuePath: "createDestination.maxConcurrentConnections",
						})
					</div>
					<div class="w-1/2">
						@componentForm.RadioSelectInput(componentForm.RadioSelectInputDto{
							Label: "Skip Certificate Verification",
							Options: []componentForm.RadioInputDto{
								{
									Label:         "Yes",
									BindValue:     "true",
									BindModelPath: "createDestination.skipCertificateVerification",
								},
								{
									Label:         "No",
									BindValue:     "false",
									BindModelPath: "createDestination.skipCertificateVerification",
								},
							},
						})
					</div>
				</div>
			</template>
			<template x-if={ isRemoteHostDestination }>
				<div class="flex w-full flex-row items-center gap-6">
					<div class="w-1/2">
						@componentForm.InputField(componentForm.InputFieldDto{
							InputType:     "number",
							Id:            "remoteHostConnectionTimeoutSecs",
							Label:         "Connection Timeout (secs)",
							BindValuePath: "createDestination.remoteHostConnectionTimeoutSecs",
						})
					</div>
					<div class="w-1/2">
						@componentForm.InputField(componentForm.InputFieldDto{
							InputType:     "number",
							Id:            "remoteHostConnectionRetrySecs",
							Label:         "Connection Retry Time (secs)",
							BindValuePath: "createDestination.remoteHostConnectionRetrySecs",
						})
					</div>
				</div>
			</template>
		}
		@componentForm.SubmitButton(
			"Create Backup Destination", "ph-check-fat", "closeCreateDestinationModal()", false,
		)
	</form>
}

templ CreateBackupDestinationModal(createDto CreateBackupDestinationModalDto) {
	<!-- CreateBackupDestinationModal -->
	@componentStructural.RegularModal(
		"Create Backup Destination", "isCreateDestinationModalOpen", "closeCreateDestinationModal()", "",
	) {
		@CreateBackupDestinationForm(createDto)
	}
}

templ UpdateBackupDestinationForm(createDto CreateBackupDestinationModalDto) {
	<!-- UpdateBackupDestinationForm -->
	<form
		id="update-backup-destination"
		hx-put="/api/v1/backup/destination/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		class="flex flex-col gap-5"
	>
		<input type="hidden" name="destinationId" x-bind:value="destinationEntity.destinationId"/>
		<input type="hidden" name="accountId" x-bind:value="destinationEntity.accountId"/>
		<div class="flex w-full flex-row items-center gap-6">
			<div class="w-1/2"></div>
			<div class="w-1/2"></div>
		</div>
		<div class="flex w-full flex-row items-center gap-6">
			<div class="w-1/3"></div>
			<div class="w-1/3"></div>
		</div>
		<div class="-mb-2">
			@componentForm.TextArea("destinationDescription", "Description", "destinationEntity.destinationDescription")
		</div>
		@componentStructural.CollapsibleSection("Advanced Settings", "ph-gear") {
			<div class="flex w-full flex-row items-center gap-6">
				<div class="w-1/2">
					@componentForm.SelectInputWithLabelValuePair(
						componentForm.SelectInputWithLabelValuePairDto{
							Id:                    "accountId",
							Label:                 "Account (Destination Owner)",
							SelectedBindValuePath: "destinationEntity.accountId",
							Options:               createDto.AccountSelectLabelValuePairs,
						})
				</div>
				<div class="w-1/2"></div>
			</div>
			<div class="flex w-full flex-row items-center gap-6">
				<div class="w-1/2"></div>
				<div class="w-1/2"></div>
			</div>
		}
		@componentForm.SubmitButton(
			"Update Backup Destination", "ph-check-fat", "closeUpdateDestinationModal()", false,
		)
	</form>
}

templ UpdateBackupDestinationModal(createDto CreateBackupDestinationModalDto) {
	<!-- UpdateBackupDestinationModal -->
	@componentStructural.RegularModal(
		"Update Backup Destination", "isUpdateDestinationModalOpen",
		"closeUpdateDestinationModal()", "destinationEntity.DestinationId",
	) {
		@UpdateBackupDestinationForm(createDto)
	}
}

templ BackupDestinationsTable(
	readDestinationsRequest dto.ReadBackupDestinationsRequest,
	readDestinationsResponse BackupDestinationModifiedResponseDto,
) {
	<!-- Backup Destinations Table -->
	{{ destinationsTableId := "backup-destinations-table" }}
	<div
		id={ destinationsTableId }
		hx-get="/backup/"
		hx-trigger="submit from:form delay:500ms, delete:backup-destination from:window delay:500ms"
		hx-select={ "#" + destinationsTableId }
		hx-target={ "#" + destinationsTableId }
		hx-swap="outerHTML transition:true"
	>
		<div class="bg-ez-800 border-b border-neutral-500 border-opacity-90 p-2">
			@componentStructural.ReadRequestSettingsBar(
				"backupDestinations", "/backup/", "#"+destinationsTableId,
				readDestinationsRequest, readDestinationsResponse.Pagination,
				BackupDestinationUnifiedEntity{},
			)
		</div>
		<table
			class="w-full table-fixed border-collapse rounded-md transition-all duration-300 ease-in-out"
		>
			<thead class="bg-ez-800 text-xs uppercase text-neutral-400">
				<tr class="border-b border-neutral-500 border-opacity-90 text-center">
					<th scope="col" class="w-[20%] overflow-x-hidden py-3">Id</th>
					<th scope="col" class="w-[25%] overflow-x-hidden py-3">Status</th>
					<th scope="col" class="w-[45%] overflow-x-hidden py-3">Settings</th>
					<th scope="col" class="w-[10%] py-3"></th>
				</tr>
			</thead>
			<tbody>
				for _, destinationEntity := range readDestinationsResponse.Destinations {
					<!-- Backup Destination Entry -->
					<tr class="odd:bg-ez-400 even:bg-ez-600 border-b border-neutral-500 border-opacity-30 text-center">
						@templ.JSONScript(
							"backupDestinationEntity_"+destinationEntity.DestinationId.String(),
							destinationEntity,
						)
						<td class="w-[20%] space-y-2 text-clip px-3 py-2 text-left">
							<p>
								{ destinationEntity.DestinationName.String() }
								<span class="font-bold">
									<span class="text-xs">#</span>{ destinationEntity.DestinationId.String() }
								</span>
							</p>
							@componentMisc.Tag(
								"ph-user", "",
								destinationEntity.AccountUsername.String()+" <small>("+destinationEntity.AccountId.String()+")</small>",
								"ez-200",
							)
							{{ destinationTypeIcon := "ph-house-line" }}
							{{ destinationTypeColor := "zinc-700" }}
							switch destinationEntity.DestinationType {
								case valueObject.BackupDestinationTypeRemoteHost:
									{{ destinationTypeIcon = "ph-hard-drives" }}
									{{ destinationTypeColor = "cyan-700" }}
								case valueObject.BackupDestinationTypeObjectStorage:
									{{ destinationTypeIcon = "ph-cube" }}
									{{ destinationTypeColor = "yellow-700" }}
							}
							{{ destinationTypeText := destinationEntity.DestinationType.String() }}
							if destinationEntity.DestinationType == valueObject.BackupDestinationTypeRemoteHost {
								{{ destinationTypeText += " <small class='font-italic'>(" + destinationEntity.RemoteHostType.String() + ")</small>" }}
							}
							@componentMisc.Tag(
								destinationTypeIcon, "", destinationTypeText, destinationTypeColor,
							)
							@componentMisc.Tag(
								"ph-folder-open", "",
								destinationEntity.DestinationPath.String(), destinationTypeColor,
							)
							<p class="text-xs">
								{ uiHelper.FormatPointer(destinationEntity.DestinationDescription) }
							</p>
						</td>
						<td class="w-[25%] overflow-x-hidden p-3">
							<table class="mt-2 w-full rounded-md text-left text-[11px] ring-2 ring-neutral-50/5">
								<tbody>
									<tr>
										<td class="rounded-tl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Total Space Usage
										</td>
										<td class="rounded-tr-md px-2 py-1">
											{ uiHelper.FormatPointer(destinationEntity.TotalSpaceUsageBytes) }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Total Space Usage (%)
										</td>
										<td class="px-2 py-1">
											{ uiHelper.FormatPointer(destinationEntity.TotalSpaceUsagePercent) }
										</td>
									</tr>
									<tr class="border-y-2 border-neutral-50/5">
										<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Updated At
										</td>
										<td class="px-2 py-1">
											{ destinationEntity.UpdatedAt.ReadAsRfcDate() }
										</td>
									</tr>
									<tr>
										<td class="rounded-bl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
											Created At
										</td>
										<td class="rounded-br-md px-2 py-1">
											{ destinationEntity.CreatedAt.ReadAsRfcDate() }
										</td>
									</tr>
								</tbody>
							</table>
						</td>
						<td class="w-[45%] space-y-4 overflow-x-hidden p-3 text-left">
							<div>
								<p class="mb-2 text-[10px] font-bold uppercase">
									Storage
								</p>
								<table class="w-full rounded-md text-left text-[11px] ring-2 ring-neutral-50/5">
									<tbody>
										<tr class="border-y-2 border-neutral-50/5">
											<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
												Min Free Local Storage (%)
											</td>
											<td class="px-2 py-1">
												{ uiHelper.FormatPointer(destinationEntity.MinLocalStorageFreePercent) }
											</td>
										</tr>
										<tr>
											<td class="rounded-bl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
												Max Destination Storage Usage (%)
											</td>
											<td class="rounded-br-md px-2 py-1">
												{ uiHelper.FormatPointer(destinationEntity.MaxDestinationStorageUsagePercent) }
											</td>
										</tr>
									</tbody>
								</table>
							</div>
							{{ isRemoteDestination := destinationEntity.DestinationType == valueObject.BackupDestinationTypeObjectStorage || destinationEntity.DestinationType == valueObject.BackupDestinationTypeRemoteHost }}
							if isRemoteDestination {
								<div>
									<p class="mb-2 text-[10px] font-bold uppercase">
										Network
									</p>
									<table class="w-full rounded-md text-left text-[11px] ring-2 ring-neutral-50/5">
										<tbody>
											<tr class="border-b-2 border-neutral-50/5">
												<td class="rounded-tl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
													Max
												</td>
												<td class="rounded-tr-md p-0 text-[10px] leading-5">
													<table class="w-full table-auto text-center">
														<tr>
															<td class="bg-neutral-50/10 px-2 py-1">
																Concurrent Connections
															</td>
															<td class="px-2 py-1">
																{ uiHelper.FormatPointer(destinationEntity.MaxConcurrentConnections) }
															</td>
															<td class="bg-neutral-50/10 px-2 py-1">
																Download Bytes
															</td>
															<td class="px-2 py-1">
																{ uiHelper.FormatPointer(destinationEntity.DownloadBytesSecRateLimit) }
															</td>
															<td class="bg-neutral-50/10 px-2 py-1">
																Upload Bytes
															</td>
															<td class="px-2 py-1">
																{ uiHelper.FormatPointer(destinationEntity.UploadBytesSecRateLimit) }
															</td>
														</tr>
													</table>
												</td>
											</tr>
											<tr>
												<td class="rounded-bl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
													Skip Cert Verification
												</td>
												<td class="rounded-br-md px-2 py-1">
													{ uiHelper.FormatPointer(destinationEntity.SkipCertificateVerification) }
												</td>
											</tr>
										</tbody>
									</table>
								</div>
							}
							if destinationEntity.DestinationType == valueObject.BackupDestinationTypeObjectStorage {
								<div>
									<p class="mb-2 text-[10px] font-bold uppercase">
										Object Storage
									</p>
									<table class="w-full rounded-md text-left text-[11px] ring-2 ring-neutral-50/5">
										<tbody>
											<tr class="border-y-2 border-neutral-50/5">
												<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
													Provider Name
												</td>
												<td class="px-2 py-1">
													{ uiHelper.FormatPointer(destinationEntity.ObjectStorageProvider) }
												</td>
											</tr>
											<tr class="border-y-2 border-neutral-50/5">
												<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
													Region
												</td>
												<td class="px-2 py-1">
													{ uiHelper.FormatPointer(destinationEntity.ObjectStorageProviderRegion) }
												</td>
											</tr>
											<tr class="border-y-2 border-neutral-50/5">
												<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
													Access Key Id
												</td>
												<td class="px-2 py-1">
													{ uiHelper.FormatPointer(destinationEntity.ObjectStorageProviderAccessKeyId) }
												</td>
											</tr>
											<tr class="border-y-2 border-neutral-50/5">
												<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
													Endpoint Url
												</td>
												<td class="px-2 py-1">
													{ uiHelper.FormatPointer(destinationEntity.ObjectStorageEndpointUrl) }
												</td>
											</tr>
											<tr>
												<td class="rounded-bl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
													Bucket Name
												</td>
												<td class="rounded-br-md px-2 py-1">
													{ uiHelper.FormatPointer(destinationEntity.ObjectStorageBucketName) }
												</td>
											</tr>
										</tbody>
									</table>
								</div>
							}
							if destinationEntity.DestinationType == valueObject.BackupDestinationTypeRemoteHost {
								<div>
									<p class="mb-2 text-[10px] font-bold uppercase">
										Remote Host
									</p>
									<table class="w-full rounded-md text-left text-[11px] ring-2 ring-neutral-50/5">
										<tbody>
											<tr class="border-y-2 border-neutral-50/5">
												<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
													Hostname
												</td>
												<td class="px-2 py-1">
													{ uiHelper.FormatPointer(destinationEntity.RemoteHostname) }:{ uiHelper.FormatPointer(destinationEntity.RemoteHostNetworkPort) }
												</td>
											</tr>
											<tr class="border-y-2 border-neutral-50/5">
												<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
													Username
												</td>
												<td class="px-2 py-1">
													{ uiHelper.FormatPointer(destinationEntity.RemoteHostUsername) }
												</td>
											</tr>
											<tr class="border-y-2 border-neutral-50/5">
												<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
													Private Key File Path
												</td>
												<td class="px-2 py-1">
													{ uiHelper.FormatPointer(destinationEntity.RemoteHostPrivateKeyFilePath) }
												</td>
											</tr>
											<tr class="border-y-2 border-neutral-50/5">
												<td class="border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
													Connection Timeout
												</td>
												<td class="px-2 py-1">
													{ uiHelper.FormatPointer(destinationEntity.RemoteHostConnectionTimeoutSecs) }
												</td>
											</tr>
											<tr>
												<td class="rounded-bl-md border-r-2 border-neutral-50/5 bg-neutral-950/20 px-2 py-1">
													Connection Retry Time
												</td>
												<td class="rounded-br-md px-2 py-1">
													{ uiHelper.FormatPointer(destinationEntity.RemoteHostConnectionRetrySecs) }
												</td>
											</tr>
										</tbody>
									</table>
								</div>
							}
						</td>
						<td class="w-[10%]">
							<div class="flex flex-col items-center justify-center gap-2">
								@componentStructural.IconButtonWithTooltip(componentStructural.IconButtonWithTooltipDto{
									Id:              "update-destination",
									Shape:           componentStructural.IconButtonShapeCircular,
									Icon:            "ph-pencil",
									BackgroundColor: "ez-300",
									HoverColor:      "ez-200",
									OnClick:         "openUpdateDestinationModal('" + destinationEntity.DestinationId.String() + "')",
									TooltipText:     "Update",
									TooltipColor:    "ez-300",
									TooltipPosition: "left",
								})
								@componentStructural.IconButtonWithTooltip(componentStructural.IconButtonWithTooltipDto{
									Id:              "delete-destination",
									Shape:           componentStructural.IconButtonShapeCircular,
									Icon:            "ph-trash",
									BackgroundColor: "red-900",
									HoverColor:      "red-700",
									OnClick:         "openDeleteDestinationModal('" + destinationEntity.DestinationId.String() + "')",
									TooltipText:     "Delete",
									TooltipColor:    "red-700",
									TooltipPosition: "left",
								})
							</div>
						</td>
					</tr>
				}
				if len(readDestinationsResponse.Destinations) == 0 {
					<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20">
						<td class="px-3 py-2" colspan="12">No backup destinations created yet.</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

// Couldn't find how to ignore the duplicated json tags warning via "lint:" directive.
// For the time being, we'll have to live with the warning.
type BackupDestinationUnifiedEntity struct {
	entity.BackupDestinationBase
	entity.BackupDestinationRemoteBase
	entity.BackupDestinationLocal
	entity.BackupDestinationObjectStorage
	entity.BackupDestinationRemoteHost
}

type BackupDestinationModifiedResponseDto struct {
	Destinations []BackupDestinationUnifiedEntity
	Pagination   dto.Pagination
}

templ BackupDestinations(
	readDestinationsRequest dto.ReadBackupDestinationsRequest,
	readDestinationsResponse BackupDestinationModifiedResponseDto,
	createDestinationModalDto CreateBackupDestinationModalDto,
) {
	<div x-data="backupDestinations">
		<div class="mb-4 flex flex-row items-center justify-between">
			<div class="min-w-2/3">
				@componentStructural.PageSubHeading(
					"Destinations",
					"Manage local, remote and object storage destinations to be used on backup jobs.",
					"ph-barn",
				)
			</div>
			<div>
				@componentForm.SubmitButton(
					"Create Destination", "ph-plus-square", "openCreateDestinationModal()", false,
				)
			</div>
		</div>
		@BackupDestinationsTable(readDestinationsRequest, readDestinationsResponse)
		@CreateBackupDestinationModal(createDestinationModalDto)
		@UpdateBackupDestinationModal(createDestinationModalDto)
		@componentStructural.DeleteModal(
			"isDeleteDestinationModalOpen", "closeDeleteDestinationModal()", "deleteDestination()",
			"delete-destination", "", "destinationEntity.destinationId",
		)
	</div>
}
