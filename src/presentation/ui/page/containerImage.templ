package page

import (
	"github.com/goinfinite/ez/src/domain/entity"
	"github.com/goinfinite/ez/src/domain/valueObject"
	componentContainer "github.com/goinfinite/ez/src/presentation/ui/component/container"
	componentForm "github.com/goinfinite/ez/src/presentation/ui/component/form"
	componentStructural "github.com/goinfinite/ez/src/presentation/ui/component/structural"
)

script ContainerImageIndexLocalState() {
	document.addEventListener('alpine:init', () => {
		Alpine.data('imageArchive', () => ({
			// Primary State
			imageArchive: {},
			resetPrimaryState() {
				this.imageArchive = {
					'id': '',
					'accountId': '',
				};
			},
			init() {
				this.resetPrimaryState();
			},

			// Modal States
			isDeleteArchiveModalOpen: false,
			openDeleteArchiveModal(accountId, imageId) {
				this.resetPrimaryState();

				this.imageArchive.accountId = accountId;
				this.imageArchive.id = imageId;
				this.isDeleteArchiveModalOpen = true;
			},
			closeDeleteArchiveModal() {
				this.isDeleteArchiveModalOpen = false;
			},
			deleteArchive() {
				htmx.ajax(
					'DELETE',
					'/api/v1/container/image/archive/' + this.imageArchive.accountId + '/' + this.imageArchive.id + '/',
					{swap: 'none'},
				);
				this.$dispatch('delete:image-archive');
				this.closeDeleteArchiveModal();
			},
		}));
		Alpine.data('containerImage', () => ({
			// Primary State
			containerImage: {},
			resetPrimaryState() {
				this.containerImage = {
					'id': '',
					'accountId': '',
					'imageAddress': '',
					'imageHash': '',
					'isa': '',
					'sizeBytes': '',
					'portBindings': '',
					'envs': '',
					'createdAt': '',
				};
			},
			init() {
				this.resetPrimaryState();
			},

			// Auxiliary States
			archiveImage(accountId, imageId) {
				htmx.ajax(
					'POST', '/api/v1/container/image/archive/',
					{swap: 'none', values: {accountId: accountId, imageId: imageId}},
				);
				this.$store.main.refreshScheduledTasksPopover();
			},

			// Modal States
			isImportImageModalOpen: false,
			openImportImageModal() {
				this.resetPrimaryState();

				this.isImportImageModalOpen = true;
			},
			closeImportImageModal() {
				this.isImportImageModalOpen = false;
			},
			isTakeSnapshotModalOpen: false,
			openTakeSnapshotModal() {
				this.resetPrimaryState();

				this.isTakeSnapshotModalOpen = true;
			},
			closeTakeSnapshotModal() {
				this.isTakeSnapshotModalOpen = false;
			},
			isDeleteImageModalOpen: false,
			openDeleteImageModal(accountId, imageId) {
				this.resetPrimaryState();

				this.containerImage.accountId = accountId;
				this.containerImage.id = imageId;
				this.isDeleteImageModalOpen = true;
			},
			closeDeleteImageModal() {
				this.isDeleteImageModalOpen = false;
			},
			deleteImage() {
				htmx.ajax(
					'DELETE',
					'/api/v1/container/image/' + this.containerImage.accountId + '/' + this.containerImage.id + '/',
					{swap: 'none'},
				);
				this.$dispatch('delete:container-image');
				this.closeDeleteImageModal();
			},
		}));
		Alpine.data('containerSnapshot', () => ({
			// Primary State
			accountId: '',
			containerId: '',
			shouldCreateArchive: false,
			shouldDiscardImage: false,
			archiveCompressionFormat: 'br',
			resetPrimaryState() {
				this.accountId = '';
				this.containerId = '';
				this.shouldCreateArchive = false;
				this.shouldDiscardImage = false;
				this.archiveCompressionFormat = 'br';
			},
			init() {
				this.resetPrimaryState();
			},
		}));
	})
}

templ ContainerImageIndex(
	imagesEntities []entity.ContainerImage,
	archiveEntities []entity.ContainerImageArchive,
	accountIdEntityMap map[valueObject.AccountId]entity.Account,
	accountsSelectPairs []componentForm.SelectLabelValuePair,
	containerSummariesSearchableItems []componentForm.SearchableSelectItem,
) {
	@ContainerImageIndexLocalState()
	<div class="flex flex-col">
		<div class="mb-6 flex flex-row items-center justify-between">
			@componentStructural.PageTitle(
				"Container Images",
				"Container Images enable you to manage, import and export container images to be used in your containers.",
				"ph-blueprint",
			)
		</div>
		<div id="image-archives-content" class="card w-full" x-data="imageArchive">
			@componentStructural.PageSubHeading(
				"Image Archives",
				"Compressed image files ready to be downloaded to your local machine.",
				"ph-file-zip",
			)
			@ContainerImageArchivesTable(archiveEntities, accountIdEntityMap)
			<p class="mt-2 text-xs">
				Note: archive files are automatically deleted after 24h to preserve storage space.
			</p>
			@componentStructural.DeleteModal(
				"isDeleteArchiveModalOpen", "closeDeleteArchiveModal()", "deleteArchive()",
				"delete-archive", "imageArchive.id", "",
			)
		</div>
		<div id="container-images-content" class="card mt-10 w-full" x-data="containerImage">
			<div class="mb-4 flex flex-row items-center justify-between">
				<div class="basis-[60%]">
					@componentStructural.PageSubHeading(
						"Local Images",
						"Images used by running containers and/or available for container creation.",
						"ph-blueprint",
					)
				</div>
				<div class="my-4 flex basis-[40%] space-x-4">
					@componentStructural.IconButton(componentStructural.IconButtonSettings{
						Label:   "Import Container Image",
						Icon:    "ph-upload",
						OnClick: "openImportImageModal()",
					})
					@componentStructural.IconButton(componentStructural.IconButtonSettings{
						Label:   "Take Container Snapshot",
						Icon:    "ph-camera",
						OnClick: "openTakeSnapshotModal()",
					})
				</div>
			</div>
			@ContainerImagesTable(imagesEntities, accountIdEntityMap)
			<p class="mt-2 text-xs">
				Note: dangling images are automatically deleted after 30d to preserve storage space.
			</p>
			@ImportContainerImageModal(accountsSelectPairs)
			@TakeContainerSnapshotModal(containerSummariesSearchableItems)
			@componentStructural.DeleteModal(
				"isDeleteImageModalOpen", "closeDeleteImageModal()", "deleteImage()",
				"delete-image", "containerImage.id", "",
			)
		</div>
	</div>
}

templ ContainerImageArchivesTable(
	archiveEntities []entity.ContainerImageArchive,
	accountIdEntityMap map[valueObject.AccountId]entity.Account,
) {
	<table
		id="image-archive-files-table"
		hx-get="/container/image/"
		hx-trigger="delete:image-archive from:window delay:250ms"
		hx-select="#image-archive-files-table"
		hx-target="#image-archive-files-table"
		hx-swap="outerHTML transition:true"
		class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out"
	>
		<thead class="bg-ez-800 text-left text-xs uppercase text-neutral-400">
			<tr class="border-b border-neutral-500 border-opacity-90">
				<th scope="col" class="w-3/6 px-3 py-2">File Path</th>
				<th scope="col" class="px-3 py-2">Image Id</th>
				<th scope="col" class="px-3 py-2">Owner</th>
				<th scope="col" class="w-24 px-3 py-2">Size</th>
				<th scope="col" class="px-3 py-2">Created At</th>
				<th scope="col" class="px-3 py-2"></th>
			</tr>
		</thead>
		<tbody>
			for _, archiveEntity := range archiveEntities {
				<tr class="odd:bg-ez-400 even:bg-ez-600 border-b border-neutral-500 border-opacity-30 text-sm">
					<td class="w-3/6 px-3 py-2">{ archiveEntity.UnixFilePath.String() }</td>
					<td class="px-3 py-2">{ archiveEntity.ImageId.String() }</td>
					<td class="px-3 py-2 leading-tight">
						<p>{ accountIdEntityMap[archiveEntity.AccountId].Username.String() }</p>
						<i class="text-[10px] text-neutral-50 text-opacity-70">
							({ archiveEntity.AccountId.String() })
						</i>
					</td>
					<td class="w-24 px-3 py-2">
						{ archiveEntity.SizeBytes.StringWithSuffix() }
					</td>
					<td class="px-3 py-2">{ archiveEntity.CreatedAt.ReadAsRfcDate() }</td>
					<td class="inline-flex space-x-2 px-4 py-2">
						@componentStructural.IconButton(componentStructural.IconButtonSettings{
							Id:                   "download-archive",
							Shape:                componentStructural.IconButtonShapeCircular,
							Icon:                 "ph-download",
							BackgroundColor:      "ez-300",
							HoverBackgroundColor: "ez-200",
							OnClick:              "window.open('" + archiveEntity.DownloadUrl.String() + "')",
							TooltipText:          "Download Archive",
							TooltipColor:         "ez-300",
							TooltipPosition:      "bottom",
						})
						@componentStructural.IconButton(componentStructural.IconButtonSettings{
							Id:                   "delete-archive",
							Shape:                componentStructural.IconButtonShapeCircular,
							Icon:                 "ph-trash",
							BackgroundColor:      "red-900",
							HoverBackgroundColor: "red-700",
							OnClick:              "openDeleteArchiveModal('" + archiveEntity.AccountId.String() + "','" + archiveEntity.ImageId.String() + "')",
							TooltipText:          "Delete Archive",
							TooltipColor:         "red-700",
							TooltipPosition:      "bottom",
						})
					</td>
				</tr>
			}
			if len(archiveEntities) == 0 {
				<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20">
					<td class="px-6 py-4" colspan="12">No image archives found.</td>
				</tr>
			}
		</tbody>
	</table>
}

templ ContainerImagesTable(
	imagesEntities []entity.ContainerImage,
	accountIdEntityMap map[valueObject.AccountId]entity.Account,
) {
	<table
		id="container-images-table"
		hx-get="/container/image/"
		hx-trigger="delete:container-image from:window delay:250ms, htmx:afterRequest from:form#import-image-form delay:250ms"
		hx-select="#container-images-table"
		hx-target="#container-images-table"
		hx-swap="outerHTML transition:true"
		class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out"
	>
		<thead class="bg-ez-800 text-xs uppercase text-neutral-400">
			<tr class="border-b border-neutral-500 border-opacity-90 text-center">
				<th scope="col" class="px-5 py-3">Image Id</th>
				<th scope="col" class="px-5 py-3">
					<p>Owner</p>
					<i class="text-[10px] normal-case">(AccountId)</i>
				</th>
				<th scope="col" class="px-5 py-3">
					<p>Image Address</p>
					<i class="text-[10px] normal-case">ISA <span class="align-middle text-[8px]">&#8214;</span> SHA256 Hash</i>
				</th>
				<th scope="col" class="w-28 px-5 py-3">Size</th>
				<th scope="col" class="px-5 py-3">Port Bindings</th>
				<th scope="col" class="px-5 py-3">Created At</th>
				<th scope="col" class="px-5 py-3"></th>
			</tr>
		</thead>
		<tbody>
			for _, imageEntity := range imagesEntities {
				<tr class="odd:bg-ez-400 even:bg-ez-600 border-b border-neutral-500 border-opacity-30 text-center">
					<td class="px-6 py-4">{ imageEntity.Id.String() }</td>
					<td class="px-6 py-4 leading-tight">
						<p>{ accountIdEntityMap[imageEntity.AccountId].Username.String() }</p>
						<i class="text-[10px] text-neutral-50 text-opacity-70">({ imageEntity.AccountId.String() })</i>
					</td>
					<td class="px-6 py-4 leading-tight">
						<p>{ imageEntity.ImageAddress.String() }</p>
						<i class="text-[10px] text-neutral-50 text-opacity-70">{ imageEntity.Isa.String() } &#8214; { imageEntity.ImageHash.String() }</i>
					</td>
					<td class="w-28 px-6 py-4">{ imageEntity.SizeBytes.StringWithSuffix() }</td>
					<td class="px-6 py-4">
						if len(imageEntity.PortBindings) > 0 {
							@componentContainer.PortBindingsTable(imageEntity.PortBindings, false)
						} else {
							<div class="text-center text-neutral-400">---</div>
						}
					</td>
					<td class="px-6 py-4">{ imageEntity.CreatedAt.ReadAsRfcDate() }</td>
					<td class="inline-flex space-x-2 px-6 py-4">
						@componentStructural.IconButton(componentStructural.IconButtonSettings{
							Id:                   "archive-image",
							Shape:                componentStructural.IconButtonShapeCircular,
							Icon:                 "ph-file-zip",
							BackgroundColor:      "ez-300",
							HoverBackgroundColor: "ez-200",
							OnClick:              "archiveImage('" + imageEntity.AccountId.String() + "','" + imageEntity.Id.String() + "')",
							TooltipText:          "Archive/Compress Image",
							TooltipColor:         "ez-300",
							TooltipPosition:      "bottom",
						})
						@componentStructural.IconButton(componentStructural.IconButtonSettings{
							Id:                   "delete-image",
							Shape:                componentStructural.IconButtonShapeCircular,
							Icon:                 "ph-trash",
							BackgroundColor:      "red-900",
							HoverBackgroundColor: "red-700",
							OnClick:              "openDeleteImageModal('" + imageEntity.AccountId.String() + "','" + imageEntity.Id.String() + "')",
							TooltipText:          "Delete Image",
							TooltipColor:         "red-700",
							TooltipPosition:      "bottom",
						})
					</td>
				</tr>
			}
			if len(imagesEntities) == 0 {
				<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20">
					<td class="px-6 py-4" colspan="12">No images found.</td>
				</tr>
			}
		</tbody>
	</table>
}

templ ImportContainerImageForm(
	accountsSelectPairs []componentForm.SelectLabelValuePair,
) {
	<form
		id="import-image-form"
		hx-post="/api/v1/container/image/archive/import/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		enctype="multipart/form-data"
		x-on:submit="closeImportImageModal()"
	>
		<div class="flex flex-col space-y-6">
			@componentForm.SelectInputWithLabelValuePair(
				componentForm.SelectInputWithLabelValuePairDto{
					Id:                    "accountId",
					Label:                 "Account",
					SelectedModelBindPath: "containerImage.accountId",
					Options:               accountsSelectPairs,
				})
			@componentForm.Dropzone(
				"archiveFiles", ".tar, .gzip, .zip, .xz or .br", ".tar,.gzip,.zip,.xz,.br", true,
			)
			@componentStructural.IconButton(componentStructural.IconButtonSettings{
				Label: "Import",
				Icon:  "ph-check-fat",
			})
		</div>
	</form>
}

templ ImportContainerImageFaq() {
	@componentStructural.CollapsibleSection("How to export a container running on my local machine?", "ph-question") {
		<div class="space-y-4.5 text-sm leading-normal">
			<p>To export a container running on your local machine, you can use the following commands:</p>
			<p>
				<code class="bg-ez-300 block rounded-md p-3">
					docker commit container_id image:tag
				</code>
				<code class="bg-ez-300 mt-1 block rounded-md p-3">
					docker save -o /path/to/save/image.tar image:tag
				</code>
			</p>
			<p>
				Replace <code class="bg-ez-300 rounded-md px-1.5">container_id</code> with the id of the container you want to export,
				<code class="bg-ez-300 rounded-md px-1.5">image:tag</code> with the name and tag of the image you want to save,
				and <code class="bg-ez-300 rounded-md px-1.5">/path/to/save/image.tar</code> with the path where you want to save the image.
				If you using podman instead of docker, change <code class="bg-ez-300 rounded-md px-1.5">docker</code> to <code class="bg-ez-300 rounded-md px-1.5">podman</code>.
			</p>
			<p>
				After running the command, you can upload the <code class="bg-ez-300 rounded-md px-1.5">.tar</code> file using the form above.
			</p>
		</div>
	}
}

templ ImportContainerImageModal(
	accountsSelectPairs []componentForm.SelectLabelValuePair,
) {
	@componentStructural.RegularModal(
		"Import Container Image", "isImportImageModalOpen", "closeImportImageModal()", "",
	) {
		@ImportContainerImageForm(accountsSelectPairs)
		<div class="mt-4">
			@ImportContainerImageFaq()
		</div>
	}
}

templ TakeContainerSnapshotForm(
	containerSummariesSearchableItems []componentForm.SearchableSelectItem,
) {
	<form
		id="take-snapshot-form"
		x-data="containerSnapshot"
		hx-post="/api/v1/container/image/snapshot/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		x-on:submit="closeTakeSnapshotModal(); $store.main.refreshScheduledTasksPopover()"
	>
		<div class="flex flex-col space-y-6">
			<div>
				@componentForm.SearchableSelectInput(
					"containerId", "Container", "containerId",
					containerSummariesSearchableItems,
				)
				<p class="mt-1 px-1.5 text-[11px] text-neutral-50 text-opacity-75">
					Note: the container's owner account must have enough quota to store the snapshot image (and/or archive).
				</p>
			</div>
			@componentForm.SwitchToggle(componentForm.SwitchToggleDto{
				Id:            "shouldCreateArchive",
				Label:         "Also create an archive after the snapshot is taken.",
				ModelBindPath: "shouldCreateArchive",
			})
			<div x-show="shouldCreateArchive">
				@componentForm.SwitchToggle(componentForm.SwitchToggleDto{
					Id:            "shouldDiscardImage",
					Label:         "Discard the snapshot image after the archive is created (keep the archive only).",
					ModelBindPath: "shouldDiscardImage",
				})
			</div>
			<div x-show="shouldCreateArchive">
				@componentStructural.CollapsibleSection("Advanced Settings", "ph-gear") {
					@componentForm.CompressionFormatSelectInput(
						"archiveCompressionFormat", "archiveCompressionFormat",
					)
				}
			</div>
			@componentStructural.IconButton(componentStructural.IconButtonSettings{
				Label: "Take Snapshot",
				Icon:  "ph-check-fat",
			})
		</div>
	</form>
	<div class="mt-2">
		@componentStructural.Alert(
			componentStructural.AlertTypeInfo,
			"This is an asynchronous operation. The snapshot image will be created in the background.",
		)
	</div>
}

templ TakeContainerSnapshotModal(
	containerSummariesSearchableItems []componentForm.SearchableSelectItem,
) {
	@componentStructural.RegularModal(
		"Take Container Snapshot", "isTakeSnapshotModalOpen", "closeTakeSnapshotModal()", "",
	) {
		@TakeContainerSnapshotForm(containerSummariesSearchableItems)
	}
}
