package page

import (
	"github.com/speedianet/control/src/domain/entity"
	"github.com/speedianet/control/src/domain/valueObject"
	componentForm "github.com/speedianet/control/src/presentation/ui/component/form"
	componentStructural "github.com/speedianet/control/src/presentation/ui/component/structural"
)

script ContainerImageIndexLocalState() {
	document.addEventListener('alpine:init', () => {
		Alpine.data('containerImage', () => ({
			// Primary State
			containerImage: {},
			resetPrimaryState() {
				this.containerImage = {
					'id': '',
					'accountId': '',
					'imageAddress': '',
					'imageHash': '',
					'isa': '',
					'sizeBytes': '',
					'portBindings': '',
					'envs': '',
					'createdAt': '',
				};
			},
			init() {
				this.resetPrimaryState();
			},

			// Auxiliary States

			// Modal States
			archiveImage(accountId, imageId) {
				htmx.ajax(
					'POST', '/api/v1/container/image/archive/',
					{swap: 'none', values: {accountId: accountId, imageId: imageId}},
				);
				// TODO: Pop ScheduledTasks Modal Open
			},
			isDeleteImageModalOpen: false,
			openDeleteImageModal(accountId, imageId) {
				this.resetPrimaryState();

				this.containerImage.accountId = accountId;
				this.containerImage.id = imageId;
				this.isDeleteImageModalOpen = true;
			},
			closeDeleteImageModal() {
				this.isDeleteImageModalOpen = false;
			},
			deleteImage() {
				htmx.ajax(
					'DELETE',
					'/api/v1/container/image/' + this.containerImage.accountId + '/' + this.containerImage.id + '/',
					{swap: 'none'},
				);
				this.closeDeleteImageModal();
			},
			isDeleteArchiveModalOpen: false,
			openDeleteArchiveModal(accountId, imageId) {
				this.resetPrimaryState();

				this.containerImage.accountId = accountId;
				this.containerImage.id = imageId;
				this.isDeleteArchiveModalOpen = true;
			},
			closeDeleteArchiveModal() {
				this.isDeleteArchiveModalOpen = false;
			},
			deleteArchive() {
				htmx.ajax(
					'DELETE',
					'/api/v1/container/image/archive/' + this.containerImage.accountId + '/' + this.containerImage.id + '/',
					{swap: 'none'},
				);
				this.closeDeleteArchiveModal();
			},
		}))
	})
}

templ ContainerImageIndex(
	imagesEntities []entity.ContainerImage,
	archiveFilesEntities []entity.ContainerImageArchiveFile,
	accountIdUsernameMap map[valueObject.AccountId]valueObject.Username,
) {
	@ContainerImageIndexLocalState()
	<div class="flex flex-col" x-data="containerImage">
		<div class="mb-6 flex flex-row items-center justify-between">
			@componentStructural.PageTitle(
				"Container Images",
				"Container Images enable you to manage, import and export container images to be used in your containers.",
				"ph-blueprint",
			)
		</div>
		<div id="image-archives-tables" class="card w-full">
			<h2 class="text-2xl">Images Archives</h2>
			<p>Compressed images files ready to be downloaded to your local machine.</p>
			<p class="mb-4 text-xs">
				Note: archive files are automatically deleted after 24h to preserve storage space.
			</p>
			@ContainerImageArchiveFilesTable(archiveFilesEntities, accountIdUsernameMap)
		</div>
		<div id="images-tables" class="card mt-10 w-full">
			<div class="mb-4 flex flex-row items-center justify-between">
				<div class="basis-[60%]">
					<h2 class="text-2xl">Local Images</h2>
					<p>Images used by running containers and available for container creation.</p>
					<p class="text-xs">
						Note: dangling images are automatically deleted after 30d to preserve storage space.
					</p>
				</div>
				<div class="my-4 flex basis-[40%] space-x-4">
					@componentForm.SubmitButton(
						"Import Container Image", "ph-upload", "openCreateModal()", false,
					)
					@componentForm.SubmitButton(
						"Take Container Snapshot", "ph-camera", "openCreateModal()", false,
					)
				</div>
			</div>
			@ContainerImagesTable(imagesEntities, accountIdUsernameMap)
		</div>
		@componentStructural.DeleteModal(
			"isDeleteImageModalOpen", "closeDeleteImageModal()", "deleteImage()",
			"delete-image", "containerImage.id", "",
		)
		@componentStructural.DeleteModal(
			"isDeleteArchiveModalOpen", "closeDeleteArchiveModal()", "deleteArchive()",
			"delete-archive", "containerImage.id", "",
		)
	</div>
}

templ ContainerImagesTable(
	imagesEntities []entity.ContainerImage,
	accountIdUsernameMap map[valueObject.AccountId]valueObject.Username,
) {
	<table
		id="images-table"
		hx-get="/container/image/"
		hx-trigger="submit from:form delay:500ms, click from:button#delete-image delay:500ms"
		hx-select="#images-tables"
		hx-target="#images-tables"
		hx-swap="outerHTML transition:true"
		class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out"
	>
		<thead class="bg-control-800 text-xs uppercase text-neutral-400">
			<tr class="border-b border-neutral-500 border-opacity-90 text-center">
				<th scope="col" class="px-5 py-3">Image Id</th>
				<th scope="col" class="px-5 py-3">
					<p>Owner</p>
					<i class="text-[10px] normal-case">(AccountId)</i>
				</th>
				<th scope="col" class="px-5 py-3">
					<p>Image Address</p>
					<i class="text-[10px] normal-case">ISA <span class="align-middle text-[8px]">&#8214;</span> SHA256 Hash</i>
				</th>
				<th scope="col" class="px-5 py-3">Size</th>
				<th scope="col" class="px-5 py-3">Port Bindings</th>
				<th scope="col" class="px-5 py-3">Created At</th>
				<th scope="col" class="px-5 py-3"></th>
			</tr>
		</thead>
		<tbody>
			for _, imageEntity := range imagesEntities {
				<tr class="odd:bg-control-400 even:bg-control-600 border-b border-neutral-500 border-opacity-30 text-center">
					<td class="px-6 py-4">{ imageEntity.Id.String() }</td>
					<td class="px-6 py-4 leading-tight">
						<p>{ accountIdUsernameMap[imageEntity.AccountId].String() }</p>
						<i class="text-[10px] text-neutral-50 text-opacity-70">({ imageEntity.AccountId.String() })</i>
					</td>
					<td class="px-6 py-4 leading-tight">
						<p>{ imageEntity.ImageAddress.String() }</p>
						<i class="text-[10px] text-neutral-50 text-opacity-70">{ imageEntity.Isa.String() } &#8214; { imageEntity.ImageHash.String() }</i>
					</td>
					<td class="px-6 py-4">{ imageEntity.SizeBytes.ToMiBString() } <i class="text-xs">MiB</i></td>
					<td class="px-6 py-4"></td>
					<td class="px-6 py-4">{ imageEntity.CreatedAt.GetRfcDate() }</td>
					<td class="inline-flex space-x-2 px-6 py-4">
						@componentStructural.CircularIconButtonWithTooltip(
							"ph-file-zip", "control-300", "control-200",
							"archiveImage('"+imageEntity.AccountId.String()+"','"+imageEntity.Id.String()+"')",
							"Archive/Compress Image", "control-300",
						)
						@componentStructural.CircularIconButtonWithTooltip(
							"ph-trash", "red-900", "red-700",
							"openDeleteImageModal('"+imageEntity.AccountId.String()+"','"+imageEntity.Id.String()+"')",
							"Delete Image", "red-700",
						)
					</td>
				</tr>
			}
			if len(imagesEntities) == 0 {
				<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20">
					<td class="px-6 py-4" colspan="12">No images found.</td>
				</tr>
			}
		</tbody>
	</table>
}

templ ContainerImageArchiveFilesTable(
	archiveFilesEntities []entity.ContainerImageArchiveFile,
	accountIdUsernameMap map[valueObject.AccountId]valueObject.Username,
) {
	<table
		id="image-archive-files-table"
		hx-get="/container/image/"
		hx-trigger="submit from:form delay:500ms, click from:button#delete-archive delay:500ms"
		hx-select="#image-archives-tables"
		hx-target="#image-archives-tables"
		hx-swap="outerHTML transition:true"
		class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out"
	>
		<thead class="bg-control-800 text-xs uppercase text-neutral-400">
			<tr class="border-b border-neutral-500 border-opacity-90 text-center">
				<th scope="col" class="px-5 py-3">Image Id</th>
				<th scope="col" class="px-5 py-3">
					<p>Owner</p>
					<i class="text-[10px] normal-case">(AccountId)</i>
				</th>
				<th scope="col" class="px-5 py-3">Size</th>
				<th scope="col" class="px-5 py-3">Created At</th>
				<th scope="col" class="px-5 py-3"></th>
			</tr>
		</thead>
		<tbody>
			for _, archiveFileEntity := range archiveFilesEntities {
				<tr class="odd:bg-control-400 even:bg-control-600 border-b border-neutral-500 border-opacity-30 text-center">
					<td class="px-6 py-4">{ archiveFileEntity.ImageId.String() }</td>
					<td class="px-6 py-4 leading-tight">
						<p>{ accountIdUsernameMap[archiveFileEntity.AccountId].String() }</p>
						<i class="text-[10px] text-neutral-50 text-opacity-70">
							({ archiveFileEntity.AccountId.String() })
						</i>
					</td>
					<td class="px-6 py-4">
						{ archiveFileEntity.SizeBytes.ToMiBString() } <i class="text-xs">MiB</i>
					</td>
					<td class="px-6 py-4">{ archiveFileEntity.CreatedAt.GetRfcDate() }</td>
					<td class="inline-flex space-x-2 px-6 py-4">
						@componentStructural.CircularIconButtonWithTooltip(
							"ph-download", "control-300", "control-200",
							"window.open('"+archiveFileEntity.DownloadUrl.String()+"')",
							"Download Archive", "control-300",
						)
						@componentStructural.CircularIconButtonWithTooltip(
							"ph-trash", "red-900", "red-700",
							"openDeleteArchiveModal('"+archiveFileEntity.AccountId.String()+"','"+archiveFileEntity.ImageId.String()+"')",
							"Delete Archive", "red-700",
						)
					</td>
				</tr>
			}
			if len(archiveFilesEntities) == 0 {
				<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20">
					<td class="px-6 py-4" colspan="12">No image archives found.</td>
				</tr>
			}
		</tbody>
	</table>
}
