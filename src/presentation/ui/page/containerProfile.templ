package page

import (
	"bytes"
	"encoding/json"
	"github.com/speedianet/control/src/domain/entity"
	"github.com/speedianet/control/src/domain/valueObject"
	componentContainer "github.com/speedianet/control/src/presentation/ui/component/container"
	componentForm "github.com/speedianet/control/src/presentation/ui/component/form"
	componentStructural "github.com/speedianet/control/src/presentation/ui/component/structural"
	uiHelper "github.com/speedianet/control/src/presentation/ui/helper"
	"strconv"
	"strings"
	"text/template"
)

script ContainerProfileIndexLocalState() {
	document.addEventListener('alpine:init', () => {
		Alpine.data('containerProfile', () => ({
			// Primary State
			containerProfile: {},
			resetPrimaryState() {
				this.containerProfile = {
					'id': '',
					'accountId': '',
					'name': '',
					'baseSpecs': {
						'millicores': 0,
						'cpuCores': 0,
						'memoryBytes': 0,
						'memoryMebibytes': 0,
						'memoryGibibytes': 0,
						'storagePerformanceUnits': 0
					},
					'maxSpecs': {
						'millicores': null,
						'cpuCores': null,
						'memoryBytes': null,
						'memoryMebibytes': null,
						'memoryGibibytes': null,
						'storagePerformanceUnits': null
					},
					'scalingPolicy': null,
					'scalingThreshold': null,
					'scalingMaxDurationSecs': null,
					'scalingMaxDurationMinutes': null,
					'scalingMaxDurationHours': null,
					'scalingIntervalSecs': null,
					'scalingIntervalMinutes': null,
					'scalingIntervalHours': null,
					'hostMinCapacityPercent': null
				};
			},
			init() {
				this.resetPrimaryState();
			},

			// Auxiliary States
			gibibyteSelector: true,
			preferedByteSuffix: 'GiB',
			scalingIntervalHoursSelector: true,
			scalingMaxDurationHoursSelector: true,
			preferedScalingIntervalSuffix: 'hour(s)',
			preferedScalingMaxDurationSuffix: 'hour(s)',
			get isScalingPolicyConn() {
				return this.containerProfile.scalingPolicy == 'connection';
			},
			resetAuxiliaryStates() {
				this.gibibyteSelector = true;
				this.preferedByteSuffix = 'GiB';
				this.scalingIntervalHoursSelector = true;
				this.scalingMaxDurationHoursSelector = true;
				this.preferedScalingIntervalSuffix = 'hour(s)';
				this.preferedScalingMaxDurationSuffix = 'hour(s)';
			},

			// Modal States
			isUpdateModalOpen: false,
			openUpdateModal(containerProfileData) {
				this.resetPrimaryState();
				this.resetAuxiliaryStates();

				this.containerProfile = containerProfileData;
				if (this.containerProfile.baseSpecs.memoryGibibytes < 1) {
					this.preferedByteSuffix = 'MiB';
					this.gibibyteSelector = false;
				}

				if (this.containerProfile.scalingIntervalHours < 1) {
					this.scalingIntervalHoursSelector = false;
					this.preferedScalingIntervalSuffix = 'min(s)';
				}

				if (this.containerProfile.scalingMaxDurationHours < 1) {
					this.scalingMaxDurationHoursSelector = false;
					this.preferedScalingMaxDurationSuffix = 'min(s)';
				}

				this.isUpdateModalOpen = true;
			},
			closeUpdateModal() {
				this.isUpdateModalOpen = false;
			},
			isCreateModalOpen: false,
			openCreateModal() {
				this.resetPrimaryState();
				this.resetAuxiliaryStates();

				this.isCreateModalOpen = true;
			},
			closeCreateModal() {
				this.isCreateModalOpen = false;
			},
			isDeleteModalOpen: false,
			openDeleteModal(accountId, profileId, profileName) {
				this.resetPrimaryState();
				this.resetAuxiliaryStates();

				this.containerProfile.id = profileId;
				this.containerProfile.accountId = accountId;
				this.containerProfile.name = profileName;
				this.isDeleteModalOpen = true;
			},
			closeDeleteModal() {
				this.isDeleteModalOpen = false;
			},
			deleteElement() {
				htmx.ajax(
					'DELETE',
					'/api/v1/container/profile/' + this.containerProfile.accountId + '/' + this.containerProfile.id + '/',
					{swap: 'none'},
				);
				this.closeDeleteModal();
			},
		}))
	})
}

templ ContainerProfileIndex(profiles []entity.ContainerProfile) {
	@ContainerProfileIndexLocalState()
	<div class="flex flex-col" x-data="containerProfile">
		<div class="mb-6 flex flex-row items-center justify-between">
			<div class="basis-[70%]">
				@componentStructural.PageTitle(
					"Container Profiles",
					"Container Profiles enable you to establish standardized settings that govern container hardware resource limits, autoscaling policies, and other configurations.",
					"ph-intersect-square",
				)
			</div>
			<div class="my-4 flex space-x-5">
				@componentForm.IconToggle(
					"ph-table", "Form View", "ph-chat-circle-dots", "Textual View",
					"$store.main.textualViewSelector",
				)
				@componentForm.SubmitButton(
					"Create Container Profile", "ph-plus-square", "openCreateModal()", false,
				)
			</div>
		</div>
		<div id="profiles-tables" class="card w-full">
			<template x-if="!$store.main.textualViewSelector">
				@ContainerProfilesRegularFormTable(profiles)
			</template>
			<template x-if="$store.main.textualViewSelector">
				@ContainerProfilesTextualTable(profiles)
			</template>
		</div>
		@CreateContainerProfileModal()
		@UpdateContainerProfileModal()
		@componentStructural.DeleteModal(
			"isDeleteModalOpen", "closeDeleteModal()", "deleteElement()",
			"containerProfile.name", "containerProfile.id",
		)
	</div>
}

templ ContainerProfilesRegularFormTable(profiles []entity.ContainerProfile) {
	<table
		id="profiles-regular-form-table"
		hx-get="/container/profile/"
		hx-trigger="submit from:form delay:500ms, click from:button#delete-element delay:500ms"
		hx-select="#profiles-tables"
		hx-target="#profiles-tables"
		hx-swap="outerHTML transition:true"
		class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out"
	>
		<thead class="bg-control-800 text-xs uppercase text-neutral-400">
			<tr class="border-b border-neutral-500 border-opacity-90 text-center">
				<th scope="col" class="px-5 py-3">Id</th>
				<th scope="col" class="px-5 py-3 text-left">Name</th>
				<th scope="col" class="px-5 py-3">Scaling Policy</th>
				<th scope="col" class="px-5 py-3">Scaling Threshold</th>
				<th scope="col" class="px-5 py-3">Scaling Max Duration</th>
				<th scope="col" class="px-5 py-3">Scaling Interval</th>
				<th scope="col" class="px-5 py-3">Minimum Free Host Capacity (%)</th>
				<th scope="col" class="px-5 py-3"></th>
			</tr>
		</thead>
		<tbody>
			for _, profile := range profiles {
				<tr class="odd:bg-control-400 even:bg-control-600 border-b border-neutral-500 border-opacity-30 text-center">
					<td class="px-6 py-4">{ profile.Id.String() }</td>
					<td class="w-84 px-6 py-4 text-left">
						<p>{ profile.Name.String() }</p>
						@componentContainer.ProfileSummarySmallTag(profile)
					</td>
					<td class="px-6 py-4">
						{ uiHelper.FormatPointer(profile.ScalingPolicy) }
					</td>
					<td class="px-6 py-4">
						if profile.ScalingThreshold != nil {
							if profile.ScalingPolicy.String() == "connection" {
								{ uiHelper.FormatPointer(profile.ScalingThreshold) }
								<span class="text-xs">conn(s)</span>
							} else {
								{ uiHelper.FormatPointer(profile.ScalingThreshold) }<i class="text-xs">%</i>
							}
						} else {
							-
						}
					</td>
					<td class="px-6 py-4">
						if profile.ScalingMaxDurationSecs != nil {
							if *profile.ScalingMaxDurationHours > 0 {
								{ uiHelper.FormatPointer(profile.ScalingMaxDurationHours) }
								<i class="text-xs">hour(s)</i>
							} else {
								{ uiHelper.FormatPointer(profile.ScalingMaxDurationMinutes) }
								<i class="text-xs">min(s)</i>
							}
						} else {
							-
						}
					</td>
					<td class="px-6 py-4">
						if profile.ScalingIntervalSecs != nil {
							if *profile.ScalingIntervalHours > 0 {
								{ uiHelper.FormatPointer(profile.ScalingIntervalHours) }
								<i class="text-xs">hour(s)</i>
							} else {
								{ uiHelper.FormatPointer(profile.ScalingIntervalMinutes) }
								<i class="text-xs">min(s)</i>
							}
						} else {
							-
						}
					</td>
					<td class="px-6 py-4">
						{ uiHelper.FormatPointer(profile.HostMinCapacityPercent) }
					</td>
					<td class="inline-flex px-6 py-4">
						<button
							type="button"
							@click={ "openUpdateModal(" + profile.JsonSerialize() + ")" }
							class="bg-control-300 hover:bg-control-200 me-2 inline-flex items-center rounded-full p-3 text-center font-medium"
						>
							<i class="ph-bold ph-pencil text-xl"></i>
						</button>
						<button
							type="button"
							@click={ "openDeleteModal(" + profile.AccountId.String() + ", " + profile.Id.String() + ", '" + profile.Name.String() + "')" }
							class="me-2 inline-flex items-center rounded-full bg-red-800 bg-opacity-60 p-3 text-center font-medium hover:bg-opacity-90"
						>
							<i class="ph-bold ph-trash text-xl"></i>
						</button>
					</td>
				</tr>
			}
			if len(profiles) == 0 {
				<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20">
					<td class="px-6 py-4" colspan="12">No profiles found.</td>
				</tr>
			}
		</tbody>
	</table>
}

func profileTextualDescriptionFactory(profile entity.ContainerProfile) string {
	highlightTag := func(innerContent interface{}) string {
		innerContentBytes, err := json.Marshal(innerContent)
		if err != nil {
			return "-"
		}
		innerContentStr := strings.Trim(string(innerContentBytes), "\"")

		return "<strong class=\"bg-control-300 rounded-md px-1.5 py-0.5\">" + innerContentStr + "</strong>"
	}

	scalingMaxDuration := ""
	if profile.ScalingMaxDurationSecs != nil {
		durationStr := strconv.FormatUint(uint64(*profile.ScalingMaxDurationMinutes), 10)
		durationSuffix := "min(s)"

		if *profile.ScalingMaxDurationHours > 0 {
			durationStr = strconv.FormatUint(uint64(*profile.ScalingMaxDurationHours), 10)
			durationSuffix = "hour(s)"
		}

		scalingMaxDuration = highlightTag(durationStr) + " <i>" + durationSuffix + "</i>"
	}

	scalingInterval := ""
	if profile.ScalingIntervalSecs != nil {
		intervalStr := strconv.FormatUint(uint64(*profile.ScalingIntervalMinutes), 10)
		intervalSuffix := "min(s)"

		if *profile.ScalingIntervalHours > 0 {
			intervalStr = strconv.FormatUint(uint64(*profile.ScalingIntervalHours), 10)
			intervalSuffix = "hour(s)"
		}

		scalingInterval = highlightTag(intervalStr) + " <i>" + intervalSuffix + "</i>"
	}

	scalingThresholdSuffix := "%"
	if profile.ScalingPolicy != nil && *profile.ScalingPolicy == "connection" {
		scalingThresholdSuffix = "conn(s)"
	}
	scalingThresholdSuffix = "<i>" + scalingThresholdSuffix + "</i>"

	descriptionTemplate := `<p>
	The {{ highlight .Name }} profile allows containers to utilize
	{{ highlight .BaseSpecs.CpuCores }} CPU core(s),
	{{ highlight .BaseSpecs.MemoryGibibytes }} GiB of RAM memory, and
	{{ highlight .BaseSpecs.StoragePerformanceUnits }} storage performance unit(s)
	<small class="text-neutral-400">
		(<strong x-text="{{ .BaseSpecs.StoragePerformanceUnits }} * 5"></strong> MiB/s &
		<strong x-text="{{ .BaseSpecs.StoragePerformanceUnits }} * 250"></strong> ops/s of read and write).
	</small>
	{{ if .MaxSpecs }}
	Optionally, containers using this profile can scale up to
	{{- if .MaxSpecs.CpuCores -}}
	{{ highlight .MaxSpecs.CpuCores }} CPU cores,
	{{- end -}}
	{{- if .MaxSpecs.MemoryGibibytes -}}
	{{ highlight .MaxSpecs.MemoryGibibytes }} GiB of RAM
	{{- end -}}
	{{- if .MaxSpecs.StoragePerformanceUnits -}}
	, and {{ highlight .MaxSpecs.StoragePerformanceUnits }} storage performance units
	<small class="text-neutral-400">
		(<strong x-text="{{ .MaxSpecs.StoragePerformanceUnits }} * 5"></strong> MiB/s &
		<strong x-text="{{ .MaxSpecs.StoragePerformanceUnits }} * 250"></strong> ops)
	</small>
	{{- end -}}
	{{- if .ScalingMaxDurationSecs -}}, during periods of ` + scalingMaxDuration + `{{- end -}}
	{{- if .ScalingIntervalSecs }} at regular intervals of ` + scalingInterval + `,{{- end -}}
	{{- if .ScalingPolicy }}{{if .ScalingThreshold}} provided the {{ highlight .ScalingPolicy }} usage exceeds
	{{ highlight .ScalingThreshold }}` + scalingThresholdSuffix + `{{- end -}}{{- end -}}
	{{- if .HostMinCapacityPercent -}}, if the host machine has at least {{ highlight .HostMinCapacityPercent }}<i>%</i> free capacity available{{- end -}}
	.{{- end -}}</p>`

	templateCustomFunctions := template.FuncMap{
		"highlight": highlightTag,
	}

	templatePtr, err := template.New("profileDescription").
		Funcs(templateCustomFunctions).Parse(descriptionTemplate)
	if err != nil {
		return ""
	}

	var profileDescriptionBuf bytes.Buffer
	err = templatePtr.Execute(&profileDescriptionBuf, profile)
	if err != nil {
		return ""
	}

	return profileDescriptionBuf.String()
}

templ ContainerProfilesTextualTable(profiles []entity.ContainerProfile) {
	<table
		id="profiles-textual-table"
		hx-get="/container/profile/"
		hx-trigger="submit from:form delay:500ms, click from:button#delete-element delay:500ms"
		hx-select="#profiles-tables"
		hx-target="#profiles-tables"
		hx-swap="outerHTML transition:true"
		class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out"
	>
		<thead class="bg-control-800 text-xs uppercase text-neutral-400">
			<tr class="border-b border-neutral-500 border-opacity-90 text-center">
				<th scope="col" class="px-5 py-3">Id</th>
				<th scope="col" class="px-5 py-3 text-left">Description</th>
				<th scope="col" class="px-5 py-3"></th>
			</tr>
		</thead>
		<tbody>
			for _, profile := range profiles {
				<tr class="odd:bg-control-400 even:bg-control-600 border-b border-neutral-500 border-opacity-30 text-center">
					<td class="px-6 py-4">{ profile.Id.String() }</td>
					<td class="min-w-80 px-6 py-4 text-left text-[15px] leading-loose">
						@templ.Raw(profileTextualDescriptionFactory(profile))
					</td>
					<td class="flex flex-row px-6 py-4 align-middle">
						<button
							type="button"
							@click={ "openUpdateModal(" + profile.JsonSerialize() + ")" }
							class="bg-control-300 hover:bg-control-200 me-2 inline-flex items-center rounded-full p-3 text-center font-medium"
						>
							<i class="ph-bold ph-pencil text-xl"></i>
						</button>
						<button
							type="button"
							@click={ "openDeleteModal(" + profile.AccountId.String() + ", " + profile.Id.String() + ", '" + profile.Name.String() + "')" }
							class="me-2 inline-flex items-center rounded-full bg-red-800 bg-opacity-60 p-3 text-center font-medium hover:bg-opacity-90"
						>
							<i class="ph-bold ph-trash text-xl"></i>
						</button>
					</td>
				</tr>
			}
			if len(profiles) == 0 {
				<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20">
					<td class="px-6 py-4" colspan="12">No profiles found.</td>
				</tr>
			}
		</tbody>
	</table>
}

templ ContainerProfileRegularForm(action string) {
	<form
		if action == "create" {
			hx-post="/api/v1/container/profile/"
		}
		if action == "update" {
			hx-put="/api/v1/container/profile/"
		}
		hx-indicator="#loading-overlay"
		hx-swap="none"
	>
		if action == "update" {
			<input type="hidden" name="id" x-bind:value="containerProfile.id"/>
			<input type="hidden" name="accountId" x-bind:value="containerProfile.accountId"/>
		}
		<div class="my-6">
			@componentForm.InputField("text", "name", "Profile Name", "containerProfile.name", false)
		</div>
		<div class="flex flex-row space-x-4">
			<div class="space-y-5.5 bg-control-500 w-1/2 rounded-md p-4">
				<div>
					<h3 class="font-bold">Base Specifications</h3>
					<p class="text-xs">The standard allocation of resources available to the container for everyday operations.</p>
				</div>
				@componentForm.NumberRangeInputField(
					"baseSpecs.cpuCores", "CPU Cores", "", "0", "32", "0.5",
					"containerProfile.baseSpecs.cpuCores",
				)
				@componentForm.DualNumberRangeInputField(
					"RAM Memory", "gibibyteSelector",
					"baseSpecs.memoryGibibytes", "GiB", "1", "64", "1",
					"containerProfile.baseSpecs.memoryGibibytes",
					"memoryMebibytes", "MiB", "100", "65536", "100",
					"containerProfile.baseSpecs.memoryMebibytes",
				)
				<div>
					@componentForm.NumberRangeInputField(
						"baseSpecs.storagePerformanceUnits", "Storage Performance Units",
						"", "1", "100", "1",
						"containerProfile.baseSpecs.storagePerformanceUnits",
					)
					<small class="mt-3 block rounded-md border-x-4 border-amber-400 border-opacity-20 bg-amber-400 bg-opacity-5 p-1 text-center text-[11px] text-neutral-50">
						<strong x-text="containerProfile.baseSpecs.storagePerformanceUnits"></strong> unit(s) = <strong><span x-text="containerProfile.baseSpecs.storagePerformanceUnits * 5"></span> MiB/s & <span x-text="containerProfile.baseSpecs.storagePerformanceUnits * 250"></span> operations</strong> of read and write
					</small>
				</div>
			</div>
			<div class="space-y-5.5 bg-control-500 w-1/2 rounded-md p-4">
				<div>
					<h3 class="font-bold">Max Specifications</h3>
					<p class="text-xs">The peak allocation of resources available to the container during autoscaling periods.</p>
				</div>
				@componentForm.NumberRangeInputField(
					"maxSpecs.cpuCores", "CPU Cores", "", "0", "32", "0.5",
					"containerProfile.maxSpecs.cpuCores",
				)
				@componentForm.DualNumberRangeInputField(
					"RAM Memory", "gibibyteSelector",
					"maxSpecs.memoryGibibytes", "GiB", "1", "64", "1",
					"containerProfile.maxSpecs.memoryGibibytes",
					"memoryMebibytes", "MiB", "100", "65536", "100",
					"containerProfile.maxSpecs.memoryMebibytes",
				)
				<div>
					@componentForm.NumberRangeInputField(
						"maxSpecs.storagePerformanceUnits", "Storage Performance Units",
						"", "1", "100", "1",
						"containerProfile.maxSpecs.storagePerformanceUnits",
					)
					<small class="mt-3 block rounded-md border-x-4 border-amber-400 border-opacity-20 bg-amber-400 bg-opacity-5 p-1 text-center text-[11px] text-neutral-50">
						<strong x-text="containerProfile.maxSpecs.storagePerformanceUnits"></strong> unit(s) = <strong><span x-text="containerProfile.maxSpecs.storagePerformanceUnits * 5"></span> MiB/s & <span x-text="containerProfile.maxSpecs.storagePerformanceUnits * 250"></span> operations</strong> of read and write
					</small>
				</div>
			</div>
		</div>
		<section class="mt-4 w-full rounded-md">
			<details class="bg-control-500 group rounded-md p-4 group-open:bg-opacity-30">
				<summary class="relative flex cursor-pointer list-none items-center pr-8 text-neutral-50 text-opacity-80 focus-visible:outline-none group-open:text-opacity-100 group-hover:text-opacity-100 [&::-webkit-details-marker]:hidden">
					<i class="ph-duotone ph-gear mr-2 text-2xl"></i>
					<span class="font-bold">Advanced Settings</span>
					<i class="ph-bold ph-plus absolute right-0 top-1.5 text-xs transition duration-300 group-open:rotate-45"></i>
				</summary>
				<div class="space-y-5.5 mt-5 py-2">
					@componentForm.SelectInput(
						"scalingPolicy", "Scaling Policy", "containerProfile.scalingPolicy",
						valueObject.ValidScalingPolicies, false,
					)
					<div class="flex flex-row space-x-6">
						<div class="basis-1/2">
							<template x-if="isScalingPolicyConn">
								@componentForm.NumberRangeInputField(
									"scalingThreshold", "Connections Threshold",
									"conn(s)", "1", "1000", "10",
									"containerProfile.scalingThreshold",
								)
							</template>
							<template x-if="!isScalingPolicyConn">
								@componentForm.NumberRangeInputField(
									"scalingThreshold", "Resource Usage Threshold",
									"%", "0", "100", "1",
									"containerProfile.scalingThreshold",
								)
							</template>
						</div>
						<div class="basis-1/2">
							@componentForm.NumberRangeInputField(
								"hostMinCapacityPercent", "Minimum Free Host Capacity",
								"%", "0", "100", "1",
								"containerProfile.hostMinCapacityPercent",
							)
						</div>
					</div>
					<div class="flex flex-row space-x-6">
						<div class="basis-1/2">
							@componentForm.DualNumberRangeInputField(
								"Scaling Max Duration", "scalingMaxDurationHoursSelector",
								"scalingMaxDurationHours", "hour(s)", "1", "24", "1",
								"containerProfile.scalingMaxDurationHours",
								"scalingMaxDurationMinutes", "min(s)", "1", "1440", "5",
								"containerProfile.scalingMaxDurationMinutes",
							)
						</div>
						<div class="basis-1/2">
							@componentForm.DualNumberRangeInputField(
								"Scaling Interval", "scalingIntervalHoursSelector",
								"scalingIntervalHours", "hour(s)", "1", "24", "1",
								"containerProfile.scalingIntervalHours",
								"scalingIntervalMinutes", "min(s)", "1", "1440", "5",
								"containerProfile.scalingIntervalMinutes",
							)
						</div>
					</div>
				</div>
			</details>
		</section>
		<div class="mt-4">
			switch action {
				case "create":
					@componentForm.SubmitButton("Create", "ph-check-fat", "closeCreateModal()", false)
				case "update":
					@componentForm.SubmitButton("Update", "ph-check-fat", "closeUpdateModal()", false)
			}
		</div>
	</form>
}

templ ContainerProfileTextualForm(action string) {
	<form
		if action == "create" {
			hx-post="/api/v1/container/profile/"
		}
		if action == "update" {
			hx-put="/api/v1/container/profile/"
		}
		hx-indicator="#loading-overlay"
		hx-swap="none"
	>
		if action == "update" {
			<input type="hidden" name="id" x-bind:value="containerProfile.id"/>
			<input type="hidden" name="accountId" x-bind:value="containerProfile.accountId"/>
		}
		<div class="bg-control-500 rounded-md p-6 text-center text-lg leading-10">
			The
			<div class="mx-2 inline-flex w-64">
				@componentForm.InputField("text", "name", "", "containerProfile.name", true)
			</div>
			profile allows containers to utilize
			<div class="max-w-12 mx-2 inline-flex">
				@componentForm.InputField("number", "baseSpecs.cpuCores", "", "containerProfile.baseSpecs.cpuCores", true)
			</div>
			CPU core(s),
			<div class="w-42 mr-2 inline-flex space-x-1">
				<template x-if="preferedByteSuffix == 'GiB'">
					@componentForm.InputField("number", "baseSpecs.memoryGibibytes", "", "containerProfile.baseSpecs.memoryGibibytes", true)
				</template>
				<template x-if="preferedByteSuffix == 'MiB'">
					@componentForm.InputField("number", "baseSpecs.memoryMebibytes", "", "containerProfile.baseSpecs.memoryMebibytes", true)
				</template>
				@componentForm.SelectInput("", "", "preferedByteSuffix", []string{"GiB", "MiB"}, true)
			</div>
			of RAM memory, and
			<div class="max-w-12 mx-2 inline-flex">
				@componentForm.InputField("number", "baseSpecs.storagePerformanceUnits", "", "containerProfile.baseSpecs.storagePerformanceUnits", true)
			</div>
			storage performance unit(s) <small class="text-neutral-400">(equivalent to <strong x-text="containerProfile.baseSpecs.storagePerformanceUnits * 5"></strong> MiB/s & <strong x-text="containerProfile.baseSpecs.storagePerformanceUnits * 250"></strong> ops/s of read and write)</small>.
		</div>
		<div class="bg-control-600 mt-4 rounded-md p-6 text-center text-base leading-9">
			Optionally, containers using this profile can scale up to
			<div class="max-w-12 mx-2 inline-flex">
				@componentForm.InputField("number", "maxSpecs.cpuCores", "", "containerProfile.maxSpecs.cpuCores", true)
			</div>
			CPU cores,
			<div class="w-42 mr-2 inline-flex space-x-1">
				<template x-if="preferedByteSuffix == 'GiB'">
					@componentForm.InputField("number", "maxSpecs.memoryGibibytes", "", "containerProfile.maxSpecs.memoryGibibytes", true)
				</template>
				<template x-if="preferedByteSuffix == 'MiB'">
					@componentForm.InputField("number", "maxSpecs.memoryMebibytes", "", "containerProfile.maxSpecs.memoryMebibytes", true)
				</template>
				@componentForm.SelectInput("", "", "preferedByteSuffix", []string{"GiB", "MiB"}, true)
			</div>
			of RAM, and
			<div class="max-w-12 mx-2 inline-flex">
				@componentForm.InputField("number", "maxSpecs.storagePerformanceUnits", "", "containerProfile.maxSpecs.storagePerformanceUnits", true)
			</div>
			storage performance units <small>(<strong><span x-text="containerProfile.maxSpecs.storagePerformanceUnits * 5"></span> MiB/s & <span x-text="containerProfile.maxSpecs.storagePerformanceUnits * 250"></span> ops</strong>)</small>,
			during periods of
			<div class="w-42 mr-2 inline-flex space-x-1">
				<template x-if="preferedScalingMaxDurationSuffix == 'hour(s)'">
					@componentForm.InputField("number", "scalingMaxDurationHours", "", "containerProfile.scalingMaxDurationHours", true)
				</template>
				<template x-if="preferedScalingMaxDurationSuffix == 'min(s)'">
					@componentForm.InputField("number", "scalingMaxDurationMinutes", "", "containerProfile.scalingMaxDurationMinutes", true)
				</template>
				@componentForm.SelectInput("", "", "preferedScalingMaxDurationSuffix", []string{"hour(s)", "min(s)"}, true)
			</div>
			at regular intervals of
			<div class="max-w-42 inline-flex space-x-1">
				<template x-if="preferedScalingIntervalSuffix == 'hour(s)'">
					@componentForm.InputField("number", "scalingIntervalHours", "", "containerProfile.scalingIntervalHours", true)
				</template>
				<template x-if="preferedScalingIntervalSuffix == 'min(s)'">
					@componentForm.InputField("number", "scalingIntervalMinutes", "", "containerProfile.scalingIntervalMinutes", true)
				</template>
				@componentForm.SelectInput("", "", "preferedScalingIntervalSuffix", []string{"hour(s)", "min(s)"}, true)
			</div>
			, provided the
			<div class="w-30 mx-2 inline-flex">
				@componentForm.SelectInput("scalingPolicy", "", "containerProfile.scalingPolicy", valueObject.ValidScalingPolicies, true)
			</div>
			usage exceeds
			<div class="max-w-16 ml-1 inline-flex">
				@componentForm.InputField("number", "scalingThreshold", "", "containerProfile.scalingThreshold", true)
			</div><i x-show="!isScalingPolicyConn">%</i><span x-show="isScalingPolicyConn" class="ml-1">conn(s)</span> and the host machine has at least
			<div class="max-w-12 ml-2 inline-flex">
				@componentForm.InputField("number", "hostMinCapacityPercent", "", "containerProfile.hostMinCapacityPercent", true)
			</div>
			<i>%</i> free capacity available.
		</div>
		<div class="mt-4">
			switch action {
				case "create":
					@componentForm.SubmitButton("Create", "ph-check-fat", "closeCreateModal()", false)
				case "update":
					@componentForm.SubmitButton("Update", "ph-check-fat", "closeUpdateModal()", false)
			}
		</div>
	</form>
}

templ CreateContainerProfileModal() {
	@componentStructural.Modal(
		"Create Container Profile", "isCreateModalOpen", "closeCreateModal()",
		"", true,
	) {
		<template x-if="!$store.main.textualViewSelector">
			@ContainerProfileRegularForm("create")
		</template>
		<template x-if="$store.main.textualViewSelector">
			@ContainerProfileTextualForm("create")
		</template>
	}
}

templ UpdateContainerProfileModal() {
	@componentStructural.Modal(
		"Update Container Profile", "isUpdateModalOpen", "closeUpdateModal()",
		"containerProfile.id", true,
	) {
		<template x-if="!$store.main.textualViewSelector">
			@ContainerProfileRegularForm("update")
		</template>
		<template x-if="$store.main.textualViewSelector">
			@ContainerProfileTextualForm("update")
		</template>
	}
}
