package page

import (
	"github.com/goinfinite/ez/src/domain/dto"
	"github.com/goinfinite/ez/src/domain/entity"
	"github.com/goinfinite/ez/src/domain/valueObject"
	componentContainer "github.com/goinfinite/ez/src/presentation/ui/component/container"
	componentForm "github.com/goinfinite/ez/src/presentation/ui/component/form"
	componentMisc "github.com/goinfinite/ez/src/presentation/ui/component/misc"
	componentStructural "github.com/goinfinite/ez/src/presentation/ui/component/structural"
	"strconv"
)

type CreateContainerModalDto struct {
	AppMarketplaceCarouselItems       []templ.Component
	FrameworkMarketplaceCarouselItems []templ.Component
	StackMarketplaceCarouselItems     []templ.Component
	ContainerImageSearchableItems     []componentForm.SearchableSelectItem
	ContainerProfileSearchableItems   []componentForm.SearchableSelectItem
	AccountSelectLabelValuePairs      []componentForm.SelectLabelValuePair
	ContainerSummarySearchableItems   []componentForm.SearchableSelectItem
}

script OverviewIndexLocalState(containersCurrentPageNumber int) {
	document.addEventListener('alpine:init', () => {
		Alpine.data('containers', () => ({
			// Primary State
			container: {},
			resetPrimaryState() {
				this.container = {
					'id': '',
					'accountId': '',
					'hostname': '',
					'status': true,
					'imageAddress': 'docker.io/goinfinite/os:latest',
					'portBindings': [],
					'restartPolicy': 'unless-stopped',
					'entrypoint': '',
					'profileId': "1",
					'envs': [],
					'launchScript': '',
					'autoCreateMappings': true,
					'existingContainerId': '',
					'useImageExposedPorts': false,
				};
			},
			init() {
				this.resetPrimaryState();
			},
			async autoPortBindingsRetriever(prevImageAddress, newImageAddress) {
				if (!this.isCreateContainerModalOpen) {
					return;
				}

				const isSameImage = prevImageAddress === newImageAddress;
				const isPortBindingsEmpty = this.container.portBindings.length === 0;
				if (isSameImage && !isPortBindingsEmpty) {
					return;
				}

				const isImageAddressTooShort = newImageAddress.length < 3;
				const isImageNotAddressYet = !newImageAddress.includes('/');
				if (isImageAddressTooShort || isImageNotAddressYet) {
					this.container.portBindings = [];
					return;
				}

				const remoteApiUrl = '/api/v1/container/registry/image/tagged/?address=' + this.container.imageAddress;
				this.container.portBindings = await fetch(remoteApiUrl, {
					method: "GET",
						headers: {
						Accept: "application/json",
						"Content-Type": "application/json",
					},
				})
					.then((apiResponse) => {
						if (!apiResponse.ok) {
							throw new Error('BadHttpResponseCode: ' + apiResponse.status);
						}

						return apiResponse.json();
					})
					.then((jsonResponse) => {
						return jsonResponse.body.portBindings;
					})
					.catch((error) => {
						console.error('AutoUpdatePortBindingsError: ', error);
						return [];
					});
			},
			syncExistingContainerPortBindings(prevId, newId) {
				if (!this.isCreateContainerModalOpen) {
					return;
				}

				const isSameContainer = prevId === newId;
				const isPortBindingsEmpty = this.container.portBindings.length === 0;
				if (isSameContainer && !isPortBindingsEmpty) {
					return;
				}

				if (newId.length < 12) {
					this.container.portBindings = [];
					return;
				}

				const containerEntity = JSON.parse(
					document.getElementById('containerEntity_'+newId).textContent
				);
				portBindingsWithoutPrivatePorts = containerEntity.portBindings.map(
					originalPortBinding => {
						adjustedPortBinding = Object.assign({}, originalPortBinding);

						adjustedPortBinding.publicPort = adjustedPortBinding.containerPort;
						delete adjustedPortBinding.privatePort;
						
						return adjustedPortBinding;
					},
				);

				this.container.portBindings = portBindingsWithoutPrivatePorts;
			},

			// Auxiliary States
			createContainerSourceSelectedOption: 'Marketplace',
			createContainerSelectedMarketplaceType: 'App',
			createContainerSelectedMarketplaceItemId: 0,
			updateSelectedMarketplaceItem(itemId) {
				this.createContainerSelectedMarketplaceItemId = itemId;
				const marketplaceItemEntity = JSON.parse(
					document.getElementById('marketplaceItemEntity_'+itemId).textContent
				);
				this.container.imageAddress = marketplaceItemEntity.registryImageAddress;
				this.container.launchScript = '';
				if (marketplaceItemEntity.hasOwnProperty('launchScript')) {
					this.container.launchScript = marketplaceItemEntity.launchScript;
				}
			},
			containersFilters: {
				containerId: '',
				accountId: '',
				hostname: '',
				status: '',
				imageId: '',
				imageAddress: '',
				imageHash: '',
				restartPolicy: '',
				profileId: '',
			},
			containersPagination: {
				pageNumber: containersCurrentPageNumber,
				itemsPerPage: 5,
			},
			reloadContainersTable() {
				queryParams = new URLSearchParams();
				queryParams.set('containersPageNumber', this.containersPagination.pageNumber);
				queryParams.set('containersItemsPerPage', this.containersPagination.itemsPerPage);

				for (const [filterKey, filterValue] of Object.entries(this.containersFilters)) {
					if (filterValue === '') {
						continue;
					}
					const filterKeyCapitalized = filterKey.charAt(0).toUpperCase() + filterKey.slice(1);
					queryParams.set('containers'+filterKeyCapitalized, filterValue);
				}

				htmx.ajax(
					'GET', '/overview/?' + queryParams.toString(),
					{
						select: '#containers-table',
						target: '#containers-table',
						indicator: '#loading-overlay',
						swap: 'outerHTML transition:true'
					},
				);
			},

			// Modal States
			isCreateContainerModalOpen: false,
			openCreateContainerModal() {
				this.resetPrimaryState();

				this.isCreateContainerModalOpen = true;
			},
			closeCreateContainerModal() {
				this.isCreateContainerModalOpen = false;
				this.$dispatch('clear:component-state');
			},
			isUpdateContainerModalOpen: false,
			openUpdateContainerModal(accountId, containerId, profileId) {
				this.resetPrimaryState();

				this.container.accountId = accountId;
				this.container.id = containerId;
				this.container.profileId = profileId;
				this.isUpdateContainerModalOpen = true;
			},
			closeUpdateContainerModal() {
				this.isUpdateContainerModalOpen = false;
			},
			isShutdownContainerModalOpen: false,
			openShutdownContainerModal(accountId, containerId) {
				this.resetPrimaryState();

				this.container.accountId = accountId;
				this.container.id = containerId;
				this.isShutdownContainerModalOpen = true;
			},
			updateContainerStatus(newStatus) {
				return htmx.ajax(
					'PUT', '/api/v1/container/',
					{
						swap: 'none',
						values: {
							accountId: this.container.accountId,
							containerId: this.container.id,
							status: newStatus,
						}
					},
				);
			},
			shutdownContainer() {
				this.updateContainerStatus(false).then(() => {
					this.$dispatch('update:container');
				});
				this.isShutdownContainerModalOpen = false;
			},
			powerOnContainer(accountId, containerId) {
				this.resetPrimaryState();

				this.container.accountId = accountId;
				this.container.id = containerId;
				this.updateContainerStatus(true).then(() => {
					this.$dispatch('update:container');
				});
			},
			isRestartContainerModalOpen: false,
			openRestartContainerModal(accountId, containerId) {
				this.resetPrimaryState();

				this.container.accountId = accountId;
				this.container.id = containerId;
				this.isRestartContainerModalOpen = true;
			},
			restartContainer() {
				this.updateContainerStatus(false).then(() => {
					this.updateContainerStatus(true).then(() => {
						this.$dispatch('update:container');
					});
				});
				this.isRestartContainerModalOpen = false;
			},
			isDeleteContainerModalOpen: false,
			openDeleteContainerModal(accountId, containerId, hostname) {
				this.resetPrimaryState();

				this.container.accountId = accountId;
				this.container.id = containerId;
				this.container.hostname = hostname;
				this.isDeleteContainerModalOpen = true;
			},
			closeDeleteContainerModal() {
				this.isDeleteContainerModalOpen = false;
			},
			deleteContainer() {
				htmx.ajax(
					'DELETE',
					'/api/v1/container/' + this.container.accountId + '/' + this.container.id + '/',
					{swap: 'none'},
				).then(() => {
					this.$dispatch('delete:container');
				});
				this.closeDeleteContainerModal();
			},
		}))
	})
}

templ OverviewIndex(
	containersResponseDto dto.ReadContainersResponse,
	containerIdSummariesMap map[valueObject.ContainerId]componentContainer.ContainerSummary,
	createContainerDto CreateContainerModalDto,
) {
	@OverviewIndexLocalState(int(containersResponseDto.Pagination.PageNumber))
	<div class="flex flex-col">
		<div class="mb-6 flex flex-row justify-between">
			<div class="basis-[70%]">
				@componentStructural.PageTitle(
					"Overview",
					"Welcome! Take a quick peek at your platform's performance such as the containers, server resource usage and system information.",
					"ph-speedometer",
				)
			</div>
		</div>
		<div id="containers" class="card w-full" x-data="containers">
			<div class="-mt-15 float-right mb-5 w-fit">
				@componentForm.SubmitButton(
					"Create Container", "ph-plus-square", "openCreateContainerModal()", false,
				)
			</div>
			@ContainersTable(containersResponseDto, containerIdSummariesMap)
			@CreateContainerModal(createContainerDto)
			@UpdateContainerModal(createContainerDto.ContainerProfileSearchableItems)
			@componentStructural.ConfirmationModal(
				"Power Off Container", "ph-lightning-slash",
				"Are you sure you want to power off this container?<br />The container won't be accessible until powered back on.",
				"isShutdownContainerModalOpen", "shutdownContainer()",
				componentStructural.ConfirmationTypeWarning,
			)
			@componentStructural.ConfirmationModal(
				"Restart Container", "ph-arrows-clockwise",
				"Are you sure you want to restart this container?<br />The container will be stopped and started again.",
				"isRestartContainerModalOpen", "restartContainer()",
				componentStructural.ConfirmationTypeWarning,
			)
			@componentStructural.DeleteModal(
				"isDeleteContainerModalOpen", "closeDeleteContainerModal()", "deleteContainer()",
				"delete-container", "container.hostname", "container.id",
			)
		</div>
		<div id="resource-usage-graphs" class="card w-full"></div>
		<div id="system-information" class="card w-full"></div>
	</div>
}

templ ContainersTable(
	containersResponseDto dto.ReadContainersResponse,
	containerIdSummariesMap map[valueObject.ContainerId]componentContainer.ContainerSummary,
) {
	<!-- Containers Table -->
	<div
		id="containers-table"
		hx-get="/overview/"
		hx-trigger="submit from:form delay:500ms, update:container from:window delay:300ms, delete:container from:window delay:300ms"
		hx-select="#containers-table"
		hx-target="#containers-table"
		hx-swap="outerHTML transition:true"
		@update:containers-pagination="reloadContainersTable()"
		@update:containers-record-filters="reloadContainersTable()"
	>
		<div class="bg-ez-800 border-b border-neutral-500 border-opacity-90 p-2">
			@componentStructural.RecordFilters(
				"containers",
				[]componentStructural.RecordFilterDto{
					{Id: "containerId", Label: "ContainerId", BindValuePath: "containersFilters.containerId"},
					{Id: "accountId", Label: "AccountId", BindValuePath: "containersFilters.accountId"},
					{Id: "hostname", Label: "Hostname", BindValuePath: "containersFilters.hostname"},
					{Id: "status", Label: "Status", BindValuePath: "containersFilters.status"},
					{Id: "imageId", Label: "ImageId", BindValuePath: "containersFilters.imageId"},
					{Id: "imageAddress", Label: "ImageAddress", BindValuePath: "containersFilters.imageAddress"},
					{Id: "imageHash", Label: "ImageHash", BindValuePath: "containersFilters.imageHash"},
					{Id: "restartPolicy", Label: "RestartPolicy", BindValuePath: "containersFilters.restartPolicy"},
					{Id: "profileId", Label: "ProfileId", BindValuePath: "containersFilters.profileId"},
				},
			)
		</div>
		<table
			class="w-full table-fixed border-collapse rounded-md transition-all duration-300 ease-in-out"
		>
			<thead class="bg-ez-800 text-xs uppercase text-neutral-400">
				<tr class="border-b border-neutral-500 border-opacity-90 text-center">
					<th scope="col" class="w-[40%] overflow-x-hidden p-3 text-left">Container</th>
					<th scope="col" class="w-[10%] overflow-x-hidden py-3">CPU</th>
					<th scope="col" class="w-[10%] overflow-x-hidden py-3">RAM</th>
					<th scope="col" class="w-[5%] overflow-x-hidden py-3">Restarts</th>
					<th scope="col" class="w-[25%] overflow-x-hidden py-3">Port Bindings</th>
					<th scope="col" class="w-[10%] py-3"></th>
				</tr>
			</thead>
			<tbody>
				for _, containerEntity := range containersResponseDto.ContainersWithMetrics {
					<!-- Container Table Entry -->
					<tr class="odd:bg-ez-400 even:bg-ez-600 border-b border-neutral-500 border-opacity-30 text-center">
						@templ.JSONScript("containerEntity_"+containerEntity.Id.String(), containerEntity)
						<td class="w-[40%] overflow-x-hidden px-3 py-2 text-left">
							@componentContainer.ContainerTaggedSummary(containerIdSummariesMap[containerEntity.Id])
						</td>
						<td class="w-[10%] overflow-x-hidden px-3 py-2">
							@componentMisc.ProgressBar(
								uint8(containerEntity.Metrics.CurrentCpuPercent),
								containerEntity.Metrics.CurrentCpuPercentStr+"%",
							)
						</td>
						<td class="w-[10%] overflow-x-hidden px-3 py-2">
							@componentMisc.ProgressBar(
								uint8(containerEntity.Metrics.MemoryPercent),
								containerEntity.Metrics.MemoryPercentStr+"%",
							)
						</td>
						<td class="w-[5%] overflow-x-hidden px-3 py-2">
							{ strconv.FormatUint(containerEntity.RestartCount, 10) }
						</td>
						<td class="w-[25%] overflow-x-hidden px-3 py-2">
							if len(containerEntity.PortBindings) > 0 {
								@componentContainer.PortBindingsTable(containerEntity.PortBindings, true)
							} else {
								<div class="text-center text-neutral-400">---</div>
							}
						</td>
						<td class="w-[10%] px-3 py-2">
							<div class="flex flex-wrap items-center gap-1">
								@componentStructural.SquareIconButtonWithTooltip(
									"restart-container", "ph-arrows-clockwise", "ez-300", "ez-200",
									"openRestartContainerModal('"+containerEntity.AccountId.String()+"','"+containerEntity.Id.String()+"')",
									"Restart", "ez-300", "top",
								)
								if containerEntity.Status {
									@componentStructural.SquareIconButtonWithTooltip(
										"toggle-container-status", "ph-lightning-slash", "yellow-900", "yellow-700",
										"openShutdownContainerModal('"+containerEntity.AccountId.String()+"','"+containerEntity.Id.String()+"')",
										"Power Off", "yellow-700", "top",
									)
								} else {
									@componentStructural.SquareIconButtonWithTooltip(
										"toggle-container-status", "ph-lightning", "cyan-900", "cyan-700",
										"powerOnContainer('"+containerEntity.AccountId.String()+"','"+containerEntity.Id.String()+"')",
										"Power On", "cyan-700", "top",
									)
								}
								@componentStructural.SquareIconButtonWithTooltip(
									"update-container", "ph-gear", "ez-300", "ez-200",
									"openUpdateContainerModal('"+containerEntity.AccountId.String()+"','"+containerEntity.Id.String()+"','"+containerEntity.ProfileId.String()+"')",
									"Update", "ez-300", "bottom",
								)
								@componentStructural.SquareIconButtonWithTooltip(
									"delete-container", "ph-trash", "red-900", "red-700",
									"openDeleteContainerModal('"+containerEntity.AccountId.String()+"','"+containerEntity.Id.String()+"','"+containerEntity.Hostname.String()+"')",
									"Delete", "red-700", "bottom",
								)
							</div>
						</td>
					</tr>
				}
				if len(containersResponseDto.ContainersWithMetrics) == 0 {
					<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20">
						<td class="px-3 py-2" colspan="12">No containers yet.</td>
					</tr>
				}
			</tbody>
		</table>
		<div class="bg-ez-800 border-t border-neutral-500 border-opacity-90 p-3">
			@componentStructural.Pagination(
				"containers",
				containersResponseDto.Pagination, "containersPagination.pageNumber",
				"containersPagination.itemsPerPage",
			)
		</div>
	</div>
}

templ CreateContainerForm(createDto CreateContainerModalDto) {
	<form
		hx-post="/api/v1/container/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		@submit="closeCreateContainerModal(); $store.main.refreshScheduledTasksPopover()"
		enctype="multipart/form-data"
		class="space-y-4"
	>
		@componentForm.InputField(componentForm.InputFieldDto{
			InputType: "text", Id: "hostname", Label: "Hostname",
			BindValuePath: "container.hostname", IsRequired: true,
		})
		<!-- ContainerSource & LaunchScript -->
		<div class="border-ez-200 flex flex-col gap-4 rounded-md border p-3">
			<div class="flex items-center space-x-3 text-sm">
				<div>Source: </div>
				for _, sourceOption := range []string{"Marketplace", "URL", "Existing Container", "Local Image", "Upload Image"} {
					@componentForm.RadioInput(
						"", sourceOption, sourceOption, "createContainerSourceSelectedOption",
					)
				}
			</div>
			<div
				class="flex flex-row justify-center"
				x-show="createContainerSourceSelectedOption === 'Marketplace'"
			>
				<div>
					@componentStructural.VerticalTabHeader(
						[]componentStructural.TabHeaderItem{
							{Label: "App", Value: "App", Icon: "ph-browsers"},
							{Label: "Framework", Value: "Framework", Icon: "ph-cube"},
							{Label: "Stack", Value: "Stack", Icon: "ph-books"},
						},
						"createContainerSelectedMarketplaceType",
					)
				</div>
				<div class="border-3 border-ez-500 flex items-center rounded-md p-2">
					<div x-show="createContainerSelectedMarketplaceType === 'App'">
						@componentMisc.MultiItemCarousel(
							"appCarousel", createDto.AppMarketplaceCarouselItems, 5,
						)
					</div>
					<div x-show="createContainerSelectedMarketplaceType === 'Framework'">
						@componentMisc.MultiItemCarousel(
							"frameworkCarousel", createDto.FrameworkMarketplaceCarouselItems, 5,
						)
					</div>
					<div x-show="createContainerSelectedMarketplaceType === 'Stack'">
						@componentMisc.MultiItemCarousel(
							"stackCarousel", createDto.StackMarketplaceCarouselItems, 5,
						)
					</div>
				</div>
			</div>
			<div
				x-show="createContainerSourceSelectedOption === 'URL'"
				x-init="$watch('container.imageAddress', (newAddr, prevAddr) => autoPortBindingsRetriever(prevAddr, newAddr))"
			>
				@componentForm.RemoteSearchableSelectInput(
					"imageAddress", "Image Address", "container.imageAddress",
					"/api/v1/container/registry/image/", "name", "imageAddress",
					[]string{"pullCount", "starCount", "updatedAtRelative"},
				)
			</div>
			<div
				x-show="createContainerSourceSelectedOption === 'Existing Container'"
				x-init="$watch('container.existingContainerId', (newId, prevId) => syncExistingContainerPortBindings(prevId, newId))"
			>
				@componentForm.SearchableSelectInput(
					"existingContainerId", "Existing Container", "container.existingContainerId",
					createDto.ContainerSummarySearchableItems,
				)
			</div>
			<div x-show="createContainerSourceSelectedOption === 'Local Image'">
				@componentForm.SearchableSelectInput(
					"imageAddress", "Container Image", "container.imageAddress",
					createDto.ContainerImageSearchableItems,
				)
			</div>
			<div
				x-show="createContainerSourceSelectedOption === 'Upload Image'"
				class="flex flex-col gap-4"
			>
				@componentForm.Dropzone(
					"archiveImageFile", ".tar, .gzip, .zip, .xz or .br",
					".tar,.gzip,.zip,.xz,.br", false,
				)
				@componentForm.CheckboxInputSwitchToggle(
					"useImageExposedPorts",
					"Map the image's exposed ports (if any) as \"Port Bindings\".",
					"container.useImageExposedPorts", "",
				)
			</div>
			<div>
				@componentForm.TextArea("launch-script", "Launch Script", "container.launchScript")
				<p class="-mt-0.5 px-1.5 text-[11px] text-neutral-50 text-opacity-50">
					Optional; one command per line. Executed only on initial container deployment, useful to install dependencies and configure the environment.
				</p>
			</div>
		</div>
		@componentForm.SearchableSelectInput(
			"profileId", "Profile", "container.profileId",
			createDto.ContainerProfileSearchableItems,
		)
		@componentStructural.CollapsibleSection("Advanced Settings", "ph-gear") {
			<div class="flex w-full flex-col gap-6">
				@componentForm.InputField(componentForm.InputFieldDto{
					InputType: "text", Id: "entrypoint", Label: "Entrypoint",
					BindValuePath: "container.entrypoint",
				})
				<div class="flex flex-row items-center gap-6">
					<div class="basis-1/2">
						@componentForm.SelectInputWithLabelValuePair(
							"accountId", "Account", "container.accountId",
							createDto.AccountSelectLabelValuePairs, true,
						)
					</div>
					<div class="basis-1/2">
						@componentForm.SelectInput(componentForm.SelectInputDto{
							Id: "restartPolicy", Label: "Restart Policy",
							BindValuePath: "container.restartPolicy",
							Options:       valueObject.ValidContainerRestartPolicies,
						})
					</div>
				</div>
				@componentForm.MultiColumnRepeatableFieldset(
					"envs", "Environment Variables", "", "container.envs", []componentForm.RepeatableField{
						{InputType: "text", Id: "key", Label: "Key"},
						{InputType: "text", Id: "value", Label: "Value"},
					},
				)
				@componentForm.MultiColumnRepeatableFieldset(
					"portBindings", "Port Bindings", "Configure which ports are exposed to the outside world. You may select just the 'Service Name' to use the standard ports. Be aware that once deployed, you cannot change the port arrangements.",
					"container.portBindings", []componentForm.RepeatableField{
						{
							InputType: "select",
							Id:        "serviceName",
							Label:     "Service Name",
							Options:   valueObject.ReadPortBindingsServiceNames(),
						},
						{InputType: "text", Id: "publicPort", Label: "Public Port"},
						{InputType: "text", Id: "containerPort", Label: "Container Port"},
						{
							InputType: "select",
							Id:        "protocol",
							Label:     "Protocol",
							Options:   valueObject.ValidNetworkProtocols,
						},
					},
				)
			</div>
		}
		@componentForm.SubmitButton("Create", "ph-check-fat", "", false)
	</form>
}

templ MarketplaceCarouselItem(itemEntity entity.MarketplaceItem) {
	<!-- MultiItemCarouselItem JavaScript -->
	@templ.JSONScript("marketplaceItemEntity_"+itemEntity.Id.String(), itemEntity)
	<!-- MultiItemCarouselItem HTML -->
	<div
		@click={ "updateSelectedMarketplaceItem(" + itemEntity.Id.String() + ")" }
		class="bg-ez-500 hover:ring-infinite-500 hover:text-infinite-500 group relative flex cursor-pointer flex-col items-center justify-center rounded-md p-2 transition-all duration-300 hover:ring-1"
		:class={ "{'text-infinite-500 font-bold ring-1 ring-infinite-500': createContainerSelectedMarketplaceItemId === " + itemEntity.Id.String() + "}" }
	>
		<img
			src={ itemEntity.AvatarUrl.String() }
			alt={ itemEntity.Name.String() + " Avatar" }
			class="max-w-18 m-auto rounded-md transition-all duration-300 group-hover:sepia"
			:class={ "{'sepia': createContainerSelectedMarketplaceItemId === " + itemEntity.Id.String() + "}" }
		/>
		<div class="text-wrap mt-1 break-words text-center text-xs">
			{ itemEntity.Name.String() }
		</div>
		<div class="bg-ez-600 min-w-100 absolute left-1/2 top-full z-10 mt-1 hidden -translate-x-1/2 transform rounded-md p-3 text-xs text-neutral-50 shadow-lg transition-all duration-500 group-hover:block group-hover:translate-y-0.5">
			<div class="flex flex-row items-center gap-3">
				<div class="basis-3/4 font-normal">
					{ itemEntity.Description.String() }
				</div>
				<div class="basis-1/4 space-y-1.5">
					<p class="text-xs font-bold">Requirements</p>
					if itemEntity.MinimumCpuMillicores != nil {
						@componentMisc.TinyTag(
							"ph-speedometer", "", itemEntity.MinimumCpuMillicores.ToCoresString(), "infinite-500",
						)
					}
					if itemEntity.MinimumMemoryBytes != nil {
						@componentMisc.TinyTag(
							"ph-memory", "", itemEntity.MinimumMemoryBytes.StringWithSuffix(), "infinite-500",
						)
					}
					if itemEntity.EstimatedSizeBytes != nil {
						@componentMisc.TinyTag(
							"ph-hard-drives", "", itemEntity.EstimatedSizeBytes.StringWithSuffix(), "infinite-500",
						)
					}
				</div>
			</div>
		</div>
	</div>
}

templ CreateContainerModal(createDto CreateContainerModalDto) {
	@componentStructural.RegularModal(
		"Create Container", "isCreateContainerModalOpen", "closeCreateContainerModal()", "",
	) {
		@CreateContainerForm(createDto)
	}
}

templ UpdateContainerForm(
	containerProfileSearchableItems []componentForm.SearchableSelectItem,
) {
	<form
		hx-put="/api/v1/container/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		class="space-y-4"
	>
		<input type="hidden" name="containerId" x-bind:value="container.id"/>
		<input type="hidden" name="accountId" x-bind:value="container.accountId"/>
		@componentForm.SearchableSelectInput(
			"profileId", "Profile", "container.profileId",
			containerProfileSearchableItems,
		)
		@componentForm.SubmitButton("Update", "ph-check-fat", "closeUpdateContainerModal()", false)
	</form>
}

templ UpdateContainerModal(
	containerProfileSearchableItems []componentForm.SearchableSelectItem,
) {
	@componentStructural.RegularModal(
		"Update Container", "isUpdateContainerModalOpen",
		"closeUpdateContainerModal()", "container.id",
	) {
		@UpdateContainerForm(containerProfileSearchableItems)
	}
}
