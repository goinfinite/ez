package page

import (
	"github.com/goinfinite/ez/src/domain/dto"
	"github.com/goinfinite/ez/src/domain/entity"
	"github.com/goinfinite/ez/src/domain/valueObject"
	componentContainer "github.com/goinfinite/ez/src/presentation/ui/component/container"
	componentForm "github.com/goinfinite/ez/src/presentation/ui/component/form"
	componentMisc "github.com/goinfinite/ez/src/presentation/ui/component/misc"
	componentStructural "github.com/goinfinite/ez/src/presentation/ui/component/structural"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"strconv"
)

script OverviewIndexLocalState() {
	document.addEventListener('alpine:init', () => {
		Alpine.data('containers', () => ({
			// Primary State
			container: {},
			resetPrimaryState() {
				this.container = {
					'id': '',
					'accountId': '',
					'hostname': '',
					'imageAddress': '',
					'portBindings': [],
					'restartPolicy': '',
					'entrypoint': '',
					'profileId': 0,
					'envs': [],
					'launchScript': '',
					'autoCreateMappings': true,
				};
			},
			init() {
				this.resetPrimaryState();
			},

			// Auxiliary States
			createContainerSourceSelectedOption: 'App',
			createContainerSelectedMarketplaceItemId: 0,

			// Modal States
			isCreateContainerModalOpen: false,
			openCreateContainerModal() {
				this.resetPrimaryState();

				this.isCreateContainerModalOpen = true;
			},
			closeCreateContainerModal() {
				this.isCreateContainerModalOpen = false;
			},
			isUpdateContainerModalOpen: false,
			openUpdateContainerModal(accountId, containerId) {
				this.resetPrimaryState();

				this.container.accountId = accountId;
				this.container.id = containerId;
				this.isUpdateContainerModalOpen = true;
			},
			closeUpdateContainerModal() {
				this.isUpdateContainerModalOpen = false;
			},
			isDeleteContainerModalOpen: false,
			openDeleteContainerModal(accountId, containerId, hostname) {
				this.resetPrimaryState();

				this.container.accountId = accountId;
				this.container.id = containerId;
				this.container.hostname = hostname;
				this.isDeleteContainerModalOpen = true;
			},
			closeDeleteContainerModal() {
				this.isDeleteContainerModalOpen = false;
			},
			deleteContainer() {
				htmx.ajax(
					'DELETE',
					'/api/v1/container/' + this.container.accountId + '/' + this.container.id + '/',
					{swap: 'none'},
				);
				this.$dispatch('delete:container');
				this.closeDeleteContainerModal();
			},
		}))
	})
}

templ OverviewIndex(
	containerEntities []dto.ContainerWithMetrics,
	containerIdSummariesMap map[valueObject.ContainerId]componentContainer.ContainerSummary,
	marketplaceItems []entity.MarketplaceItem,
) {
	@OverviewIndexLocalState()
	<div class="flex flex-col">
		<div class="mb-6 flex flex-row justify-between">
			<div class="basis-[70%]">
				@componentStructural.PageTitle(
					"Overview",
					"Welcome! Take a quick peek at your platform's performance such as the containers, server resource usage and system information.",
					"ph-speedometer",
				)
			</div>
		</div>
		<div id="containers" class="card w-full" x-data="containers">
			<div class="-mt-15 float-right mb-5 w-fit">
				@componentForm.SubmitButton(
					"Create Container", "ph-plus-square", "openCreateContainerModal()", false,
				)
			</div>
			@ContainersTable(containerEntities, containerIdSummariesMap)
			@CreateContainerModal(marketplaceItems)
			@UpdateContainerModal()
			@componentStructural.DeleteModal(
				"isDeleteContainerModalOpen", "closeDeleteContainerModal()", "deleteContainer()",
				"delete-container", "container.hostname", "container.id",
			)
		</div>
		<div id="resource-usage-graphs" class="card w-full"></div>
		<div id="system-information" class="card w-full"></div>
	</div>
}

templ ContainersTable(
	containerEntities []dto.ContainerWithMetrics,
	containerIdSummariesMap map[valueObject.ContainerId]componentContainer.ContainerSummary,
) {
	<table
		id="containers-table"
		hx-get="/overview/"
		hx-trigger="submit from:form delay:500ms, click from:button#delete-element delay:500ms"
		hx-select="#containers-table"
		hx-target="#containers-table"
		hx-swap="outerHTML transition:true"
		class="w-full table-fixed border-collapse rounded-md transition-all duration-300 ease-in-out"
	>
		<thead class="bg-ez-800 text-xs uppercase text-neutral-400">
			<tr class="border-b border-neutral-500 border-opacity-90 text-center">
				<th scope="col" class="w-[40%] overflow-x-hidden px-3 py-3 text-left">Container</th>
				<th scope="col" class="w-[10%] overflow-x-hidden py-3">CPU</th>
				<th scope="col" class="w-[10%] overflow-x-hidden py-3">RAM</th>
				<th scope="col" class="w-[5%] overflow-x-hidden py-3">Restarts</th>
				<th scope="col" class="w-[25%] overflow-x-hidden py-3">Port Bindings</th>
				<th scope="col" class="w-[10%] py-3"></th>
			</tr>
		</thead>
		<tbody>
			for _, containerEntity := range containerEntities {
				<tr class="odd:bg-ez-400 even:bg-ez-600 border-b border-neutral-500 border-opacity-30 text-center">
					<td class="w-[40%] overflow-x-hidden px-3 py-2 text-left">
						@componentContainer.ContainerTaggedSummary(containerIdSummariesMap[containerEntity.Id])
					</td>
					<td class="w-[10%] overflow-x-hidden px-3 py-2">
						@componentMisc.ProgressBar(
							uint8(containerEntity.Metrics.CurrentCpuPercent),
							containerEntity.Metrics.CurrentCpuPercentStr+"%",
						)
					</td>
					<td class="w-[10%] overflow-x-hidden px-3 py-2">
						@componentMisc.ProgressBar(
							uint8(containerEntity.Metrics.MemoryPercent),
							containerEntity.Metrics.MemoryPercentStr+"%",
						)
					</td>
					<td class="w-[5%] overflow-x-hidden px-3 py-2">
						{ strconv.FormatUint(containerEntity.RestartCount, 10) }
					</td>
					<td class="w-[25%] overflow-x-hidden px-3 py-2">
						if len(containerEntity.PortBindings) > 0 {
							@componentContainer.PortBindingsTable(containerEntity.PortBindings, true)
						} else {
							<div class="text-center text-neutral-400">---</div>
						}
					</td>
					<td class="w-[10%] px-3 py-2">
						<div class="flex flex-wrap items-center gap-1">
							@componentStructural.SquareIconButtonWithTooltip(
								"restart-container", "ph-arrows-clockwise", "ez-300", "ez-200",
								"restartContainer('"+containerEntity.AccountId.String()+"','"+containerEntity.Id.String()+"')",
								"Restart", "ez-300", "top",
							)
							if containerEntity.Status {
								@componentStructural.SquareIconButtonWithTooltip(
									"toggle-container-status", "ph-lightning-slash", "yellow-900", "yellow-700",
									"toggleContainerStatus('"+containerEntity.AccountId.String()+"','"+containerEntity.Id.String()+"')",
									"Power Off", "yellow-700", "top",
								)
							} else {
								@componentStructural.SquareIconButtonWithTooltip(
									"toggle-container-status", "ph-lightning", "cyan-900", "cyan-700",
									"toggleContainerStatus('"+containerEntity.AccountId.String()+"','"+containerEntity.Id.String()+"')",
									"Power On", "cyan-700", "top",
								)
							}
							@componentStructural.SquareIconButtonWithTooltip(
								"update-container", "ph-gear", "ez-300", "ez-200",
								"openUpdateContainerModal('"+containerEntity.AccountId.String()+"','"+containerEntity.Id.String()+"')",
								"Update", "ez-300", "bottom",
							)
							@componentStructural.SquareIconButtonWithTooltip(
								"delete-container", "ph-trash", "red-900", "red-700",
								"openDeleteContainerModal('"+containerEntity.AccountId.String()+"','"+containerEntity.Id.String()+"','"+containerEntity.Hostname.String()+"')",
								"Delete", "red-700", "bottom",
							)
						</div>
					</td>
				</tr>
			}
			if len(containerEntities) == 0 {
				<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20">
					<td class="px-3 py-2" colspan="12">No containers yet.</td>
				</tr>
			}
		</tbody>
	</table>
}

func readContainerSourceOptions() []string {
	sourceOptions := []string{}
	for _, itemType := range valueObject.ValidMarketplaceItemTypes {
		upperCaser := cases.Title(language.English)
		sourceOptions = append(sourceOptions, upperCaser.String(itemType))
	}
	return append(sourceOptions, []string{"URL", "Local Image", "Upload Image"}...)
}

templ CreateContainerForm(
	appCarouselItems, frameworkCarouselItems, stackCarouselItems []templ.Component,
) {
	<form
		hx-post="/api/v1/container/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		class="space-y-6"
	>
		@componentForm.InputField("text", "hostname", "Hostname", "container.hostname", false)
		<div class="border-ez-200 rounded-md border p-3">
			<div class="flex items-center space-x-3 text-sm">
				<div>Source: </div>
				for _, sourceOption := range readContainerSourceOptions() {
					@componentForm.RadioInput(
						"", sourceOption, sourceOption, "createContainerSourceSelectedOption",
					)
				}
			</div>
			<div class="my-3" :class="{ 'hidden': createContainerSourceSelectedOption !== 'App' }">
				@componentMisc.MultiItemCarousel("appCarousel", appCarouselItems, 6)
			</div>
			<div class="my-3" :class="{ 'hidden': createContainerSourceSelectedOption !== 'Framework' }">
				@componentMisc.MultiItemCarousel("frameworkCarousel", frameworkCarouselItems, 6)
			</div>
			<div class="my-3" :class="{ 'hidden': createContainerSourceSelectedOption !== 'Stack' }">
				@componentMisc.MultiItemCarousel("stackCarousel", stackCarouselItems, 6)
			</div>
			@componentForm.TextArea("launch-script", "Launch Script", "container.launchScript")
			// Depending on the selection, show:
			// Marketplace items, URL, local image selection OR upload image form;
			// - Launch Script (will be pre-filled based on the selection)
			// - Container profile
			// => Advanced Settings
			// - Entrypoint
			// - Account Owner
			// - Restart Policy
			// - Env Vars
			// - Port Bindings
			// We'll have to load the marketplace items, local images and account owners
			// into the page. That will likely slow things down. However, we can deal with
			// that later. For now, let's just get the basic form working.
		</div>
	</form>
}

templ MarketplaceCarouselItem(itemEntity entity.MarketplaceItem) {
	<div
		@click={ "createContainerSelectedMarketplaceItemId = " + itemEntity.Id.String() }
		class="bg-ez-500 hover:ring-infinite-500 hover:text-infinite-500 group flex cursor-pointer flex-col items-center justify-center overflow-hidden rounded-md p-2 transition-all duration-300 hover:ring-1"
		:class={ "{'text-infinite-500 font-bold ring-1 ring-infinite-500': createContainerSelectedMarketplaceItemId === " + itemEntity.Id.String() + "}" }
	>
		<img
			src={ itemEntity.AvatarUrl.String() }
			alt={ itemEntity.Name.String() + " Avatar" }
			class="max-w-18 m-auto rounded-md transition-all duration-300 group-hover:sepia"
			:class={ "{'sepia': createContainerSelectedMarketplaceItemId === " + itemEntity.Id.String() + "}" }
		/>
		<div class="text-wrap mt-1 break-words text-center text-xs">
			{ itemEntity.Name.String() }
		</div>
		<div class="bg-ez-300 max-w-96 absolute left-1/2 top-full mt-1 -translate-x-1/2 transform rounded-md p-3 text-xs text-white opacity-0 shadow-lg transition-all duration-300 group-hover:block group-hover:translate-y-0.5 group-hover:opacity-100">
			<div class="flex flex-row items-center gap-3">
				<div class="basis-3/4 font-normal">
					{ itemEntity.Description.String() }
				</div>
				<div class="basis-1/4 space-y-1.5">
					<p class="text-xs font-bold">Requirements</p>
					if itemEntity.MinimumCpuMillicores != nil {
						@componentStructural.TinyTag(
							"ph-speedometer", "", itemEntity.MinimumCpuMillicores.ToCoresString(), "ez-500",
						)
					}
					if itemEntity.MinimumMemoryBytes != nil {
						@componentStructural.TinyTag(
							"ph-memory", "", itemEntity.MinimumMemoryBytes.StringWithSuffix(), "ez-500",
						)
					}
					if itemEntity.EstimatedSizeBytes != nil {
						@componentStructural.TinyTag(
							"ph-hard-drives", "", itemEntity.EstimatedSizeBytes.StringWithSuffix(), "ez-500",
						)
					}
				</div>
			</div>
		</div>
	</div>
}

func transformMarketplaceItemsIntoCarouselItems(
	itemEntities []entity.MarketplaceItem,
) (appCarouselItems, frameworkCarouselItems, stackCarouselItems []templ.Component) {
	for _, itemEntity := range itemEntities {
		switch itemEntity.Type.String() {
		case "app":
			appCarouselItems = append(appCarouselItems, MarketplaceCarouselItem(itemEntity))
		case "framework":
			frameworkCarouselItems = append(frameworkCarouselItems, MarketplaceCarouselItem(itemEntity))
		case "stack":
			stackCarouselItems = append(stackCarouselItems, MarketplaceCarouselItem(itemEntity))
		}
	}

	return appCarouselItems, frameworkCarouselItems, stackCarouselItems
}

templ CreateContainerModal(
	marketplaceItems []entity.MarketplaceItem,
) {
	@componentStructural.Modal(
		"Create Container", "isCreateContainerModalOpen", "closeCreateContainerModal()", "",
	) {
		@CreateContainerForm(transformMarketplaceItemsIntoCarouselItems(marketplaceItems))
	}
}

templ UpdateContainerForm() {
}

templ UpdateContainerModal() {
	@componentStructural.Modal(
		"Update Container", "isUpdateContainerModalOpen", "closeUpdateContainerModal()", "",
	) {
		@UpdateContainerForm()
	}
}
